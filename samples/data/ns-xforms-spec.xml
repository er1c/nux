<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-->
<html xml:lang="EN" lang="EN" xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>XForms 1.0 -- Review Version</title>
  <style type="text/css" xml:space="preserve">
/**/
code           { font-family: monospace; }
div.constraint,
div.issue,
div.note,
div.notice     { margin-left: 2em; }
dt.label       { display: run-in; }
li p           { margin-top: 0.3em;
                 margin-bottom: 0.3em; }
div.exampleInner pre { margin-left: 1em;
                       margin-top: 0em; margin-bottom: 0em}
div.exampleOuter {border: 4px double gray;
                  margin: 0em; padding: 0em}
div.exampleInner { background-color: #d5dee3;
                   border-top-width: 4px;
                   border-top-style: double;
                   border-top-color: #d3d3d3;
                   border-bottom-width: 4px;
                   border-bottom-style: double;
                   border-bottom-color: #d3d3d3;
                   padding: 4px; margin: 0em }
div.exampleWrapper { margin: 4px }
div.exampleHeader { font-weight: bold;
                    margin: 4px}
.xmlverb-default          { color: #333333; background-color: #ffffff; font-family: monospace }
.xmlverb-element-name     { color: #990000 }
.xmlverb-element-nsprefix { color: #666600 }
.xmlverb-attr-name        { color: #660000 }
.xmlverb-attr-content     { color: #000099; font-weight: bold }
.xmlverb-ns-name          { color: #666600 }
.xmlverb-ns-uri           { color: #330099 }
.xmlverb-text             { color: #000000; font-weight: bold }
.xmlverb-comment          { color: #006600; font-style: italic }
.xmlverb-pi-name          { color: #006600; font-style: italic }
.xmlverb-pi-content       { color: #006666; font-style: italic }
div.diff-add  { background-color: #FFFF40 }
div.diff-del  { text-decoration: line-through; background-color: #FF8181 }
div.diff-chg  { background-color: #94DC94 }
div.diff-off  {  }
span.diff-add { background-color: #FFFF40 }
span.diff-del { text-decoration: line-through; background-color: #FF8181 }
span.diff-chg { background-color: #94DC94 }
span.diff-off {  }
td.diff-add   { background-color: #FFFF40 }
td.diff-del   { text-decoration: line-through; background-color: #FF8181 }
td.diff-chg   { background-color: #94DC94 }
td.diff-off   {  }
/*
*/</style>
  <link rel="stylesheet" type="text/css" href="http://www.w3.org/StyleSheets/TR/W3C-REC.css"/>
</head>

<body>

<div>
<p>The presentation of this document has been augmented to identify changes
from a previous version. Three kinds of changes are highlighted: <span class="diff-add">new, added text</span>, <span class="diff-chg">changed
text</span>, and <span class="diff-del">deleted text</span>.</p>
<hr/>
</div>

<div class="head">
<p><a href="http://www.w3.org/" shape="rect"><img src="http://www.w3.org/Icons/w3c_home" alt="W3C" height="48" width="72"/></a></p>

<h1><a name="title" id="title" shape="rect"/>XForms 1.0</h1>

<h2><a name="w3c-doctype" id="w3c-doctype" shape="rect"/>W3C Recommendation 14 October
2003</h2>
<dl>
  <dt>This version:</dt>
    <dd><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/" shape="rect">http://www.w3.org/TR/2003/REC-xforms-20031014/</a></dd>
  <dt>Latest version:</dt>
    <dd><a href="http://www.w3.org/TR/xforms/" shape="rect">http://www.w3.org/TR/xforms/</a></dd>
  <dt>Previous version:</dt>
    <dd><a href="http://www.w3.org/TR/2003/PR-xforms-20030801/" shape="rect">http://www.w3.org/TR/2003/PR-xforms-20030801/</a></dd>
  <dt>Editors:</dt>
    <dd>Micah Dubinko, Cardiff Software <a href="mailto:mdubinko@Cardiff.com" shape="rect">&lt;mdubinko@Cardiff.com&gt;</a></dd>
    <dd>Leigh L. Klotz, Jr., Xerox Corporation <a href="mailto:Leigh.Klotz@pahv.xerox.com" shape="rect">&lt;Leigh.Klotz@pahv.xerox.com&gt;</a></dd>
    <dd>Roland Merrick, IBM <a href="mailto:Roland_Merrick@uk.ibm.com" shape="rect">&lt;Roland_Merrick@uk.ibm.com&gt;</a></dd>
    <dd>T. V. Raman, IBM <a href="mailto:tvraman@almaden.ibm.com" shape="rect">&lt;tvraman@almaden.ibm.com&gt;</a></dd>
</dl>

<p>Please refer to the <a href="http://www.w3.org/2003/10/REC-xforms-10-20031014-errata.html" shape="rect"><strong>errata</strong></a>
for this document, which may include some normative corrections.</p>

<p>This document is also available in these non-normative formats: <a href="index-all.html" shape="rect">single HTML file</a>, <a href="index-diff.html" shape="rect">diff-marked HTML</a>, <a href="REC-xforms-20031014.zip" shape="rect">Zip archive</a>.</p>

<p>The English version of this specification is the only normative version.
Non-normative <a href="http://www.w3.org/MarkUp/Forms/Translation/" shape="rect">translations</a> may also
be available.</p>

<p class="copyright"><a href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright" shape="rect">Copyright</a> © 2003 <a href="http://www.w3.org/" shape="rect"><abbr title="World Wide Web Consortium">W3C</abbr></a><sup>®</sup> (<a href="http://www.lcs.mit.edu/" shape="rect"><abbr title="Massachusetts Institute of Technology">MIT</abbr></a>, <a href="http://www.ercim.org/" shape="rect"><abbr title="European Research Consortium for Informatics and Mathematics">ERCIM</abbr></a>,
<a href="http://www.keio.ac.jp/" shape="rect">Keio</a>), All Rights Reserved. W3C <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer" shape="rect">liability</a>,
<a href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks" shape="rect">trademark</a>,
<a href="http://www.w3.org/Consortium/Legal/copyright-documents" shape="rect">document
use</a>, and <a href="http://www.w3.org/Consortium/Legal/copyright-software" shape="rect">software
licensing</a> rules apply.</p>
</div>
<hr/>

<div>
<h2><a name="abstract" id="abstract" shape="rect"/>Abstract</h2>

<p>XForms is an XML application that represents the next generation of forms
for the Web. By splitting traditional XHTML forms into three
parts—XForms model, instance data, and user interface—it
separates presentation from content, allows reuse, gives strong
typing—reducing the number of round-trips to the server, as well as
offering device independence and a reduced need for scripting.</p>

<p>XForms is not a free-standing document type, but is intended to be
integrated into other markup languages, such as XHTML or SVG.</p>
</div>

<div>
<h2><a name="status" id="status" shape="rect"/>Status of this Document</h2>

<p><em>This section describes the status of this document at the time of its
publication. Other documents may supersede this document. A list of current
W3C publications and the latest revision of this technical report can be
found in the <a href="http://www.w3.org/TR/" shape="rect">W3C technical reports index</a>
at http://www.w3.org/TR/.</em></p>

<p>This document is a <a href="http://www.w3.org/2003/06/Process-20030618/tr.html#RecsW3C" shape="rect">Recommendation</a>
of the W3C. This document has been produced by the <a href="http://www.w3.org/MarkUp/Forms/Group/" shape="rect">W3C XForms Working Group</a> as
part of the <a href="http://www.w3.org/2002/Forms/Activity" shape="rect">XForms
Activity</a> within the <a href="http://www.w3.org/Interaction/" shape="rect">W3C
Interaction Domain</a>. The authors of this document are the XForms Working
Group participants.</p>

<p>It has been reviewed by W3C Members and other interested parties, and has
been endorsed by the Director as a W3C Recommendation. It is a stable
document and may be used as reference material or cited as a normative
reference from another document. W3C's role in making the Recommendation is
to draw attention to the specification and to promote its widespread
deployment. This enhances the functionality and interoperability of the
Web.</p>

<p>The XForms Basic Profile which appeared in the XForms 1.0 Candidate
Recommendation is now a standalone specification. Please refer to the XForms
Basic Profile <a href="#ref-xforms-basic" shape="rect">[XForms Basic]</a> for XForms
processing tailored to the needs of constrained devices and environments.</p>

<p>Comments on this document are welcome. Please send them to the public
mailing list <a href="mailto:www-forms-editor@w3.org" shape="rect">www-forms-editor@w3.org</a>. (<a href="http://lists.w3.org/Archives/Public/www-forms-editor/" shape="rect">archive</a>). It
is inappropriate to send discussion email to this address.</p>

<p>The W3C XForms Working Group has released a public <a href="http://www.w3.org/MarkUp/Forms/Test/" shape="rect">test suite</a> for XForms 1.0
along with an <a href="http://www.w3.org/MarkUp/Forms/Test/ImplementationReport.html" shape="rect">implementation
report</a>. A list of current known <a href="http://www.w3.org/MarkUp/Forms/#implementations" shape="rect">XForms
Implementations</a> is available.</p>

<p>Patent disclosures relevant to this specification may be found on the
XForms Working Group's <a href="http://www.w3.org/MarkUp/Forms/2002/disclosures.html" shape="rect">public patent
disclosure page</a>, in conformance with W3C policy.</p>
</div>

<div class="toc">
<h2><a name="contents" id="contents" shape="rect"/>Table of Contents</h2>

<p class="toc">1 <a href="#intro" shape="rect">About the XForms 1.0 Specification</a><br clear="none"/>
    1.1 <a href="#intro-background" shape="rect">Background</a><br clear="none"/>
    1.2 <a href="#intro-reading" shape="rect">Reading the
Specification</a><br clear="none"/>
    1.3 <a href="#intro-org" shape="rect">How the Specification is
Organized</a><br clear="none"/>
    1.4 <a href="#intro-conventions" shape="rect">Documentation
Conventions</a><br clear="none"/>
2 <a href="#concepts" shape="rect">Introduction to XForms</a><br clear="none"/>
    2.1 <a href="#concepts-xhtml" shape="rect">An Example</a><br clear="none"/>
    2.2 <a href="#concepts-xml-instance-data" shape="rect">Providing
XML Instance Data</a><br clear="none"/>
    2.3 <a href="#concepts-model" shape="rect">Constraining
Values</a><br clear="none"/>
    2.4 <a href="#concepts-multiple" shape="rect">Multiple Forms per
Document</a><br clear="none"/>
3 <a href="#structure" shape="rect">Document Structure</a><br clear="none"/>
    3.1 <a href="#structure-namespace" shape="rect">The XForms
Namespace</a><br clear="none"/>
    3.2 <a href="#structure-attrs" shape="rect">XForms Core Attribute
Collections</a><br clear="none"/>
        3.2.1 <a href="#structure-attrs-common" shape="rect">Common Attributes</a><br clear="none"/>
        3.2.2 <a href="#structure-attrs-link" shape="rect">Linking Attributes</a><br clear="none"/>
        3.2.3 <a href="#structure-attrs-single-node" shape="rect">Single-Node Binding Attributes</a><br clear="none"/>
        3.2.4 <a href="#structure-attrs-nodeset" shape="rect">Node-Set Binding Attributes</a><br clear="none"/>
        3.2.5 <a href="#structure-attrs-mip" shape="rect">Model Item Property Attributes</a><br clear="none"/>
    3.3 <a href="#structure-abstract" shape="rect">The XForms Core
Module</a><br clear="none"/>
        3.3.1 <a href="#structure-model" shape="rect">The model Element</a><br clear="none"/>
        3.3.2 <a href="#structure-model-instance" shape="rect">The instance Element</a><br clear="none"/>
        3.3.3 <a href="#structure-model-submission" shape="rect">The submission Element</a><br clear="none"/>
        3.3.4 <a href="#structure-bind-element" shape="rect">The bind Element</a><br clear="none"/>
    3.4 <a href="#module-mustUnderstand" shape="rect">The XForms
MustUnderstand Module</a><br clear="none"/>
    3.5 <a href="#module-extension" shape="rect">The XForms Extension
Module</a><br clear="none"/>
        3.5.1 <a href="#structure-extension" shape="rect">The extension Element</a><br clear="none"/>
4 <a href="#rpm" shape="rect">Processing Model</a><br clear="none"/>
    4.1 <a href="#rpm-events" shape="rect">Events Overview</a><br clear="none"/>
    4.2 <a href="#rpm-init" shape="rect">Initialization Events</a><br clear="none"/>
        4.2.1 <a href="#evt-modelConstruct" shape="rect">The xforms-model-construct Event</a><br clear="none"/>
        4.2.2 <a href="#evt-modelConstructDone" shape="rect">The xforms-model-construct-done Event</a><br clear="none"/>
        4.2.3 <a href="#evt-ready" shape="rect">The xforms-ready Event</a><br clear="none"/>
        4.2.4 <a href="#evt-modelDestruct" shape="rect">The xforms-model-destruct Event</a><br clear="none"/>
    4.3 <a href="#rpm-interaction" shape="rect">Interaction
Events</a><br clear="none"/>
        4.3.1 <a href="#evt-next" shape="rect">The
xforms-next and xforms-previous Events</a><br clear="none"/>
        4.3.2 <a href="#evt-focus" shape="rect">The xforms-focus Event</a><br clear="none"/>
        4.3.3 <a href="#evt-help" shape="rect">The
xforms-help and xforms-hint Events</a><br clear="none"/>
        4.3.4 <a href="#evt-refresh" shape="rect">The xforms-refresh Event</a><br clear="none"/>
        4.3.5 <a href="#evt-revalidate" shape="rect">The xforms-revalidate Event</a><br clear="none"/>
        4.3.6 <a href="#evt-recalculate" shape="rect">The xforms-recalculate Event</a><br clear="none"/>
        4.3.7 <a href="#evt-rebuild" shape="rect">The xforms-rebuild Event</a><br clear="none"/>
        4.3.8 <a href="#evt-reset" shape="rect">The xforms-reset Event</a><br clear="none"/>
        4.3.9 <a href="#evt-submit" shape="rect">The xforms-submit Event</a><br clear="none"/>
    4.4 <a href="#evt-notify" shape="rect">Notification Events</a><br clear="none"/>
        4.4.1 <a href="#evt-activate" shape="rect">The DOMActivate Event</a><br clear="none"/>
        4.4.2 <a href="#evt-valueChanged" shape="rect">The xforms-value-changed Event</a><br clear="none"/>
        4.4.3 <a href="#evt-select" shape="rect">The xforms-select and xforms-deselect Events</a><br clear="none"/>
        4.4.4 <a href="#evt-scroll" shape="rect">The xforms-scroll-first and xforms-scroll-last
Events</a><br clear="none"/>
        4.4.5 <a href="#evt-insert" shape="rect">The xforms-insert and xforms-delete Events</a><br clear="none"/>
        4.4.6 <a href="#evt-valid" shape="rect">The xforms-valid Event</a><br clear="none"/>
        4.4.7 <a href="#evt-invalid" shape="rect">The xforms-invalid Event</a><br clear="none"/>
        4.4.8 <a href="#evt-DOMFocusIn" shape="rect">The DOMFocusIn Event</a><br clear="none"/>
        4.4.9 <a href="#evt-DOMFocusOut" shape="rect">The DOMFocusOut Event</a><br clear="none"/>
        4.4.10 <a href="#evt-readonly" shape="rect">The xforms-readonly Event</a><br clear="none"/>
        4.4.11 <a href="#evt-readwrite" shape="rect">The xforms-readwrite Event</a><br clear="none"/>
        4.4.12 <a href="#evt-required" shape="rect">The xforms-required Event</a><br clear="none"/>
        4.4.13 <a href="#evt-optional" shape="rect">The xforms-optional Event</a><br clear="none"/>
        4.4.14 <a href="#evt-enabled" shape="rect">The xforms-enabled Event</a><br clear="none"/>
        4.4.15 <a href="#evt-disabled" shape="rect">The xforms-disabled Event</a><br clear="none"/>
        4.4.16 <a href="#evt-in-range" shape="rect">The xforms-in-range Event</a><br clear="none"/>
        4.4.17 <a href="#evt-out-of-range" shape="rect">The xforms-out-of-range Event</a><br clear="none"/>
        4.4.18 <a href="#evt-submitdone" shape="rect">The xforms-submit-done Event</a><br clear="none"/>
        4.4.19 <a href="#evt-submitError" shape="rect">The xforms-submit-error Event</a><br clear="none"/>
    4.5 <a href="#rpm-errors" shape="rect">Error Indications</a><br clear="none"/>
        4.5.1 <a href="#evt-bindingException" shape="rect">The xforms-binding-exception Event</a><br clear="none"/>
        4.5.2 <a href="#evt-linkException" shape="rect">The xforms-link-exception Event</a><br clear="none"/>
        4.5.3 <a href="#evt-linkError" shape="rect">The xforms-link-error Event</a><br clear="none"/>
        4.5.4 <a href="#evt-computeException" shape="rect">The xforms-compute-exception Event</a><br clear="none"/>
    4.6 <a href="#rpm-event-sequences" shape="rect">Event
Sequencing</a><br clear="none"/>
        4.6.1 <a href="#sequence-for-input" shape="rect">For input, secret, textarea, range, or upload
Controls</a><br clear="none"/>
        4.6.2 <a href="#sequence-for-output" shape="rect">For output Controls</a><br clear="none"/>
        4.6.3 <a href="#sequence-for-select" shape="rect">For select or select1 Controls</a><br clear="none"/>
        4.6.4 <a href="#sequence-for-trigger" shape="rect">For trigger Controls</a><br clear="none"/>
        4.6.5 <a href="#sequence-for-submit" shape="rect">For submit Controls</a><br clear="none"/>
        4.6.6 <a href="#rpm-event-seq-swvc" shape="rect">Sequence: Selection Without Value Change</a><br clear="none"/>
        4.6.7 <a href="#rpm-event-seq-vcwfc" shape="rect">Sequence: Value Change with Focus Change</a><br clear="none"/>
        4.6.8 <a href="#rpm-event-seq-aat" shape="rect">Sequence: Activating a Trigger</a><br clear="none"/>
        4.6.9 <a href="#rpm-event-seq-s" shape="rect">Sequence: Submission</a><br clear="none"/>
5 <a href="#datatypes" shape="rect">Datatypes</a><br clear="none"/>
    5.1 <a href="#datatypes-schema" shape="rect">XML Schema Built-in
Datatypes</a><br clear="none"/>
    5.2 <a href="#datatypes-xforms" shape="rect">XForms
Datatypes</a><br clear="none"/>
        5.2.1 <a href="#dt-listItem" shape="rect">xforms:listItem</a><br clear="none"/>
        5.2.2 <a href="#dt-listItems" shape="rect">xforms:listItems</a><br clear="none"/>
        5.2.3 <a href="#dt-dayTimeDuration" shape="rect">xforms:dayTimeDuration</a><br clear="none"/>
        5.2.4 <a href="#dt-yearMonthDuration" shape="rect">xforms:yearMonthDuration</a><br clear="none"/>
6 <a href="#model" shape="rect">Model Item Properties</a><br clear="none"/>
    6.1 <a href="#model-xformsconstraints" shape="rect">Model Item
Property Definitions</a><br clear="none"/>
        6.1.1 <a href="#model-prop-type" shape="rect">The type Property</a><br clear="none"/>
        6.1.2 <a href="#model-prop-readOnly" shape="rect">The readonly Property</a><br clear="none"/>
        6.1.3 <a href="#model-prop-required" shape="rect">The required Property</a><br clear="none"/>
        6.1.4 <a href="#model-prop-relevant" shape="rect">The relevant Property</a><br clear="none"/>
        6.1.5 <a href="#model-prop-calculate" shape="rect">The calculate Property</a><br clear="none"/>
        6.1.6 <a href="#model-prop-validate" shape="rect">The constraint Property</a><br clear="none"/>
        6.1.7 <a href="#model-prop-p3ptype" shape="rect">The p3ptype Property</a><br clear="none"/>
    6.2 <a href="#model-using" shape="rect">Schema Constraints</a><br clear="none"/>
        6.2.1 <a href="#model-using-atomic" shape="rect">Atomic Datatype</a><br clear="none"/>
7 <a href="#expr" shape="rect">XPath Expressions in XForms</a><br clear="none"/>
    7.1 <a href="#expr-datatypes" shape="rect">XPath Datatypes</a><br clear="none"/>
    7.2 <a href="#expr-hasfeature" shape="rect">Feature string for the
hasFeature method call</a><br clear="none"/>
    7.3 <a href="#expr-instance" shape="rect">Instance Data</a><br clear="none"/>
        7.3.1 <a href="#idl-getInstanceDocument" shape="rect">The getInstanceDocument() Method</a><br clear="none"/>
        7.3.2 <a href="#idl-rebuild" shape="rect">The rebuild() Method</a><br clear="none"/>
        7.3.3 <a href="#idl-recalculate" shape="rect">The recalculate() Method</a><br clear="none"/>
        7.3.4 <a href="#idl-revalidate" shape="rect">The revalidate() Method</a><br clear="none"/>
        7.3.5 <a href="#idl-refresh" shape="rect">The refresh() Method</a><br clear="none"/>
    7.4 <a href="#expr-eval" shape="rect">Evaluation Context</a><br clear="none"/>
    7.5 <a href="#expr-binding-expression" shape="rect">Binding
Expressions</a><br clear="none"/>
        7.5.1 <a href="#expr-dynamic-dependency" shape="rect">Dynamic Dependencies</a><br clear="none"/>
        7.5.2 <a href="#expr-model-binding-expression" shape="rect">Model Binding Expressions</a><br clear="none"/>
        7.5.3 <a href="#expr-ui-binding-expression" shape="rect">UI Binding Expressions</a><br clear="none"/>
        7.5.4 <a href="#ui-binding-foreign" shape="rect">UI Binding in other XML vocabularies</a><br clear="none"/>
        7.5.5 <a href="#ui-binding-examples" shape="rect">Binding Examples</a><br clear="none"/>
    7.6 <a href="#expr-lib" shape="rect">XForms Core Function
Library</a><br clear="none"/>
    7.7 <a href="#expr-lib-bool" shape="rect">Boolean Functions</a><br clear="none"/>
        7.7.1 <a href="#fn-boolean-from-string" shape="rect">The boolean-from-string() Function</a><br clear="none"/>
        7.7.2 <a href="#fn-if" shape="rect">The
if() Function</a><br clear="none"/>
    7.8 <a href="#expr-lib-num" shape="rect">Number Functions</a><br clear="none"/>
        7.8.1 <a href="#fn-avg" shape="rect">The
avg() Function</a><br clear="none"/>
        7.8.2 <a href="#fn-min" shape="rect">The
min() Function</a><br clear="none"/>
        7.8.3 <a href="#fn-max" shape="rect">The
max() Function</a><br clear="none"/>
        7.8.4 <a href="#fn-count-non-empty" shape="rect">The count-non-empty() Function</a><br clear="none"/>
        7.8.5 <a href="#fn-index" shape="rect">The
index() Function</a><br clear="none"/>
    7.9 <a href="#expr-lib-string" shape="rect">String
Functions</a><br clear="none"/>
        7.9.1 <a href="#fn-property" shape="rect">The property() Function</a><br clear="none"/>
    7.10 <a href="#expr-lib-date" shape="rect">Date and Time
Functions</a><br clear="none"/>
        7.10.1 <a href="#fn-now" shape="rect">The
now() Function</a><br clear="none"/>
        7.10.2 <a href="#fn-get-duration-from-date" shape="rect">The days-from-date() Function</a><br clear="none"/>
        7.10.3 <a href="#fn-get-duration-from-dateTime" shape="rect">The seconds-from-dateTime()
Function</a><br clear="none"/>
        7.10.4 <a href="#fn-get-seconds-from-duration" shape="rect">The seconds() Function</a><br clear="none"/>
        7.10.5 <a href="#fn-get-months-from-duration" shape="rect">The months() Function</a><br clear="none"/>
    7.11 <a href="#expr-lib-nodset" shape="rect">Node-set
Functions</a><br clear="none"/>
        7.11.1 <a href="#fn-instance" shape="rect">The instance() Function</a><br clear="none"/>
    7.12 <a href="#expr-extension" shape="rect">Extension
Functions</a><br clear="none"/>
8 <a href="#controls" shape="rect">Form Controls</a><br clear="none"/>
    8.1 <a href="#id2647690" shape="rect">The XForms Form Controls
Module</a><br clear="none"/>
        8.1.1 <a href="#ui-processing" shape="rect">Implementation Requirements Common to All Form
Controls</a><br clear="none"/>
        8.1.2 <a href="#ui-input" shape="rect">The
input Element</a><br clear="none"/>
        8.1.3 <a href="#ui-secret" shape="rect">The secret Element</a><br clear="none"/>
        8.1.4 <a href="#ui-textarea" shape="rect">The textarea Element</a><br clear="none"/>
        8.1.5 <a href="#ui-output" shape="rect">The output Element</a><br clear="none"/>
        8.1.6 <a href="#ui-upload" shape="rect">The upload Element</a><br clear="none"/>
        8.1.7 <a href="#ui-range" shape="rect">The
range Element</a><br clear="none"/>
        8.1.8 <a href="#ui-button" shape="rect">The trigger Element</a><br clear="none"/>
        8.1.9 <a href="#ui-submit" shape="rect">The submit Element</a><br clear="none"/>
        8.1.10 <a href="#ui-selectMany" shape="rect">The select Element</a><br clear="none"/>
        8.1.11 <a href="#ui-selectOne" shape="rect">The select1 Element</a><br clear="none"/>
    8.2 <a href="#ui-commonelem" shape="rect">Common Markup for
Selection Controls</a><br clear="none"/>
        8.2.1 <a href="#ui-common-elements-choices" shape="rect">The choices Element</a><br clear="none"/>
        8.2.2 <a href="#ui-common-elements-item" shape="rect">The item Element</a><br clear="none"/>
        8.2.3 <a href="#ui-common-choices-value" shape="rect">The value Element</a><br clear="none"/>
    8.3 <a href="#ui-commonelems" shape="rect">Additional
Elements</a><br clear="none"/>
        8.3.1 <a href="#ui-commonelems-filename" shape="rect">The filename Element</a><br clear="none"/>
        8.3.2 <a href="#ui-commonelems-mediatype" shape="rect">The mediatype Element</a><br clear="none"/>
        8.3.3 <a href="#ui-commonelems-label" shape="rect">The label Element</a><br clear="none"/>
        8.3.4 <a href="#ui-commonelems-help" shape="rect">The help Element</a><br clear="none"/>
        8.3.5 <a href="#ui-commonelems-hint" shape="rect">The hint Element</a><br clear="none"/>
        8.3.6 <a href="#ui-common-elements-alert" shape="rect">The alert Element</a><br clear="none"/>
9 <a href="#ui" shape="rect">XForms User Interface</a><br clear="none"/>
    9.1 <a href="#id2658879" shape="rect">The XForms Group
Module</a><br clear="none"/>
        9.1.1 <a href="#ui-group" shape="rect">The
group Element</a><br clear="none"/>
    9.2 <a href="#id2659334" shape="rect">The XForms Switch
Module</a><br clear="none"/>
        9.2.1 <a href="#ui-conditional" shape="rect">The switch Element</a><br clear="none"/>
        9.2.2 <a href="#ui-case" shape="rect">The
case Element</a><br clear="none"/>
        9.2.3 <a href="#action-toggle" shape="rect">The toggle Element</a><br clear="none"/>
    9.3 <a href="#id2659912" shape="rect">The XForms Repeat
Module</a><br clear="none"/>
        9.3.1 <a href="#ui-repeat" shape="rect">The repeat Element</a><br clear="none"/>
        9.3.2 <a href="#ui.repeat.via.attrs" shape="rect">Creating Repeating Structures Via
Attributes</a><br clear="none"/>
        9.3.3 <a href="#ui-common-elements-itemset" shape="rect">The itemset Element</a><br clear="none"/>
        9.3.4 <a href="#ui-adv-copy" shape="rect">The copy Element</a><br clear="none"/>
        9.3.5 <a href="#action-insert" shape="rect">The insert Element</a><br clear="none"/>
        9.3.6 <a href="#action-delete" shape="rect">The delete Element</a><br clear="none"/>
        9.3.7 <a href="#action-setRepeatCursor" shape="rect">The setindex Element</a><br clear="none"/>
        9.3.8 <a href="#ui-repeat-processing" shape="rect">Repeat Processing</a><br clear="none"/>
        9.3.9 <a href="#ui-nested-repeats" shape="rect">Nested Repeats</a><br clear="none"/>
        9.3.10 <a href="#ui-repeat-ui" shape="rect">User Interface Interaction</a><br clear="none"/>
10 <a href="#action" shape="rect">XForms Actions</a><br clear="none"/>
    10.1 <a href="#id2665418" shape="rect">The XForms Action
Module</a><br clear="none"/>
        10.1.1 <a href="#action-action" shape="rect">The action Element</a><br clear="none"/>
        10.1.2 <a href="#action-dispatch" shape="rect">The dispatch Element</a><br clear="none"/>
        10.1.3 <a href="#action-rebuild" shape="rect">The rebuild Element</a><br clear="none"/>
        10.1.4 <a href="#action-recalculate" shape="rect">The recalculate Element</a><br clear="none"/>
        10.1.5 <a href="#action-revalidate" shape="rect">The revalidate Element</a><br clear="none"/>
        10.1.6 <a href="#action-refresh" shape="rect">The refresh Element</a><br clear="none"/>
        10.1.7 <a href="#action-setfocus" shape="rect">The setfocus Element</a><br clear="none"/>
        10.1.8 <a href="#action-load" shape="rect">The load Element</a><br clear="none"/>
        10.1.9 <a href="#action-setvalue" shape="rect">The setvalue Element</a><br clear="none"/>
        10.1.10 <a href="#action-submit" shape="rect">The send Element</a><br clear="none"/>
        10.1.11 <a href="#action-reset" shape="rect">The reset Element</a><br clear="none"/>
        10.1.12 <a href="#action-info" shape="rect">The message Element</a><br clear="none"/>
        10.1.13 <a href="#action-repeat" shape="rect">Actions insert, delete and setindex</a><br clear="none"/>
11 <a href="#submit" shape="rect">Submit</a><br clear="none"/>
    11.1 <a href="#submit-event" shape="rect">The xforms-submit
Event</a><br clear="none"/>
    11.2 <a href="#submit-options" shape="rect">Submission
Options</a><br clear="none"/>
    11.3 <a href="#serialize-xml" shape="rect">Serialization as
application/xml</a><br clear="none"/>
    11.4 <a href="#serialize-multipart" shape="rect">Serialization as
multipart/related</a><br clear="none"/>
    11.5 <a href="#serialize-form-data" shape="rect">Serialization as
multipart/form-data</a><br clear="none"/>
    11.6 <a href="#serialize-urlencode" shape="rect">Serialization as
application/x-www-form-urlencoded</a><br clear="none"/>
    11.7 <a href="#send-post" shape="rect">The post, multipart-post,
form-data-post, and urlencoded-post Submit Methods</a><br clear="none"/>
    11.8 <a href="#send-put" shape="rect">The put Submit Method</a><br clear="none"/>
    11.9 <a href="#send-get" shape="rect">The get Submit Method</a><br clear="none"/>
12 <a href="#conform" shape="rect">Conformance</a><br clear="none"/>
    12.1 <a href="#conform-levels" shape="rect">Conformance
Levels</a><br clear="none"/>
        12.1.1 <a href="#conform-levels-full" shape="rect">XForms Full</a><br clear="none"/>
    12.2 <a href="#conform-desc" shape="rect">Conformance
Description</a><br clear="none"/>
        12.2.1 <a href="#conform-desc-processors" shape="rect">Conforming XForms Processors</a><br clear="none"/>
        12.2.2 <a href="#conform-desc-documents" shape="rect">Conforming XForms Documents</a><br clear="none"/>
        12.2.3 <a href="#conform-desc-generators" shape="rect">Conforming XForms Generators</a><br clear="none"/>
13 <a href="#terms" shape="rect">Glossary Of Terms</a><br clear="none"/>
</p>

<h3><a name="mainsection" id="mainsection" shape="rect"/>Appendices</h3>

<p class="toc">A <a href="#schema" shape="rect">Schema for XForms</a><br clear="none"/>
    A.1 <a href="#schema-events" shape="rect">Schema for XML
Events</a><br clear="none"/>
B <a href="#references" shape="rect">References</a><br clear="none"/>
    B.1 <a href="#references-norm" shape="rect">Normative
References</a><br clear="none"/>
    B.2 <a href="#references-inform" shape="rect">Informative
References</a><br clear="none"/>
C <a href="#privsec" shape="rect">Privacy Considerations</a><br clear="none"/>
    C.1 <a href="#id2677149" shape="rect">Using P3P with XForms</a><br clear="none"/>
D <a href="#recalc" shape="rect">Recalculation Sequence Algorithm</a><br clear="none"/>
    D.1 <a href="#rpm-processing-recalc-mddg" shape="rect">Details on
Creating the Master Dependency Directed Graph</a><br clear="none"/>
    D.2 <a href="#rpm-processing-recalc-pds" shape="rect">Details on
Creating the Pertinent Dependency Subgraph</a><br clear="none"/>
    D.3 <a href="#rpm-processing-recalc-compute" shape="rect">Details
on Computing Individual Vertices</a><br clear="none"/>
    D.4 <a href="#rpm-processing-recalc-example" shape="rect">Example
of Calculation Processing</a><br clear="none"/>
E <a href="#mode" shape="rect">Input Modes</a><br clear="none"/>
    E.1 <a href="#mode-syntax" shape="rect">inputmode Attribute Value
Syntax</a><br clear="none"/>
    E.2 <a href="#mode-ua-behavior" shape="rect">User Agent
Behavior</a><br clear="none"/>
    E.3 <a href="#mode-values" shape="rect">List of Tokens</a><br clear="none"/>
        E.3.1 <a href="#mode-scripts" shape="rect">Script Tokens</a><br clear="none"/>
        E.3.2 <a href="#mode-modifiers" shape="rect">Modifier Tokens</a><br clear="none"/>
    E.4 <a href="#mode-patterns" shape="rect">Relationship to XML
Schema pattern facets</a><br clear="none"/>
    E.5 <a href="#mode-examples" shape="rect">Examples</a><br clear="none"/>
F <a href="#style" shape="rect">XForms and Styling</a> (Non-Normative)<br clear="none"/>
    F.1 <a href="#id2686575" shape="rect">Pseudo-classes</a><br clear="none"/>
    F.2 <a href="#id2687014" shape="rect">Pseudo-elements</a><br clear="none"/>
    F.3 <a href="#id2687225" shape="rect">Examples</a><br clear="none"/>
G <a href="#xforms-examples" shape="rect">Complete XForms Examples</a> (Non-Normative)<br clear="none"/>
    G.1 <a href="#xforms-in-xhtml-00" shape="rect">XForms in
XHTML</a><br clear="none"/>
    G.2 <a href="#bookmarks-in-x-smiles" shape="rect">Editing
Hierarchical Bookmarks Using XForms</a><br clear="none"/>
    G.3 <a href="#id2687947" shape="rect">Survey Using XForms and
SVG</a><br clear="none"/>
H <a href="#id2687671" shape="rect">Changelog</a> (Non-Normative)<br clear="none"/>
I <a href="#acks" shape="rect">Acknowledgments</a> (Non-Normative)<br clear="none"/>
J <a href="#prod-notes" shape="rect">Production Notes</a> (Non-Normative)<br clear="none"/>
</p>
</div>
<hr/>

<div class="body">

<div class="div1">
<h2><a name="intro" id="intro" shape="rect"/>1 About the XForms 1.0 Specification</h2>

<div class="div2">
<h3><a name="intro-background" id="intro-background" shape="rect"/>1.1 Background</h3>

<p>Forms are an important part of the Web, and they continue to be the
primary means for enabling interactive Web applications. Web applications and
electronic commerce solutions have sparked the demand for better Web forms
with richer interactions. XForms 1.0 is the response to this demand, and
provides a new platform-independent markup language for online interaction
between a person (through an <a title="XForms Processor" href="#def-XForms-Processor" shape="rect">XForms Processor</a>) and another, usually
remote, agent. XForms are the successor to HTML forms, and benefit from the
lessons learned from HTML forms.</p>

<p>Further background information on XForms can be found at <a href="http://www.w3.org/MarkUp/Forms/" shape="rect">http://www.w3.org/MarkUp/Forms</a>.</p>
</div>

<div class="div2">
<h3><a name="intro-reading" id="intro-reading" shape="rect"/>1.2 Reading the
Specification</h3>

<p>This specification has been written with various types of readers in
mind—in particular XForms authors and XForms implementors. We hope the
specification will provide authors with the tools they need to write
efficient, attractive and accessible documents without overexposing them to
the XForms implementation details. Implementors, however, should find all
they need to build conforming XForms Processors. The specification begins
with a general presentation of XForms before specifying the technical details
of the various XForms components.</p>

<p>The specification has been written with various modes of presentation in
mind. In case of a discrepancy, the online electronic version is considered
the authoritative version of the document.</p>

<p>This document uses the terms <b>may</b>, <b>must</b>, and <b>should</b> in
accord with <a href="#ref-rfc-2119" shape="rect">[RFC 2119]</a>.</p>
</div>

<div class="div2">
<h3><a name="intro-org" id="intro-org" shape="rect"/>1.3 How the Specification is
Organized</h3>

<p>The specification is organized into the following chapters:</p>
<dl>
  <dt class="label">Chapters 1 and 2</dt>
    <dd><p>An introduction to XForms. The introduction outlines the design
      principles and includes a brief tutorial on XForms.</p>
    </dd>
  <dt class="label">Chapters 3 and up</dt>
    <dd><p>XForms reference manual. The bulk of the reference manual consists
      of the specification of XForms. This reference defines XForms and how
      XForms Processors must interpret the various components in order to
      claim conformance.</p>
    </dd>
  <dt class="label">Appendixes</dt>
    <dd><p>Appendixes contain a normative description of XForms described in
      XML Schema, information on references, and other useful information.</p>
    </dd>
</dl>
</div>

<div class="div2">
<h3><a name="intro-conventions" id="intro-conventions" shape="rect"/>1.4 Documentation
Conventions</h3>

<p>Throughout this document, the following namespace prefixes and
corresponding namespace identifiers are used:</p>

<blockquote>
  <p><b>xforms:</b> The XForms namespace (http://www.w3.org/2002/xforms) <a href="#structure-namespace" shape="rect"><b>3.1 The XForms Namespace</b></a><br clear="none"/>
  <b>html:</b> The XHTML namespace (http://www.w3.org/1999/xhtml) <a href="#ref-xhtml-1.0" shape="rect">[XHTML 1.0]</a><br clear="none"/>
  <b>xsd:</b> The XML Schema namespace (http://www.w3.org/2001/XMLSchema)<a href="#ref-xschema-1" shape="rect">[XML Schema part 1]</a><br clear="none"/>
  <b>xsi:</b> The XML Schema for instances namespace
  (http://www.w3.org/2001/XMLSchema-instance)<a href="#ref-xschema-1" shape="rect">[XML
  Schema part 1]</a><br clear="none"/>
  <b>ev:</b> The XML Events namespace (http://www.w3.org/2001/xml-events)<a href="#ref-xml-events" shape="rect">[XML Events]</a><br clear="none"/>
  <b>my:</b> Any user defined namespace</p>
</blockquote>

<p>This is only a convention; any namespace prefix may be used in
practice.</p>

<p>The following typographical conventions are used to present technical
material in this document.</p>

<p>Official terms are defined in the following manner: [<a name="def-term" id="def-term" title="term" shape="rect">Definition</a>: You can find most <b>terms</b> in
chapter <a href="#terms" shape="rect"><b>13 Glossary Of Terms</b></a>]. Links to
<b>term</b>s may be specially highlighted where necessary.</p>

<p>The XML representations of various elements within XForms are presented
using the syntax for Abstract Modules in XHTML Modularization <a href="#ref-xhtml-mod" shape="rect">[XHTML Modularization]</a>.</p>

<p>Examples are set off typographically:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Example item</div>

<div class="exampleInner">
<pre xml:space="preserve">Example Item</pre>
</div>
</div>

<p>References to external documents appear as follows: <a href="#ref-example" shape="rect">[Sample Reference]</a> with links to the references
section of this document.</p>
<dl>
  <dt class="label"><a name="ref-example" id="ref-example" shape="rect"/>Sample
  Reference</dt>
    <dd><cite>Reference</cite> - linked to from above.</dd>
</dl>

<p>The following typesetting convention is used for non-normative
commentary:</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>A gentle explanation or admonition to readers.</p>
</div>
</div>
</div>

<div class="div1">
<h2><a name="concepts" id="concepts" shape="rect"/>2 Introduction to XForms</h2>

<p>XForms has been designed on the basis of several years' experience with
HTML forms. HTML Forms have formed the backbone of the e-commerce revolution,
and having shown their worth, have also indicated numerous ways they could be
improved.</p>

<p>The primary difference when comparing XForms with HTML Forms, apart from
XForms being in XML, is the separation of the data being collected from the
markup of the controls collecting the individual values. By doing this, it
not only makes XForms more tractable by making it clear what is being
submitted where, it also eases reuse of forms, since the underlying essential
part of a Form is no longer irretrievably bound to the page it is used in.</p>

<p>A second major difference is that XForms, while designed to be integrated
into XHTML, is no longer restricted only to be a part of that language, but
may be integrated into any suitable markup language.</p>

<p>XForms has striven to improve authoring, reuse, internationalization,
accessibility, usability, and device independence. Here is a summary of the
primary benefits of using XForms:</p>
<dl>
  <dt class="label">Strong typing</dt>
    <dd><p>Submitted data is strongly typed and can be checked using
      off-the-shelf tools. This speeds up form filling since it reduces the
      need for round trips to the server for validation.</p>
    </dd>
  <dt class="label">XML submission</dt>
    <dd><p>This obviates the need for custom server-side logic to marshal the
      submitted data to the application back-end. The received XML instance
      document can be directly validated and processed by the application
      back-end.</p>
    </dd>
  <dt class="label">Existing schema re-use</dt>
    <dd><p>This obviates duplication, and ensures that updating the
      validation rules as a result of a change in the underlying business
      logic does not require re-authoring validation constraints within the
      XForms application.</p>
    </dd>
  <dt class="label">External schema augmentation</dt>
    <dd><p>This enables the XForms author to go beyond the basic set of
      constraints available from the back-end. Providing such additional
      constraints as part of the XForms Model enhances the overall usability
      of the resulting Web application.</p>
    </dd>
  <dt class="label">Internationalization</dt>
    <dd><p>Using XML 1.0 for instance data ensures that the submitted data is
      internationalization ready.</p>
    </dd>
  <dt class="label">Enhanced accessibility</dt>
    <dd><p>XForms separates content and presentation. User interface controls
      encapsulate all relevant metadata such as labels, thereby enhancing
      accessibility of the application when using different modalities.
      XForms user interface controls are generic and suited for
      device-independence.</p>
    </dd>
  <dt class="label">Multiple device support</dt>
    <dd><p>The high-level nature of the user interface controls, and the
      consequent intent-based authoring of the user interface makes it
      possible to re-target the user interaction to different devices.</p>
    </dd>
  <dt class="label">Less use of scripting</dt>
    <dd><p>By defining XML-based declarative event handlers that cover common
      use cases, the majority of XForms documents can be statically analyzed,
      reducing the need for imperative scripts for event handlers.</p>
    </dd>
</dl>

<div class="div2">
<h3><a name="concepts-xhtml" id="concepts-xhtml" shape="rect"/>2.1 An Example</h3>

<p>In the XForms approach, forms are comprised of a section that describes
what the form does, called the <a title="XForms Model" href="#def-XForms-Model" shape="rect">XForms Model</a>, and another section that describes
how the form is to be presented.</p>

<p>Consider a simple electronic commerce form that might be rendered as
follows:</p>
<img src="images/concepts-xhtml.png" alt="screen shot of a graphic rendering"/>

<p>It is clear that we are collecting a value that represents whether cash or
credit card is being used, and if a credit card, its number and expiration
date.</p>

<p>This can be represented in the XForms <code>model</code> element, which in
XHTML would typically be contained within the <code>head</code> section:</p>

<div class="exampleOuter">

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:model&gt;
  &lt;xforms:instance&gt;
    &lt;ecommerce xmlns=""&gt;
      &lt;method/&gt;
      &lt;number/&gt;
      &lt;expiry/&gt;
    &lt;/ecommerce&gt;
  &lt;/xforms:instance&gt;
  &lt;xforms:submission action="http://example.com/submit" method="post" id="submit" includenamespaceprefixes=""/&gt;
&lt;/xforms:model&gt;</pre>
</div>
</div>

<p>This simply says that we are collecting three pieces of information (note
that we have as yet not said anything about their types), and that they will
be submitted using the URL in the <code>action</code> attribute.</p>

<p>XForms 1.0 defines a device-neutral, platform-independent set of <a title="form control" href="#def-form-control" shape="rect">form controls</a> suitable for
general-purpose use. The controls are <em>bound</em> to the XForms Model via
the XForms binding mechanism, in this simple case using the <code>ref</code>
attribute on the controls. In XHTML, this markup would typically appear
within the <code>body</code> section (note that we have intentionally
defaulted the XForms namespace prefix here):</p>

<div class="exampleOuter">

<div class="exampleInner">
<pre xml:space="preserve">&lt;select1 ref="method"&gt;
  &lt;label&gt;Select Payment Method:&lt;/label&gt;
  &lt;item&gt;
    &lt;label&gt;Cash&lt;/label&gt;
    &lt;value&gt;cash&lt;/value&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;label&gt;Credit&lt;/label&gt;
    &lt;value&gt;cc&lt;/value&gt;
  &lt;/item&gt;
&lt;/select1&gt;
&lt;input ref="number"&gt;
  &lt;label&gt;Credit Card Number:&lt;/label&gt;
&lt;/input&gt;
&lt;input ref="expiry"&gt;
  &lt;label&gt;Expiration Date:&lt;/label&gt;
&lt;/input&gt;
&lt;submit submission="submit"&gt;
  &lt;label&gt;Submit&lt;/label&gt;
&lt;/submit&gt;</pre>
</div>
</div>

<p>Notice the following features of this design:</p>
<ul>
  <li><p>The user interface is not hard-coded to use radio buttons. Different
    devices (such as voice browsers) can render the concept of "select one"
    as appropriate.</p>
  </li>
  <li><p>Form controls always have labels directly associated with them as
    child elements—this is a key feature designed to enhance
    accessibility.</p>
  </li>
  <li><p>There is no need for an enclosing <code>form</code> element, as in
    HTML. (See <a href="#concepts-multiple" shape="rect"><b>2.4 Multiple Forms per
    Document</b></a> for details on how to author multiple forms per
    document)</p>
  </li>
  <li><p>Markup for specifying form controls has been simplified in
    comparison with HTML forms.</p>
  </li>
</ul>

<p>The fact that you can bind form controls to the model like this simplifies
integrating XForms into other <a title="host language" href="#def-host-language" shape="rect">host languages</a>, since any form control markup
may be used to bind to the model.</p>
</div>

<div class="div2">
<h3><a name="concepts-xml-instance-data" id="concepts-xml-instance-data" shape="rect"/>2.2 Providing XML Instance Data</h3>

<p>The <a title="XForms Processor" href="#def-XForms-Processor" shape="rect">XForms
Processor</a> can directly submit the data collected as XML. In the example,
the submitted data would look like this:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Submitted Data</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;ecommerce&gt;
  &lt;method&gt;cc&lt;/method&gt;
  &lt;number&gt;1235467789012345&lt;/number&gt;
  &lt;expiry&gt;2001-08&lt;/expiry&gt;
&lt;/ecommerce&gt;</pre>
</div>
</div>

<p>XForms processing keeps track of the state of the partially filled form
through this <a title="instance data" href="#def-instance-data" shape="rect">instance
data</a>. Initial values for the instance data may be provided or left empty
as in the example. Element <code>instance</code> essentially holds a skeleton
XML document that gets updated as the user fills out the form. It gives the
author full control on the structure of the submitted XML data, including
namespace information. When the form is submitted, the instance data is
serialized as an XML document. Here is an alternative version of the earlier
example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Model</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:model&gt;
  &lt;xforms:instance&gt;
    &lt;payment method="cc" xmlns="http://commerce.example.com/payment"&gt;
      &lt;number/&gt;
      &lt;expiry/&gt;
    &lt;/payment&gt;
  &lt;/xforms:instance&gt;
  &lt;xforms:submission action="http://example.com/submit" method="post" includenamespaceprefixes="#default"/&gt;
&lt;/xforms:model&gt;</pre>
</div>
</div>

<p>In this case the submitted data would look like this:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Submitted Data</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;payment method="cc" xmlns="http://commerce.example.com/payment"&gt;
  &lt;number&gt;1235467789012345&lt;/number&gt;
  &lt;expiry&gt;2001-08&lt;/expiry&gt;
&lt;/payment&gt;</pre>
</div>
</div>

<p>This design has features worth calling out:</p>
<ul>
  <li><p>There is complete flexibility in the structure of the XML instance
    data, including the use of attributes. Notice that XML namespaces are
    used, and that a wrapper element of the author's choosing contains the
    instance data.</p>
  </li>
  <li><p>Empty elements <code>number</code> and <code>expiry</code> serve as
    place-holders in the XML structure, and will be filled in with form data
    provided by the user.</p>
  </li>
  <li><p>An initial value (<code>"cc"</code>) for the form control is
    provided through the instance data, in this case an attribute
    <code>method</code>. In the submitted XML, this initial value will be
    replaced by the user input, if the user changes the form control
    displaying that data.</p>
  </li>
</ul>

<p>To connect this instance data with form controls, the <code>ref</code>
attributes on the form controls need to be changed to point to the proper
part of the instance data, using <a title="binding expression" href="#def-binding-expression" shape="rect">binding expressions</a>:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Binding Form Controls to Instance Nodes with <code>ref</code></div>

<div class="exampleInner">
<pre xml:space="preserve">... xmlns:my="http://commerce.example.com/payment"
  ...
  &lt;xforms:select1 ref="@method"&gt;...&lt;/xforms:select1&gt;
  ...
  &lt;xforms:input ref="my:number"&gt;...&lt;/xforms:input&gt;
  ...
  &lt;xforms:input ref="/my:payment/my:expiry"&gt;...&lt;/xforms:input&gt;</pre>
</div>
</div>

<p>Binding expressions are based on XPath <a href="#ref-xpath-1.0" shape="rect">[XPath
1.0]</a>, including the use of the <code>@</code> character to refer to
attributes, as seen here. Note that for illustrative purposes, the first two
expressions make use of the XPath context node, which defaults to the
top-level element (here <code>my:payment</code>). The third expression shows
an absolute path.</p>
</div>

<div class="div2">
<h3><a name="concepts-model" id="concepts-model" shape="rect"/>2.3 Constraining
Values</h3>

<p>XForms allows data to be checked for validity as the form is being filled.
In the absence of specific information about the types of values being
collected, all values are returned as strings, but it is possible to assign
types to values in the instance data. In this example, <code>number</code>
should accept digits only, and should have between 14 and 18 digits and
<code>expiry</code> should accept only valid month/date combinations.</p>

<p>Furthermore, the credit card information form controls for
<code>number</code> and <code>expiry</code> are only relevant if the
<code>"cc"</code> option is chosen for <code>method</code>, but are required
in that case.</p>

<p>By specifying an additional component, <a title="model item property" href="#def-model-item-property" shape="rect">model item properties</a>, authors can
include rich declarative validation information in forms. Such information
can be taken from XML Schemas as well as XForms-specific additions, such as
<code>relevant</code>. Such properties appear on <code>bind</code> elements,
while <a title="Schema constraint" href="#def-Schema-constraint" shape="rect">Schema
constraint</a>s are expressed in an XML Schema fragment, either inline or
external. For example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Declarative Validation with Model Item Properties</div>

<div class="exampleInner">
<pre xml:space="preserve">... xmlns:my="http://commerce.example.com/payment"...
        
  &lt;xforms:model&gt;
    ...
    &lt;xforms:bind nodeset="/my:payment/my:number"
                 relevant="/my:payment/@method = 'cc'"
                 required="true()"
                 type="my:ccnumber"/&gt;
    &lt;xforms:bind nodeset="/my:payment/my:expiry"
                 relevant="/my:payment/@method = 'cc'"
                 required="true()"
                 type="xsd:gYearMonth"/&gt;
    &lt;xsd:schema ...&gt;
      ...
      &lt;xsd:simpleType name="ccnumber"&gt;
        &lt;xsd:restriction base="xsd:string"&gt;
          &lt;xsd:pattern value="\d{14,18}"/&gt;
        &lt;/xsd:restriction&gt;
      &lt;/xsd:simpleType&gt;
      ...
    &lt;/xsd:schema&gt;
  &lt;/xforms:model&gt;</pre>
</div>
</div>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>In the above example, the <code>relevant</code> expression uses absolute
XPath notation (beginning with <code>/</code>) because the evaluation context
nodes for <a title="computed expression" href="#def-computed-expression" shape="rect">computed expression</a>s are determined by
the <code>bind</code> <code>ref</code> <a title="binding expression" href="#def-binding-expression" shape="rect">binding expression</a> (see <a href="#expr-eval" shape="rect"><b>7.4 Evaluation Context</b></a>), and so any relative
node path in the first <code>bind</code> <code>relevant</code> above would be
relative to <code>/my:payment/my:number</code></p>
</div>
</div>

<div class="div2">
<h3><a name="concepts-multiple" id="concepts-multiple" shape="rect"/>2.4 Multiple Forms
per Document</h3>

<p>XForms processing places no limits on the number of individual forms that
can be placed in a single <a title="containing document" href="#def-containing-document" shape="rect">containing document</a>. When a single
document contains multiple forms, each form needs a separate
<code>model</code> element, each with an <code>id</code> attribute so that
they can be referenced from elsewhere in the containing document.</p>

<p>In addition, form controls should specify which <code>model</code> element
contains the instance data to which they bind. This is accomplished through a
<code>model</code> attribute that is part of the binding attributes. If no
<code>model</code> attribute is specified on the binding element, the nearest
ancestor binding element's <code>model</code> attribute is used, and failing
that, the first XForms Model in document order is used. This technique is
called 'scoped resolution', and is used frequently in XForms.</p>

<p>The next example adds an opinion poll to our electronic commerce form.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Adding a <code>poll</code> model</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:model&gt;
  &lt;xforms:instance&gt;
    ...payment instance data...
  &lt;/xforms:instance&gt;
  &lt;xforms:submission action="http://example.com/submit" method="post"/&gt;
&lt;/xforms:model&gt;
        
&lt;xforms:model id="poll"&gt;
  &lt;xforms:instance&gt;
    &lt;helpful/&gt;
  &lt;/xforms:instance&gt;
  &lt;xforms:submission id="pollsubmit" .../&gt;
&lt;/xforms:model&gt;</pre>
</div>
</div>

<p>Additionally, the following markup would appear in the body section of the
document:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Form Controls for <code>poll</code> model</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:select1 ref="/helpful" model="poll"&gt;
  &lt;xforms:label&gt;How useful is this page to you?&lt;/xforms:label&gt;
  &lt;xforms:item&gt;
    &lt;xforms:label&gt;Not at all helpful&lt;/xforms:label&gt;
    &lt;xforms:value&gt;0&lt;/xforms:value&gt;
  &lt;/xforms:item&gt;
  &lt;xforms:item&gt;
    &lt;xforms:label&gt;Barely helpful&lt;/xforms:label&gt;
    &lt;xforms:value&gt;1&lt;/xforms:value&gt;
  &lt;/xforms:item&gt;
  &lt;xforms:item&gt;
    &lt;xforms:label&gt;Somewhat helpful&lt;/xforms:label&gt;
    &lt;xforms:value&gt;2&lt;/xforms:value&gt;
  &lt;/xforms:item&gt;
  &lt;xforms:item&gt;
    &lt;xforms:label&gt;Very helpful&lt;/xforms:label&gt;
    &lt;xforms:value&gt;3&lt;/xforms:value&gt;
  &lt;/xforms:item&gt;
&lt;/xforms:select1&gt;
        
&lt;xforms:submit submission="pollsubmit"&gt;
  &lt;xforms:label&gt;Submit&lt;/xforms:label&gt;
&lt;/xforms:submit&gt;</pre>
</div>
</div>

<p>The main difference here is the use of <code>model="poll"</code>, which
identifies the instance. Note that <code>submit</code> refers to the
<code>submission</code> element by ID and does not require binding
attributes.</p>

<p>More XForms examples can be found in <a href="#xforms-examples" shape="rect"><b>G
Complete XForms Examples</b></a>.</p>
</div>
</div>

<div class="div1">
<h2><a name="structure" id="structure" shape="rect"/>3 Document Structure</h2>

<p>XForms 1.0 is an application of XML <a href="#ref-xml-1.0" shape="rect">[XML 1.0]</a>
and has been designed for use within other XML vocabularies—in
particular within a future version of XHTML <a href="#ref-xhtml-1.0" shape="rect">[XHTML
1.0]</a>. XForms always requires such a <a title="host language" href="#def-host-language" shape="rect">host language</a>. This chapter discusses the
structure of XForms that allow XForms to be used with other document
types.</p>

<div class="div2">
<h3><a name="structure-namespace" id="structure-namespace" shape="rect"/>3.1 The XForms
Namespace</h3>

<p>The XForms namespace has the URI:
<code>http://www.w3.org/2002/xforms</code>.</p>

<p>XForms Processors must use the XML namespaces mechanism <a href="#ref-xml-names" shape="rect">[XML Names]</a> to recognize elements and attributes
from this namespace.</p>
</div>

<div class="div2">
<h3><a name="structure-attrs" id="structure-attrs" shape="rect"/>3.2 XForms Core
Attribute Collections</h3>

<div class="div3">
<h4><a name="structure-attrs-common" id="structure-attrs-common" shape="rect"/>3.2.1
Common Attributes</h4>

<p>The Common Attribute Collection applies to every element in the XForms
namespace.</p>
<dl>
  <dt class="label">anyAttribute</dt>
    <dd><p>Foreign attributes are allowed on all XForms elements.</p>
    </dd>
</dl>

<p>A host language must <span class="diff-chg">permit</span> an attribute of
type <code>xsd:ID</code> on each XForms element.</p>
</div>

<div class="div3">
<h4><a name="structure-attrs-link" id="structure-attrs-link" shape="rect"/>3.2.2
Linking Attributes</h4>

<p>The Linking Attributes Collection applies to XForms elements which include
a link to a remote resource.</p>
<dl>
  <dt class="label">src</dt>
    <dd><p>The <code>src</code> attribute assigns a URI to be automatically
      retrieved.</p>
    </dd>
</dl>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Since linking attribute URIs are defined in terms of the XML Schema
datatype <code>xsd:anyURI</code>, the same internationalization benefits and
white space cautions apply as discussed in <a href="#ref-xschema-2" shape="rect">[XML
Schema part 2]</a>.</p>
</div>

<p>Behavior of relative URIs in links is determined by the <a title="host language" href="#def-host-language" shape="rect">host language</a>, although
<a href="#ref-xml-base" shape="rect">[XML Base]</a> processing is strongly recommended.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>The XForms Working Group is tracking with the HTML Working Group on a
method of describing link structures.</p>
</div>
</div>

<div class="div3">
<h4><a name="structure-attrs-single-node" id="structure-attrs-single-node" shape="rect"/>3.2.3 Single-Node Binding Attributes</h4>

<p id="model-ref">The following attributes define a binding between a form
control or an action and an instance data node defined by an XPath
expression.</p>
<dl>
  <dt class="label">ref</dt>
    <dd><p><a title="binding expression" href="#def-binding-expression" shape="rect">Binding expression</a> interpreted as
      XPath. This attribute has no meaning when a <code>bind</code> attribute
      is present.</p>
    </dd>
  <dt class="label">model</dt>
    <dd><p>XForms Model selector. Specifies the <code>ID</code> of an XForms
      Model to be associated with this binding element. This attribute has no
      meaning for the current binding element when a <code>bind</code>
      attribute is present. Rules for determining the context XForms Model
      are located at <a href="#expr-eval" shape="rect"><b>7.4 Evaluation
      Context</b></a>.</p>
    </dd>
  <dt class="label">bind</dt>
    <dd><p>Reference to a <code>bind</code> element.</p>
    </dd>
</dl>

<p>One of <code>ref</code> or <code>bind</code> is required. When
<code>bind</code> is used, the node is determined by the referenced
<code>bind</code>.</p>

<p>It is an exception (<a href="#evt-bindingException" shape="rect"><b>4.5.1 The
xforms-binding-exception Event</b></a>) if the XForms Processor encounters a
<code>model</code> <code>IDREF</code> value that refers to an <code>ID</code>
not on a <code>model</code> element, or a <code>bind</code>
<code>IDREF</code> value that refers to an <code>ID</code> not on a
<code>bind</code> element.</p>

<p><b>First-node rule</b>: When a Single-Node Binding attribute selects a
node-set of size &gt; 1, the first node in the node-set, based on document
order, is used.</p>
</div>

<div class="div3">
<h4><a name="structure-attrs-nodeset" id="structure-attrs-nodeset" shape="rect"/>3.2.4
Node-Set Binding Attributes</h4>

<p id="model-nodeset">The following attributes define a binding between a
form control or an action and a node-set defined by the XPath expression.</p>
<dl>
  <dt class="label">nodeset</dt>
    <dd><p><a title="binding expression" href="#def-binding-expression" shape="rect">Binding expression</a> interpreted as
      XPath. This attribute has no meaning when a <code>bind</code> attribute
      is present.</p>
    </dd>
  <dt class="label">model</dt>
    <dd><p>XForms Model selector. Specifies the <code>ID</code> of an XForms
      Model to be associated with this binding element. This attribute has no
      meaning for the current binding element when a <code>bind</code>
      attribute is present. Rules for determining the context XForms Model
      are located at <a href="#expr-eval" shape="rect"><b>7.4 Evaluation
      Context</b></a>.</p>
    </dd>
  <dt class="label">bind</dt>
    <dd><p>Reference to a <code>bind</code> element.</p>
    </dd>
</dl>

<p>One of <code>nodeset</code> or <code>bind</code> is required. When
<code>bind</code> is used, the node-set is determined by the referenced
<code>bind</code>.</p>

<p>It is an exception (<a href="#evt-bindingException" shape="rect"><b>4.5.1 The
xforms-binding-exception Event</b></a>) if the XForms Processor encounters a
<code>model</code> IDREF value that refers to an id not on a
<code>model</code> element, or a <code>bind</code> IDREF value that refers to
an <code>id</code> not on a <code>bind</code> element.</p>
</div>

<div class="div3">
<h4><a name="structure-attrs-mip" id="structure-attrs-mip" shape="rect"/>3.2.5 Model
Item Property Attributes</h4>

<p>This collection contains one attribute for each model item property, with
an attribute name exactly matching the name of the model item property, as
defined in <a href="#model-xformsconstraints" shape="rect"><b>6.1 Model Item Property
Definitions</b></a>.</p>
</div>
</div>

<div class="div2">
<h3><a name="structure-abstract" id="structure-abstract" shape="rect"/>3.3 The XForms
Core Module</h3>

<p>The XForms Core Module defines the major structural elements of XForms,
intended for inclusion in a containing document. The elements and attributes
included in this module are:</p>

<table border="1" summary="listing of XForms Core elements, attributes, and content models">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Element</th>
      <th colspan="1" rowspan="1">Attributes</th>
      <th colspan="1" rowspan="1">Minimal Content Model</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#structure-model" shape="rect">model</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, functions (QNameList), schema
        (list of xsd:anyURI)</td>
      <td colspan="1" rowspan="1">(instance|xsd:schema| submission|bind|<a title="" href="#action-xmlevents" shape="rect">Action</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#structure-model-instance" shape="rect">instance</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-link" shape="rect">Linking</a></td>
      <td colspan="1" rowspan="1">(ANY)</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#structure-model-submission" shape="rect">submission</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, ref (<a title="binding expression" href="#def-binding-expression" shape="rect">binding-expression</a>), bind
        (xsd:IDREF), action (xsd:anyURI), method
        ("post"|"get"|"put"|"form-data-post"|"urlencoded-post"|qname-but-not-ncname),
        version (xsd:NMTOKEN), indent (xsd:boolean), mediatype (xsd:string),
        encoding (xsd:string), omit-xml-declaration (xsd:boolean), standalone
        (xsd:boolean), cdata-section-elements (QNameList), replace
        ("all"|"instance"|"none"|qname-but-not-ncname), separator (';' |
        '&amp;'), includenamespaceprefixes (xsd:NMTOKENS)</td>
      <td colspan="1" rowspan="1"><a title="" href="#action-xmlevents" shape="rect">Action</a>*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#structure-bind-element" shape="rect">bind</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-mip" shape="rect">Model Item Properties</a>, nodeset (<a title="model binding expression" href="#def-model-binding-expression" shape="rect">model-binding-expression</a>)</td>
      <td colspan="1" rowspan="1">(bind)*</td>
    </tr>
  </tbody>
</table>

<p>Elements defined in the XForms Actions module, when that module is
included, are also allowed in the content model of <code>model</code> and
<code>submission</code>, as shown above.</p>

<p>Within the containing document, these structural elements are typically
not rendered.</p>

<p>The XForms Processor must ignore any foreign-namespaced attributes that
are unrecognized, and must process unrecognized foreign-namespaced elements
according to the <a href="#module-mustUnderstand" shape="rect"><b>3.4 The XForms
MustUnderstand Module</b></a> rules.</p>

<p>Note that the presence of foreign namespaced elements is subject to the
definition of the containing document profile.</p>

<div class="div3">
<h4><a name="structure-model" id="structure-model" shape="rect"/>3.3.1 The model
Element</h4>

<p>This element represents a form definition and is used as a container for
elements that define the XForms Model. No restriction is placed on how many
<code>model</code> elements may exist within a containing document.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<p>Attributes from XML Events are allowed on this element to facilitate
creating observers. This element is not an XForms Action, and has no
predefined behavior event-based behavior.</p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">functions</dt>
    <dd><p>Optional space-separated list of XPath extension functions
      (represented by QNames) required by this XForms Model. Guidance on the
      use of this attribute is at <a href="#expr-extension" shape="rect"><b>7.12 Extension
      Functions</b></a>.</p>
    </dd>
  <dt class="label">schema</dt>
    <dd><p>Optional list of <code>xsd:anyURI</code> links to XML Schema
      documents outside this <code>model</code> element. The XForms Processor
      must process all Schemas listed in this attribute. Within each XForms
      Model, there is a limit of one Schema per namespace declaration,
      including inline and linked Schemas.</p>

      <div class="note">
      <p class="prefix"><b>Note:</b></p>
      <p>The <code>schema</code> list may include URI fragments referring to
      elements located elsewhere in the containing document; e.g.
      <code>"#myschema"</code>.</p>
      </div>
    </dd>
</dl>

<p>This example shows a simple usage of <code>model</code>, with the XForms
namespace defaulted:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Model</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;model id="Person" schema="MySchema.xsd"&gt;
  &lt;instance src="http://example.com/cgi-bin/get-instance" /&gt;
  ...
&lt;/model&gt;</pre>
</div>
</div>
</div>

<div class="div3">
<h4><a name="structure-model-instance" id="structure-model-instance" shape="rect"/>3.3.2 The instance Element</h4>

<p>This optional element contains or references initial instance data.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">Linking Attributes</dt>
    <dd><p>Optional link to externally defined initial instance data. If the
      link traversal fails, it is treated as an exception (<a href="#evt-linkException" shape="rect"><b>4.5.2 The xforms-link-exception
      Event</b></a>).</p>
    </dd>
</dl>

<p>If both an attribute and inline content are provided, the linked version
takes precedence as described at <a href="#evt-modelConstruct" shape="rect"><b>4.2.1 The
xforms-model-construct Event</b></a>.</p>

<p>If the initial instance data is given by a link, then the instance data is
formed by creating an XPath data model of the linked resource.</p>

<p>If the initial instance data is given by inline content, then instance
data is obtained by first creating a detached copy of the inline content
(including namespaces inherited from the enveloping ancestors), then creating
an XPath data model over the detached copy. The detached copy must consist of
content that would be well-formed XML if it existed in a separate document.
Note that this restricts the element content of <code>instance</code> to a
single child element.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>XForms authors who need additional control over the serialization of
namespace nodes can use the <code>includenamespaceprefixes</code> attribute
on the <code>submission</code> element.</p>
</div>
</div>

<div class="div3">
<h4><a name="structure-model-submission" id="structure-model-submission" shape="rect"/>3.3.3 The submission Element</h4>

<p>This element represents declarative instructions on what to submit, and
how. Details of submit processing are described at <a href="#submit" shape="rect"><b>11
Submit</b></a>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">bind</dt>
    <dd><p>Optional reference to a <code>bind</code> element. When present,
      the binding reference on this attribute is used in preference to any
      binding reference from the <code>ref</code> attribute.</p>
    </dd>
  <dt class="label">ref</dt>
    <dd><p>Optional selector <a title="binding expression" href="#def-binding-expression" shape="rect">binding expression</a> enabling
      submission of a portion of the instance data. The selected node, and
      all descendants, are selected for submission. The default value is
      "/".</p>
    </dd>
  <dt class="label">action</dt>
    <dd><p>Required destination URI for submitting instance data.</p>
    </dd>
  <dt class="label">method</dt>
    <dd><p>Required attribute specifying the protocol to be used to transmit
      the serialized instance data. There is no default value.</p>
    </dd>
  <dt class="label">version</dt>
    <dd><p>Optional attribute specifying the <code>version</code> of XML to
      be serialized.</p>
    </dd>
  <dt class="label">indent</dt>
    <dd><p>Optional attribute specifying whether the serializer should add
      extra white space nodes for readability.</p>
    </dd>
  <dt class="label">mediatype</dt>
    <dd><p>Optional attribute specifying the mediatype for XML instance
      serialization. Authors should ensure that the type specified is
      compatible with <code>application/xml</code>.</p>
    </dd>
  <dt class="label">encoding</dt>
    <dd><p>Optional attribute specifying an encoding for serialization.</p>
    </dd>
  <dt class="label">omit-xml-declaration</dt>
    <dd><p>Optional attribute specifying whether to omit the XML declaration
      on the serialized instance data.</p>
    </dd>
  <dt class="label">standalone</dt>
    <dd><p>Optional attribute specifying whether to include a standalone
      declaration in the serialized XML.</p>
    </dd>
  <dt class="label">cdata-section-elements</dt>
    <dd><p>Optional attribute specifying element names to be serialized with
      CDATAsections.</p>
    </dd>
  <dt class="label">replace</dt>
    <dd><p>Optional attribute specifying how the information returned after
      submit should be applied. In the absence of this attribute, "all" is
      assumed.</p>
    </dd>
  <dt class="label">separator</dt>
    <dd><p>Optional attribute specifying the separator character between
      name/value pairs in urlencoding. The default value is ';'.</p>
    </dd>
  <dt class="label">includenamespaceprefixes</dt>
    <dd><p>Optional attribute providing control over namespace serialization.
      If absent, all namespace nodes present in the instance data are
      considered for serialization. If present, specifies list of namespace
      prefixes to consider for serialization, in addition to those visibly
      utilized. As in <a href="#ref-Exc-C14N" shape="rect">[Exc-C14N]</a>, the special
      value <code>#default</code> specifies the default namespace.</p>
    </dd>
</dl>

<p>The following examples show how various options on element
<code>submission</code> can affect serialization as
<code>application/xml</code>. Given the following XForms fragment:</p>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:model xmlns:xforms="http://www.w3.org/2002/xforms"
              xmlns:my="http://ns.example.org/2003"&gt;
  &lt;xforms:instance&gt;
    &lt;qname xmlns=""&gt;my:sample&lt;/qname&gt;
  &lt;/xforms:instance&gt;
  &lt;xforms:submission method="post" action="..."/&gt;
&lt;/xforms:model&gt;</pre>
</div>

<p>Note that the <code>includenamespaceprefixes</code> attribute is not
present, which causes all namespace nodes to be serialized, resulting in the
following serialized instance data:</p>

<div class="exampleInner">
<pre xml:space="preserve">&lt;qname xmlns:xforms="http://www.w3.org/2002/xforms"
       xmlns:my="http://ns.example.org/2003"&gt;my:sample&lt;/qname&gt;</pre>
</div>

<p>In particular, note that the XForms namespace has been serialized. To
prevent this example from including the unneeded XForms namespace while
maintaining the needed <code>my</code> prefix,
<code>includenamespaceprefixes="my"</code> must be added to the submission
element. When this attribute is present, the author takes responsibility to
list all namespace prefixes not visibly utilized by the submitted instance
data.</p>

<p>The following attributes correspond (in spelling, processing, and default
values) to attributes on the <code>output</code> element of <a href="#ref-xslt" shape="rect">[XSLT 1.0]</a>, with the exception of using
<code>xsd:boolean</code> to replace <code>"yes"|"no"</code>:</p>

<blockquote>
  <p>version<br clear="none"/>
  indent<br clear="none"/>
  encoding<br clear="none"/>
  omit-xml-declaration<br clear="none"/>
  cdata-section-elements</p>
</blockquote>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>The following XSLT attributes have no counterpart in XForms:</p>

<blockquote>
  <p>doctype-system<br clear="none"/>
  doctype-public</p>
</blockquote>
</div>

<p>Elements defined in the XForms Actions module, when that module is
included, are also allowed in the content model of
<code>submission</code>.</p>
</div>

<div class="div3">
<h4><a name="structure-bind-element" id="structure-bind-element" shape="rect"/>3.3.4
The bind Element</h4>

<p>Element <code>bind</code> selects a node-set selected from the <a title="instance data" href="#def-instance-data" shape="rect">instance data</a> with a <a title="model binding expression" href="#def-model-binding-expression" shape="rect">model
binding expression</a> in the <code>nodeset</code> attribute. Other
attributes on element <code>bind</code> encode <a title="model item property" href="#def-model-item-property" shape="rect">model item properties</a> to be applied to
each node in the node-set. When <code>bind</code> has an attribute of type
<code>xsd:ID</code>, the <code>bind</code> then associates that identifier
with the selected node-set.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#structure-attrs-mip" shape="rect">Model Item Properties</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">nodeset</dt>
    <dd><p>A <a title="model binding expression" href="#def-model-binding-expression" shape="rect">model binding expression</a> that
      selects the set of nodes on which this <code>bind</code> operates, as
      defined in <a href="#expr-model-binding-expression" shape="rect"><b>7.5.2 Model
      Binding Expressions</b></a>.</p>
    </dd>
</dl>

<p>When additional nodes are added through action <code>insert</code>, the
newly added nodes are included in any node-sets matched by binding
expressions—see action <code>insert</code> in <a href="#action-insert" shape="rect"><b>9.3.5 The insert Element</b></a>.</p>

<p>See <a href="#expr-eval" shape="rect"><b>7.4 Evaluation Context</b></a> for details on
how binding affects the evaluation context.</p>
</div>
</div>

<div class="div2">
<h3><a name="module-mustUnderstand" id="module-mustUnderstand" shape="rect"/>3.4 The
XForms MustUnderstand Module</h3>

<p>Certain elements, such as <code>extension</code> or foreign namespaced
elements defined in a <a title="host language" href="#def-host-language" shape="rect">host
language</a> might be critical to the operation of a particular form. To
indicate this, the MustUnderstand module defines a single attribute that can
be used on any element.</p>

<table border="1" summary="listing of XForms Core elements, attributes, and content models">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Element</th>
      <th colspan="1" rowspan="1">Attributes</th>
      <th colspan="1" rowspan="1">Minimal Content Model</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><em>ANY</em></td>
      <td colspan="1" rowspan="1">xforms:mustUnderstand (xsd:boolean)</td>
      <td colspan="1" rowspan="1"><em>n/a</em></td>
    </tr>
  </tbody>
</table>

<p>It is a terminating error that must be reported to the user if an element
is marked <code>mustUnderstand="true"</code>, and the XForms Processor does
not have an implementation available for processing the element.</p>
</div>

<div class="div2">
<h3><a name="module-extension" id="module-extension" shape="rect"/>3.5 The XForms
Extension Module</h3>

<p>There are many different ways a <a title="host language" href="#def-host-language" shape="rect">host language</a> might include XForms. One
approach uses only well-formed processing, disregarding validation. Another
case uses strict validation, for example XHTML 1.0, in which only predefined
elements are allowed. Another common approach is to allow unregulated content
in a few selected places. A host language that chooses this option can use
the Extension module.</p>

<table border="1" summary="listing of XForms Core elements, attributes, and content models">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Element</th>
      <th colspan="1" rowspan="1">Attributes</th>
      <th colspan="1" rowspan="1">Minimal Content Model</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#structure-extension" shape="rect">extension</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a></td>
      <td colspan="1" rowspan="1">ANY</td>
    </tr>
  </tbody>
</table>

<div class="div3">
<h4><a name="structure-extension" id="structure-extension" shape="rect"/>3.5.1 The
extension Element</h4>

<p>Optional element <code>extension</code> is a container for
application-specific extension elements from any namespace other than the
XForms namespace. This specification does not define the processing of this
element.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a></p>

<p>For example, RDF metadata could be attached to an individual form control
as follows:</p>

<div class="exampleOuter">

<div class="exampleInner">
<pre xml:space="preserve">&lt;input ref="dataset/user/email" id="email-input"&gt;
  &lt;label&gt;Enter your email address&lt;/label&gt;
  &lt;extension&gt;
    &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;
      &lt;rdf:Description rdf:about="#email-input"&gt;
        &lt;my:addressBook&gt;personal&lt;/my:addressBook&gt;
      &lt;/rdf:Description&gt;
    &lt;/rdf:RDF&gt;
  &lt;/extension&gt;
&lt;/input&gt;</pre>
</div>
</div>
</div>
</div>
</div>

<div class="div1">
<h2><a name="rpm" id="rpm" shape="rect"/>4 Processing Model</h2>

<p>This chapter defines the XForms Processing Model declaratively by
enumerating the various states attained by an XForms Processor and the
possible state transitions that exist in each of these states. The chapter
enumerates the pre-conditions and post-conditions that must be satisfied in
each of these states. XForms Processors may be implemented in any manner, so
long as the end results are identical to that described in this chapter.</p>

<p>State transitions are in general initiated by sending events to parts of
the XForms tree. The XForms Processing Model consists of events in the
following categories:</p>
<ul>
  <li><p>Initialization</p>
  </li>
  <li><p>Interaction</p>
  </li>
  <li><p>Notification</p>
  </li>
  <li><p>Error Conditions</p>
  </li>
</ul>

<div class="div2">
<h3><a name="rpm-events" id="rpm-events" shape="rect"/>4.1 Events Overview</h3>

<p>XForms processing is defined in terms of events, event handlers, and event
responses. XForms uses the events system defined in <a href="#ref-dom2-events" shape="rect">[DOM2 Events]</a><a href="#ref-xml-events" shape="rect">[XML
Events]</a>, with an event capture phase, arrival of the event at its Target,
and finally the event bubbling phase.</p>

<p>Throughout this chapter, each reference to "form control" as a target
element is a shorthand for any of the following elements: <code>input</code>,
<code>secret</code>, <code>textarea</code>, <code>output</code>,
<code>upload</code>, <code>trigger</code>, <code>range</code>,
<code>submit</code>, <code>select</code>, <code>select1</code>, or
<code>group</code>.</p>

<table border="1" frame="box" summary="list of all events, with cancelable, bubbleable, and target node info">
  <thead>
    <tr>
      <th colspan="1" rowspan="1">Event name</th>
      <th colspan="1" rowspan="1">Cancelable?</th>
      <th colspan="1" rowspan="1">Bubbles?</th>
      <th colspan="1" rowspan="1">Target element</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td rowspan="1" colspan="4"><a href="#rpm-init" shape="rect"><b>4.2 Initialization
        Events</b></a></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-model-construct</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-model-construct-done</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-ready</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-model-destruct</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td rowspan="1" colspan="4"><a href="#rpm-interaction" shape="rect"><b>4.3
        Interaction Events</b></a></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-previous</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-next</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-focus</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-help</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-hint</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-rebuild</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-refresh</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-revalidate</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-recalculate</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-reset</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-submit</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>submission</code></td>
    </tr>
    <tr>
      <td rowspan="1" colspan="4"><a href="#evt-notify" shape="rect"><b>4.4 Notification
        Events</b></a></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">DOMActivate</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-value-changed</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-select</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>item</code> or <code>case</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-deselect</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>item</code> or <code>case</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-scroll-first</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>repeat</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-scroll-last</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>repeat</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-insert</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>instance</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-delete</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>instance</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-valid</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-invalid</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">DOMFocusIn</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">DOMFocusOut</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-readonly</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-readwrite</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-required</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-optional</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-enabled</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-disabled</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-in-range</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-out-of-range</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">form control</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-submit-done</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>submission</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-submit-error</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td rowspan="1" colspan="4"><a href="#rpm-errors" shape="rect"><b>4.5 Error
        Indications</b></a></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-binding-exception</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1">any element that can contain a binding
        expression</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-link-exception</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-link-error</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">xforms-compute-exception</td>
      <td colspan="1" rowspan="1">No</td>
      <td colspan="1" rowspan="1">Yes</td>
      <td colspan="1" rowspan="1"><code>model</code></td>
    </tr>
  </tbody>
</table>
</div>

<div class="div2">
<h3><a name="rpm-init" id="rpm-init" shape="rect"/>4.2 Initialization Events</h3>

<p>This section defines the various stages of the <em>initialization</em>
phase. The processor begins initialization by dispatching an event
<code>xforms-model-construct</code> to each XForms Model in the containing
document.</p>

<div class="div3">
<h4><a name="evt-modelConstruct" id="evt-modelConstruct" shape="rect"/>4.2.1 The
xforms-model-construct Event</h4>

<p>Dispatched by the containing document processor to bootstrap XForms
Processor initialization.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following:</p>
<ol type="1">
  <li><p>All XML Schemas loaded. If an error occurs while attempting to
    access or process a remote document, processing halts with an exception
    (<a href="#evt-linkException" shape="rect"><b>4.5.2 The xforms-link-exception
    Event</b></a>).</p>
  </li>
  <li><p>If an external source for the initial instance data is given, an
    XPath data model [<a href="#expr" shape="rect"><b>7 XPath Expressions in
    XForms</b></a>] is constructed from it; otherwise if inline initial
    instance data is given, that is used instead. If the external initial
    instance data is not well-formed XML or cannot be retrieved, processing
    halts with an exception (<a href="#evt-linkException" shape="rect"><b>4.5.2 The
    xforms-link-exception Event</b></a>). If neither are given, the data
    model is not constructed in this phase, but during user interface
    construction (<a href="#evt-modelConstructDone" shape="rect"><b>4.2.2 The
    xforms-model-construct-done Event</b></a>).</p>
  </li>
  <li><p>If applicable, P3P initialized. <a href="#ref-p3p-1.0" shape="rect">[P3P
    1.0]</a></p>
  </li>
  <li><p>Instance data is constructed. All strings inserted into the instance
    data are subject to Unicode normalization. All model item properties are
    initialized by processing all <code>bind</code> elements in document
    order. For each <code>bind</code>:</p>
    <ol type="a">
      <li><p>The attribute <code>nodeset</code> attached to the bind is
        evaluated, resulting in a set of nodes selected.</p>
      </li>
      <li><p>For each node in the node-set, model item properties are applied
        according to the remaining attributes on <code>bind</code>: the
        string value of each attribute (with a name matching one of the
        properties defined in <a href="#model-xformsconstraints" shape="rect"><b>6.1 Model
        Item Property Definitions</b></a>) is copied as the local value of
        the model item property of the same name.</p>
      </li>
      <li><p>If the node already contains a model item property of the same
        name, XForms processing for this containing document halts with an
        exception (<a href="#evt-bindingException" shape="rect"><b>4.5.1 The
        xforms-binding-exception Event</b></a>).</p>
      </li>
    </ol>
  </li>
  <li><p>Perform an <code>xforms-rebuild</code>,
    <code>xforms-recalculate</code>, and <code>xforms-revalidate</code> in
    sequence, for this <code>model</code> element. (The
    <code>xforms-refresh</code> is not performed since the user interface has
    not yet been initialized).</p>
  </li>
</ol>

<p>After all XForms Models have been initialized, an
<code>xforms-model-construct-done</code> event is dispatched to each
<code>model</code> element.</p>
</div>

<div class="div3">
<h4><a name="evt-modelConstructDone" id="evt-modelConstructDone" shape="rect"/>4.2.2
The xforms-model-construct-done Event</h4>

<p>Dispatched after the completion of <code>xforms-model-construct</code>
processing.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event happens once, no matter how many XForms
Models are present in the containing document, and results in the following,
for each form control:</p>

<p>Processing can proceed in one of two different ways depending on whether
an <code>instance</code> in a <code>model</code> exists when the first form
control is processed.</p>

<p>If the <code>instance</code> referenced on the form control existed when
the first form control was processed:</p>
<ol type="1">
  <li><p>The binding expression is evaluated to ensure that it points to a
    node that exists. If this is not the case then the form control should
    behave in the same manner as if it had bound to a model item with the
    <code>relevant</code> model item property resolved to
    <code>false</code>.</p>
  </li>
</ol>

<p>If the <code>instance</code> referenced on the form control did not exist
when the first form control for the same <code>instance</code> was
processed:</p>
<ol type="1">
  <li><p>For the first reference to an <code>instance</code> a default
    <code>instance</code> is created by following the rules described
    below.</p>
    <ol type="a">
      <li><p>A root <code>instanceData</code> element is created.</p>
      </li>
      <li><p>An instance data element node will be created using the binding
        expression from the user interface control as the <code>name</code>.
        If the <code>name</code> is not a valid QName, processing halts with
        an exception (<a href="#evt-bindingException" shape="rect"><b>4.5.1 The
        xforms-binding-exception Event</b></a>).</p>
      </li>
    </ol>
  </li>
  <li><p>For the second and subsequent references to an <code>instance</code>
    which was automatically created the following processing is performed:</p>
    <ol type="a">
      <li><p>If a matching instance data node is found, the user interface
        control will be connected to that element.</p>
      </li>
      <li><p>If a matching instance data node is not found, an instance data
        node will be created using the binding expression from the user
        interface control as the <code>name</code>. If the <code>name</code>
        is not a valid QName, processing halts with an exception (<a href="#evt-bindingException" shape="rect"><b>4.5.1 The xforms-binding-exception
        Event</b></a>).</p>
      </li>
    </ol>
  </li>
</ol>

<p>After all form controls have been initialized, an
<code>xforms-ready</code> event is dispatched to each <code>model</code>
element.</p>
</div>

<div class="div3">
<h4><a name="evt-ready" id="evt-ready" shape="rect"/>4.2.3 The xforms-ready Event</h4>

<p>Dispatched as part of <code>xforms-model-construct-done</code>
processing.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>
</div>

<div class="div3">
<h4><a name="evt-modelDestruct" id="evt-modelDestruct" shape="rect"/>4.2.4 The
xforms-model-destruct Event</h4>

<p>Dispatched by the processor to advise of imminent shutdown of the XForms
Processor, which can occur from user action, or from the <code>load</code>
XForms Action, or as a result of form submission.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: No</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>
</div>
</div>

<div class="div2">
<h3><a name="rpm-interaction" id="rpm-interaction" shape="rect"/>4.3 Interaction
Events</h3>

<div class="div3">
<h4><a name="evt-next" id="evt-next" shape="rect"/>4.3.1 The xforms-next and
xforms-previous Events</h4>

<p>Dispatched in response to: user request to navigate to the next or
previous form control.</p>

<p>Target: form control</p>

<p>Bubbles: No</p>

<p>Cancelable: Yes</p>

<p>Context Info: None</p>

<p>The default action for these events results in the following: Navigation
according to the default navigation order. For example, on a keyboard
interface, "tab" might generate an <code>xforms-next</code> event, while
"shift+tab" might generate an <code>xforms-previous</code> event.</p>

<p>Navigation is determined on a containing document-wide basis. The host
language is responsible for defining overall navigation order. The following
describes a possible technique based on a <code>navindex</code> attribute,
using individual form controls as a navigation unit: The
&lt;<code>group</code>&gt;, &lt;<code>repeat</code>&gt;, and
&lt;<code>switch</code>&gt; structures also serve as navigation units, but
instead of providing a single navigation point, they create a local
navigation context for child form controls (and possibly other
substructures). The navigation sequence is determined as follows:</p>
<ol type="1">
  <li><p>Form controls that have a <code>navindex</code> specified and assign
    a positive value to it are navigated first.</p>
    <ol type="a">
      <li><p>Outermost form controls are navigated in increasing order of the
        <code>navindex</code> value. Values need not be sequential nor must
        they begin with any particular value. Form controls that have
        identical <code>navindex</code> values are to be navigated in
        document order.</p>
      </li>
      <li><p>Ancestor form controls (&lt;<code>group</code>&gt;,
        &lt;<code>repeat</code>&gt;, and &lt;<code>switch</code>&gt;)
        establish a local navigation sequence. All form controls within a
        local sequence are navigated, in increasing order of the
        <code>navindex</code> value, before any outside the local sequence
        are navigated. Form controls that have identical
        <code>navindex</code> values are navigated in document order.</p>
      </li>
    </ol>
  </li>
  <li><p>Those form controls that do not specify <code>navindex</code> or
    supply a value of "0" are navigated next. These form controls are
    navigated in document order.</p>
  </li>
  <li><p>Those form controls that are disabled, hidden, or not
    <code>relevant</code> are assigned a relative order in the overall
    sequence but do not participate as navigable controls.</p>
  </li>
  <li><p>The navigation sequence past the last form control (or before the
    first) is undefined. XForms Processors may cycle back to the first/last
    control, remove focus from the form, or other possibilities.</p>
  </li>
</ol>
</div>

<div class="div3">
<h4><a name="evt-focus" id="evt-focus" shape="rect"/>4.3.2 The xforms-focus Event</h4>

<p>Dispatched in response to: set focus to a form control.</p>

<p>Target: form control</p>

<p>Bubbles: No</p>

<p>Cancelable: Yes</p>

<p>Context Info: None</p>

<p>The default action for these events results in the following:</p>

<p>focus is given to the target form control if the form control is able to
accept focus.</p>
</div>

<div class="div3">
<h4><a name="evt-help" id="evt-help" shape="rect"/>4.3.3 The xforms-help and
xforms-hint Events</h4>

<p>Dispatched in response to: a user request for help or hint information.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: Yes</p>

<p>Context Info: None</p>

<p>The default action for these events results in the following: If the form
control has help/hint elements supplied, these are used to construct a
message that is displayed to the user. Otherwise, user agents may provide
default help or hint messages, but are not required to.</p>
</div>

<div class="div3">
<h4><a name="evt-refresh" id="evt-refresh" shape="rect"/>4.3.4 The xforms-refresh
Event</h4>

<p>Dispatched in response to: a request to update all form controls
associated with a particular XForms Model.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: Yes</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: The user
interface reflects the state of the model, which means that all forms
controls reflect for their corresponding bound instance data:</p>
<ul>
  <li><p>its current value</p>
  </li>
  <li><p>its validity</p>
  </li>
  <li><p>whether it is <code>required</code>, <code>readonly</code> or
    <code>relevant</code>.</p>
  </li>
</ul>
</div>

<div class="div3">
<h4><a name="evt-revalidate" id="evt-revalidate" shape="rect"/>4.3.5 The
xforms-revalidate Event</h4>

<p>Dispatched in response to: a request to revalidate a particular XForms
Model.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: Yes</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following:</p>

<p>The default handling for this event must satisfy the following
conditions:</p>
<ol type="1">
  <li><p>All instance data nodes in all <code>instance</code> elements in the
    <code>model</code> are checked against any specified XML Schema.</p>
  </li>
  <li><p>All instance data nodes in all <code>instance</code> elements in the
    <code>model</code> are checked against any bound model item properties
    which define constraints on the value, i.e. <code>required,
    constraint</code> (<a href="#model" shape="rect"><b>6 Model Item
    Properties</b></a>).</p>
  </li>
  <li><p>The appropriate notification events (<a href="#evt-valid" shape="rect"><b>4.4.6
    The xforms-valid Event</b></a>, <a href="#evt-invalid" shape="rect"><b>4.4.7 The
    xforms-invalid Event</b></a>, <a href="#evt-readonly" shape="rect"><b>4.4.10 The
    xforms-readonly Event</b></a>, <a href="#evt-readwrite" shape="rect"><b>4.4.11 The
    xforms-readwrite Event</b></a>, <a href="#evt-required" shape="rect"><b>4.4.12 The
    xforms-required Event</b></a>, <a href="#evt-optional" shape="rect"><b>4.4.13 The
    xforms-optional Event</b></a>, <a href="#evt-enabled" shape="rect"><b>4.4.14 The
    xforms-enabled Event</b></a>, <a href="#evt-disabled" shape="rect"><b>4.4.15 The
    xforms-disabled Event</b></a>) are dispatched to form controls where the
    matching model item property evaluates to a different value than at the
    start of the processing of this event.</p>
  </li>
</ol>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Prior to the dispatching of the <code>xforms-ready</code> event handler,
there are no form controls bound to instance data, so
<code>xforms-valid</code> and other notification events are not
dispatched.</p>
</div>
</div>

<div class="div3">
<h4><a name="evt-recalculate" id="evt-recalculate" shape="rect"/>4.3.6 The
xforms-recalculate Event</h4>

<p>Dispatched in response to: a request to recalculate all calculations
associated with a particular XForms Model.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: Yes</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following:</p>

<p>The values of all instance data items match their associated 'calculate'
constraints, if any. All model item properties that can contain computed
expressions are resolved.</p>

<p>An XPath expression is bound either to the value or to a model item
property (e.g., <code>required</code>, <code>relevant</code>) of one or more
instance nodes. The combination of an XPath expression with a single instance
node's value or model item property is considered as a single computational
unit, a <b>compute</b>, for the purposes of recalculation.</p>

<p>When it is time to recalculate a compute, the XPath expression is
evaluated in the context of the instance node whose value or model item
property is associated with the compute. The XPath expression may
<b>reference</b> or <b>refer to</b> another instance node, in which case the
value of the instance node is <b>referenced</b>. Each referenced instance
node has as <b>dependents</b> those computes which directly refer to the
instance node. References to the current node's value in
<code>calculate</code> expressions are explicitly ignored, i.e., if an
expression associated with a compute refers to the instance node associated
with the compute, then the instance node does not take itself as a dependent.
A compute is <b>computationally dependent</b> on an instance node (whose
value may or may not be computed) if there is a path of dependents leading
from the instance node through zero or more other instance nodes to the
compute. A compute is part of a <b>circular dependency</b> if it is
computationally dependent on itself.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Authors should not refer to the current node's value in
<code>calculate</code> expressions because the effect is not well-defined.
Other model item properties, such as <code>required</code> or
<code>readonly</code>, however, are well-defined in the presence of
self-references.</p>
</div>

<p>When a recalculation event begins, there will be a list <em>L</em> of one
or more instance nodes whose values have been changed, e.g., by user input
being propagated to the instance.</p>
<ol type="1">
  <li><p>An XForms Processor should not recalculate computes that are not
    computationally dependent on one or more of the elements in
    <em>L</em>.</p>
  </li>
  <li><p>An XForms Processor should perform only a single recalculation of
    each compute that is computationally dependent on one or more of the
    elements in <em>L</em>.</p>
  </li>
  <li><p>An XForms Processor must recalculate a compute <em>C</em> after
    recalculating all computes of instance nodes on which <em>C</em> is
    computationally dependent. (Equivalently, an XForms Processor must
    recalculate a compute <em>C</em> before recalculating any compute that is
    computationally dependent on the instance node associated with
    <em>C</em>.)</p>
  </li>
  <li><p>Finally, if a compute is part of a circular dependency and also
    computationally dependent on an element in <em>L</em>, then an XForms
    processor must report an exception (<a href="#evt-computeException" shape="rect"><b>4.5.4 The xforms-compute-exception
    Event</b></a>).</p>
  </li>
</ol>

<p><a href="#recalc" shape="rect"><b>D Recalculation Sequence Algorithm</b></a> describes
one possible method for achieving the desired recalculation behavior.</p>
</div>

<div class="div3">
<h4><a name="evt-rebuild" id="evt-rebuild" shape="rect"/>4.3.7 The xforms-rebuild
Event</h4>

<p>Dispatched in response to: a request to rebuild the internal data
structures that track computational dependencies within a particular XForms
Model.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: Yes</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following:</p>

<p>The default action for this event is that the computational dependency
data structures are rebuilt, then the change list <em>L</em> is set to
contain references to all instance nodes that have an associated
computational expression such that a <em>full</em> recalculate is performed
the next time the <code>xforms-recalculate</code> event is dispatched to the
model.</p>
</div>

<div class="div3">
<h4><a name="evt-reset" id="evt-reset" shape="rect"/>4.3.8 The xforms-reset Event</h4>

<p>Dispatched in response to: a user request to reset the model.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: Yes</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following:</p>

<p>The instance data is reset to the tree structure and values it had
immediately after having processed the <code>xforms-ready</code> event. Then,
the events <code>xforms-rebuild</code>, <code>xforms-recalculate</code>,
<code>xforms-revalidate</code> and <code>xforms-refresh</code> are dispatched
to the <code>model</code> element in sequence.</p>
</div>

<div class="div3">
<h4><a name="evt-submit" id="evt-submit" shape="rect"/>4.3.9 The xforms-submit
Event</h4>

<p>See chapter <a href="#submit" shape="rect"><b>11 Submit</b></a>.</p>
</div>
</div>

<div class="div2">
<h3><a name="evt-notify" id="evt-notify" shape="rect"/>4.4 Notification Events</h3>

<div class="div3">
<h4><a name="evt-activate" id="evt-activate" shape="rect"/>4.4.1 The DOMActivate
Event</h4>

<p>Dispatched in response to: the "default action request" for a form
control, for instance pressing a button or hitting enter.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: Yes</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>
</div>

<div class="div3">
<h4><a name="evt-valueChanged" id="evt-valueChanged" shape="rect"/>4.4.2 The
xforms-value-changed Event</h4>

<p>Dispatched in response to: a confirmed change to an instance data node
bound to a form control, such as when the user navigates away from the form
control.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>For incremental processing, this specification does not define how often
XForms Processors fire these events. Implementations are expected to optimize
processing (for instance not flashing the entire screen for each character
entered, etc.).</p>
</div>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>The change to the instance data associated with this event happens before
the event is dispatched.</p>
</div>
</div>

<div class="div3">
<h4><a name="evt-select" id="evt-select" shape="rect"/>4.4.3 The xforms-select and
xforms-deselect Events</h4>

<p>Dispatched in response to: an item in a <code>select</code>,
<code>select1</code>, or <code>switch</code> becoming selected or
deselected.</p>

<p>Target: <code>item</code> or <code>case</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>
</div>

<div class="div3">
<h4><a name="evt-scroll" id="evt-scroll" shape="rect"/>4.4.4 The xforms-scroll-first
and xforms-scroll-last Events</h4>

<p>Dispatched in response to: a setindex action attempting to set an index
outside the range of a <code>repeat</code>.</p>

<p>Target: <code>repeat</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>
</div>

<div class="div3">
<h4><a name="evt-insert" id="evt-insert" shape="rect"/>4.4.5 The xforms-insert and
xforms-delete Events</h4>

<p>Dispatched in response to: A event handler invoking an XForms Action
<code>insert</code> or <code>delete</code>, successfully adding or deleting a
repeat item..</p>

<p>Target: <code>instance</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: Path expression used for insert/delete (xsd:string).</p>

<p>The default action for these events results in the following: None;
notification event only.</p>
</div>

<div class="div3">
<h4><a name="evt-valid" id="evt-valid" shape="rect"/>4.4.6 The xforms-valid Event</h4>

<p>Dispatched in response to: an instance data node becoming valid.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>

<p>This event is dispatched whenever the value of the bound instance data
node changes, additionally whenever the bound instance data node becomes
valid indirectly, through the <code>constraint</code> model item property
evaluating to <code>true</code>.</p>
</div>

<div class="div3">
<h4><a name="evt-invalid" id="evt-invalid" shape="rect"/>4.4.7 The xforms-invalid
Event</h4>

<p>Dispatched in response to: an instance data node becoming invalid.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>

<p>This event is dispatched whenever the value of the bound instance data
node changes, additionally whenever the bound instance data node becomes
invalid indirectly, through the <code>constraint</code> model item property
evaluating to <code>false</code>.</p>
</div>

<div class="div3">
<h4><a name="evt-DOMFocusIn" id="evt-DOMFocusIn" shape="rect"/>4.4.8 The DOMFocusIn
Event</h4>

<p>Dispatched in response to: a form control receiving focus.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>
</div>

<div class="div3">
<h4><a name="evt-DOMFocusOut" id="evt-DOMFocusOut" shape="rect"/>4.4.9 The DOMFocusOut
Event</h4>

<p>Dispatched in response to: a form control losing focus.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>
</div>

<div class="div3">
<h4><a name="evt-readonly" id="evt-readonly" shape="rect"/>4.4.10 The xforms-readonly
Event</h4>

<p>Dispatched in response to: an instance data node becoming readonly.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>

<p>This event is dispatched whenever the value of the bound instance data
node changes, additionally whenever the bound instance data node becomes
becomes indirectly, through the <code>readonly</code> model item property
evaluating to <code>true</code>.</p>
</div>

<div class="div3">
<h4><a name="evt-readwrite" id="evt-readwrite" shape="rect"/>4.4.11 The
xforms-readwrite Event</h4>

<p>Dispatched in response to: an instance data node becoming read-write.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>

<p>This event is dispatched whenever the value of the bound instance data
node changes, additionally whenever the bound instance data node becomes
read-write indirectly, through the <code>readonly</code> model item property
evaluating to <code>false</code>.</p>
</div>

<div class="div3">
<h4><a name="evt-required" id="evt-required" shape="rect"/>4.4.12 The xforms-required
Event</h4>

<p>Dispatched in response to: an instance data node becoming required.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>

<p>This event is dispatched whenever the value of the bound instance data
node changes, additionally whenever the bound instance data node becomes
required indirectly, through the <code>required</code> model item property
evaluating to <code>true</code>.</p>
</div>

<div class="div3">
<h4><a name="evt-optional" id="evt-optional" shape="rect"/>4.4.13 The xforms-optional
Event</h4>

<p>Dispatched in response to: an instance data node becoming optional.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>

<p>This event is dispatched whenever the value of the bound instance data
node changes, additionally whenever the bound instance data node becomes
optional indirectly, through the <code>required</code> model item property
evaluating to <code>false</code>.</p>
</div>

<div class="div3">
<h4><a name="evt-enabled" id="evt-enabled" shape="rect"/>4.4.14 The xforms-enabled
Event</h4>

<p>Dispatched in response to: an instance data node becoming enabled.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>

<p>This event is dispatched whenever the value of the bound instance data
node changes, additionally whenever the bound instance data node becomes
enabled indirectly, through the <code>relevant</code> model item property
evaluating to <code>true</code>.</p>
</div>

<div class="div3">
<h4><a name="evt-disabled" id="evt-disabled" shape="rect"/>4.4.15 The xforms-disabled
Event</h4>

<p>Dispatched in response to: an instance data node becoming disabled.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>

<p>This event is dispatched whenever the value of the bound instance data
node changes, additionally whenever the bound instance data node becomes
disabled indirectly, through the <code>relevant</code> model item property
evaluating to <code>false</code>.</p>
</div>

<div class="div3">
<h4><a name="evt-in-range" id="evt-in-range" shape="rect"/>4.4.16 The xforms-in-range
Event</h4>

<p>Dispatched in response to: the value of an instance data node has changed
such that the value can now be represented by the form control.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>

<p>This event is dispatched whenever the value of an instance data node that
was not possible to represent given the constraints specified on a form
control has changed such that the value can now be represented by the form
control.</p>
</div>

<div class="div3">
<h4><a name="evt-out-of-range" id="evt-out-of-range" shape="rect"/>4.4.17 The
xforms-out-of-range Event</h4>

<p>Dispatched in response to: the value of an instance data node has changed
such that the value can not be represented by the form control.</p>

<p>Target: form control</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>

<p>This event is dispatched whenever the value of an instance data node can
not be represented given the constraints specified on a form control.</p>
</div>

<div class="div3">
<h4><a name="evt-submitdone" id="evt-submitdone" shape="rect"/>4.4.18 The
xforms-submit-done Event</h4>

<p>Dispatched in response to: completion of submit processing, including
processing any returned document.</p>

<p>Target: <code>submission</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: None;
notification event only.</p>
</div>

<div class="div3">
<h4><a name="evt-submitError" id="evt-submitError" shape="rect"/>4.4.19 The
xforms-submit-error Event</h4>

<p>Dispatched as an indication of: a failure of the submit process, as
defined at <a href="#submit" shape="rect"><b>11 Submit</b></a></p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: The submit method URI that failed (xsd:anyURI)</p>

<p>The default action for this event results in the following: None;
notification event only.</p>
</div>
</div>

<div class="div2">
<h3><a name="rpm-errors" id="rpm-errors" shape="rect"/>4.5 Error Indications</h3>

<p>Error indications happen as a result of unusual conditions in the XForms
Processor. Some of these are "fatal" errors, which halt processing, and bear
the suffix "exception". Others are simply for notification, and bear the
suffix "error". For all events in this section, it is permissible for the
XForms Processor to perform some kind of default handling, for example
logging error messages to a file.</p>

<div class="div3">
<h4><a name="evt-bindingException" id="evt-bindingException" shape="rect"/>4.5.1 The
xforms-binding-exception Event</h4>

<p>Dispatched as an indication of: an illegal binding expression, or a
<code>model</code> attribute that fails to point to the ID of a
<code>model</code> element, or a <code>bind</code> attribute that fails to
point to the ID of a <code>bind</code> element, or a <code>submission</code>
attribute that fails to point to the ID of a <code>submission</code>
element.</p>

<p>Target: any element that can contain a binding expression</p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: None</p>

<p>The default action for this event results in the following: Fatal
error.</p>
</div>

<div class="div3">
<h4><a name="evt-linkException" id="evt-linkException" shape="rect"/>4.5.2 The
xforms-link-exception Event</h4>

<p>Dispatched as an indication of: a failure in link traversal of a linking
attribute.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: The URI that failed to load (xsd:anyURI)</p>

<p>The default action for this event results in the following: Fatal
error.</p>
</div>

<div class="div3">
<h4><a name="evt-linkError" id="evt-linkError" shape="rect"/>4.5.3 The
xforms-link-error Event</h4>

<p>Dispatched as an indication of: a failure in link traversal of a linking
attribute, in a situation not critical to form processing.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: The URI that failed to load (xsd:anyURI)</p>

<p>The default action for this event results in the following: None;
notification event only.</p>
</div>

<div class="div3">
<h4><a name="evt-computeException" id="evt-computeException" shape="rect"/>4.5.4 The
xforms-compute-exception Event</h4>

<p>Dispatched as an indication of: an error occurring during XPath
evaluation.</p>

<p>Target: <code>model</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: No</p>

<p>Context Info: Implementation-specific error string.</p>

<p>The default action for this event results in the following: Fatal
error.</p>
</div>
</div>

<div class="div2">
<h3><a name="rpm-event-sequences" id="rpm-event-sequences" shape="rect"/>4.6 Event
Sequencing</h3>

<p>The previous sections describe processing associated with individual
events. This section gives the overall sequence of related events that must
occur in several common situations. In the following lists, events that may
be fired more than once are prefixed with [n].</p>

<div class="div3">
<h4><a name="sequence-for-input" id="sequence-for-input" shape="rect"/>4.6.1 For
<code>input</code>, <code>secret</code>, <code>textarea</code>,
<code>range</code>, or <code>upload</code> Controls</h4>
<ul>
  <li><p>When the form control is interactively changed, and has the
    "incremental="true" setting, the event sequence described at <a href="#rpm-event-seq-vcwfc" shape="rect"><b>4.6.7 Sequence: Value Change with Focus
    Change</b></a> may be initiated at implementation dependent intervals.</p>
  </li>
  <li><p>When the form control is interactively changed and does not have the
    "incremental=true" setting, no events are required to be dispatched, and
    thus no order is defined.</p>
  </li>
  <li><p>When focus changes from the form control and the value has changed,
    the event sequence is as described at <a href="#rpm-event-seq-vcwfc" shape="rect"><b>4.6.7 Sequence: Value Change with Focus
    Change</b></a>.</p>
  </li>
</ul>
</div>

<div class="div3">
<h4><a name="sequence-for-output" id="sequence-for-output" shape="rect"/>4.6.2 For
<code>output</code> Controls</h4>
<ul>
  <li><p>No event sequences are defined.</p>
  </li>
</ul>
</div>

<div class="div3">
<h4><a name="sequence-for-select" id="sequence-for-select" shape="rect"/>4.6.3 For
<code>select</code> or <code>select1</code> Controls</h4>
<ul>
  <li><p>When a selection is interactively changed, and the form control has
    the "incremental="true" setting, the event sequence is described at <a href="#rpm-event-seq-swvc" shape="rect"><b>4.6.6 Sequence: Selection Without Value
    Change</b></a>, which may be followed immediately by the sequence
    described at <a href="#rpm-event-seq-vcwfc" shape="rect"><b>4.6.7 Sequence: Value
    Change with Focus Change</b></a>.</p>
  </li>
  <li><p>When a selection is interactively changed, and the form control does
    not have the "incremental="true" setting, the event sequence is described
    at <a href="#rpm-event-seq-swvc" shape="rect"><b>4.6.6 Sequence: Selection Without
    Value Change</b></a>.</p>
  </li>
  <li><p>When focus changes from the form control and the value has changed,
    the event sequence is as described at <a href="#rpm-event-seq-vcwfc" shape="rect"><b>4.6.7 Sequence: Value Change with Focus
    Change</b></a>.</p>
  </li>
</ul>
</div>

<div class="div3">
<h4><a name="sequence-for-trigger" id="sequence-for-trigger" shape="rect"/>4.6.4 For
<code>trigger</code> Controls</h4>
<ul>
  <li><p>Activating the form control causes the event sequence defined at <a href="#rpm-event-seq-aat" shape="rect"><b>4.6.8 Sequence: Activating a
    Trigger</b></a>.</p>
  </li>
</ul>
</div>

<div class="div3">
<h4><a name="sequence-for-submit" id="sequence-for-submit" shape="rect"/>4.6.5 For
<code>submit</code> Controls</h4>
<ul>
  <li><p>Activating the form control causes the event sequence defined at <a href="#rpm-event-seq-aat" shape="rect"><b>4.6.8 Sequence: Activating a
    Trigger</b></a>, followed immediately by the event sequence defined at <a href="#rpm-event-seq-s" shape="rect"><b>4.6.9 Sequence: Submission</b></a>.</p>
  </li>
</ul>
</div>

<div class="div3">
<h4><a name="rpm-event-seq-swvc" id="rpm-event-seq-swvc" shape="rect"/>4.6.6 Sequence:
Selection Without Value Change</h4>
<ol type="1">
  <li><p>xforms-deselect</p>
  </li>
  <li><p>xforms-select</p>
  </li>
</ol>
</div>

<div class="div3">
<h4><a name="rpm-event-seq-vcwfc" id="rpm-event-seq-vcwfc" shape="rect"/>4.6.7
Sequence: Value Change with Focus Change</h4>
<ol type="1">
  <li><p>xforms-recalculate</p>
  </li>
  <li><p>xforms-revalidate</p>
  </li>
  <li><p>[n] xforms-valid/xforms-invalid; xforms-enabled/xforms-disabled;
    xforms-optional/xforms-required; xforms-readonly/xforms-readwrite</p>
  </li>
  <li><p>xforms-value-changed</p>
  </li>
  <li><p>DOMFocusOut</p>
  </li>
  <li><p>DOMFocusIn</p>
  </li>
  <li><p>xforms-refresh</p>
  </li>
</ol>

<p>Reevaluation of binding expressions must occur before step 3 above.</p>
</div>

<div class="div3">
<h4><a name="rpm-event-seq-aat" id="rpm-event-seq-aat" shape="rect"/>4.6.8 Sequence:
Activating a Trigger</h4>
<ol type="1">
  <li><p>DOMActivate</p>
  </li>
</ol>
</div>

<div class="div3">
<h4><a name="rpm-event-seq-s" id="rpm-event-seq-s" shape="rect"/>4.6.9 Sequence:
Submission</h4>
<ol type="1">
  <li><p>xforms-submit</p>
  </li>
  <li><p>xforms-submit-done or xforms-submit-error</p>
  </li>
</ol>
</div>
</div>
</div>

<div class="div1">
<h2><a name="datatypes" id="datatypes" shape="rect"/>5 Datatypes</h2>

<p>This chapter defines the datatypes used in defining an <a title="XForms Model" href="#def-XForms-Model" shape="rect">XForms Model</a>.</p>

<div class="div2">
<h3><a name="datatypes-schema" id="datatypes-schema" shape="rect"/>5.1 XML Schema
Built-in Datatypes</h3>

<p>XForms supports all XML Schema <a title="datatype" href="#def-datatype" shape="rect">datatypes</a> except for <code>xsd:duration</code>,
<code>xsd:ENTITY</code>, <code>xsd:ENTITIES</code>, and
<code>xsd:NOTATION</code>. Concepts <a title="value space" href="#def-value-space" shape="rect">value space</a>, <a title="lexical space" href="#def-lexical-space" shape="rect">lexical space</a> and constraining <a title="facet" href="#def-facet" shape="rect">facet</a>s are as specified in <a href="#ref-xschema-2" shape="rect">[XML Schema part 2]</a>. Certain XML Schema datatypes
have been identified as part of a smaller XForms conformance profile that is
being developed separately, and are marked with an asterisk <em>*</em>.
XForms includes datatypes <em>derived by restriction</em> and <em>derived by
list</em> from these base types. XForms Processors must treat the datatypes
listed in the chapter as in-scope without requiring the inclusion of an XML
Schema.</p>

<p>Built-in primitive types:</p>

<blockquote>
  <p><br clear="none"/>
  <em>dateTime *</em><br clear="none"/>
  <em>time *</em><br clear="none"/>
  <em>date *</em><br clear="none"/>
  <em>gYearMonth *</em><br clear="none"/>
  <em>gYear *</em><br clear="none"/>
  <em>gMonthDay *</em><br clear="none"/>
  <em>gDay *</em><br clear="none"/>
  <em>gMonth *</em><br clear="none"/>
  <em>string *</em><br clear="none"/>
  <em>boolean *</em><br clear="none"/>
  <em>base64Binary *</em><br clear="none"/>
  hexBinary<br clear="none"/>
  float<br clear="none"/>
  <em>decimal *</em><br clear="none"/>
  double<br clear="none"/>
  <em>anyURI *</em><br clear="none"/>
  QName</p>
</blockquote>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>The built-in datatype <code>xsd:duration</code> is not supported, except
as an abstract datatype. Instead, either <code>xforms:dayTimeDuration</code>
or <code>xforms:yearMonthDuration</code> should be used.</p>
</div>

<p>Built-in derived types:</p>

<blockquote>
  <p>normalizedString<br clear="none"/>
  token<br clear="none"/>
  language<br clear="none"/>
  Name<br clear="none"/>
  NCName<br clear="none"/>
  ID<br clear="none"/>
  IDREF<br clear="none"/>
  IDREFS<br clear="none"/>
  NMTOKEN<br clear="none"/>
  NMTOKENS<br clear="none"/>
  <em>integer *</em><br clear="none"/>
  <em>nonPositiveInteger *</em><br clear="none"/>
  <em>negativeInteger *</em><br clear="none"/>
  <em>long *</em><br clear="none"/>
  <em>int *</em><br clear="none"/>
  <em>short *</em><br clear="none"/>
  <em>byte *</em><br clear="none"/>
  <em>nonNegativeInteger *</em><br clear="none"/>
  <em>unsignedLong *</em><br clear="none"/>
  <em>unsignedInt *</em><br clear="none"/>
  <em>unsignedShort *</em><br clear="none"/>
  <em>unsignedByte *</em><br clear="none"/>
  <em>positiveInteger *</em></p>
</blockquote>
</div>

<div class="div2">
<h3><a name="datatypes-xforms" id="datatypes-xforms" shape="rect"/>5.2 XForms
Datatypes</h3>

<p>The Schema for XForms derives the following types to facilitate defining
<code>model</code> in XForms.</p>

<div class="div3">
<h4><a name="dt-listItem" id="dt-listItem" shape="rect"/>5.2.1 xforms:listItem</h4>

<p>This datatype serves as a base for the <code>xforms:listItems</code>
datatype. The value space for listItem permits one or more characters valid
for xsd:string, except white space characters.</p>
</div>

<div class="div3">
<h4><a name="dt-listItems" id="dt-listItems" shape="rect"/>5.2.2 xforms:listItems</h4>

<p>XForms includes form controls that produce simpleType list content. This
is facilitated by defining a <code>derived-by-list</code> datatype. The value
space for listItems is defined by list-derivation from listItem.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>In most cases, it is better to use markup to distinguish items in a list.
See <a href="#ui-common-elements-itemset" shape="rect"><b>9.3.3 The itemset
Element</b></a>.</p>
</div>
</div>

<div class="div3">
<h4><a name="dt-dayTimeDuration" id="dt-dayTimeDuration" shape="rect"/>5.2.3
xforms:dayTimeDuration</h4>

<p>XForms includes a totally ordered duration datatype that can represent a
duration of days, hours, minutes, and fractional seconds. The value space for
this datatype is the set of fractional second values. This datatype is
derived from <code>xsd:duration</code>.</p>
</div>

<div class="div3">
<h4><a name="dt-yearMonthDuration" id="dt-yearMonthDuration" shape="rect"/>5.2.4
xforms:yearMonthDuration</h4>

<p>XForms includes a totally ordered duration datatype that can represent a
duration of a whole number of months and years. The value space for this
datatype is the set of integer month values. This datatype is derived from
<code>xsd:duration</code>.</p>
</div>
</div>
</div>

<div class="div1">
<h2><a name="model" id="model" shape="rect"/>6 Model Item Properties</h2>

<p>This chapter defines infoset contributions that can be bound to instance
data nodes with element <code>bind</code> (see <a href="#structure-bind-element" shape="rect"><b>3.3.4 The bind Element</b></a>). The
combination of these contributions to an <a title="instance data item" href="#def-instance-data-node" shape="rect">instance data node</a> is called a <a title="model item" href="#def-model-item" shape="rect">model item</a>. Taken together,
these contributions are called <a title="model item property" href="#def-model-item-property" shape="rect">model item properties</a>, and are defined in
the following section. In contrast, the term <a title="Schema constraint" href="#def-Schema-constraint" shape="rect">Schema constraint</a> refers only to XML Schema
constraints from the <a title="facet" href="#def-facet" shape="rect">facet</a>s of a given
datatype.</p>

<div class="div2">
<h3><a name="model-xformsconstraints" id="model-xformsconstraints" shape="rect"/>6.1
Model Item Property Definitions</h3>

<p>Model item properties can be distinguished along various axes.</p>

<p>Computed expressions vs. fixed properties:</p>
<ul>
  <li><p>Fixed properties are static values that the XForms Processor
    evaluates only once. Such properties consist of literals, and are not
    subject to XPath evaluation.</p>
  </li>
  <li><p><a title="computed expression" href="#def-computed-expression" shape="rect">Computed expressions</a> are XPath
    expressions that provide a value to the XForms Processor. Such values are
    recalculated at certain times as specified by the XForms Processing Model
    (see <a href="#rpm" shape="rect"><b>4 Processing Model</b></a>). These expressions
    encode dynamic properties, often constraints, such as the dependency
    among various data items. Computed expressions are not restricted to
    examining the value of the instance data node to which they apply. XPath
    expressions provide the means to traverse the instance data; more complex
    computations may be encoded as call-outs to external scripts.</p>
  </li>
</ul>

<p>Inheritance rules:</p>

<p>Some model item properties define inheritance rules, in which case the
XForms Processor needs to keep track of two separate values: 1) the <b>local
value</b>, which is applied from an attribute of element <code>bind</code>,
and 2) the <b>inherited value</b>, which is determined by combining the
evaluated local value with the evaluated values from ancestor nodes in the
instance data.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>The sample recalculation algorithm defined in <a href="#recalc" shape="rect"><b>D
Recalculation Sequence Algorithm</b></a> is defined to operate only on the
local values of a model item property. It assumes that an implementation
propagates the combined values to a node's descendants.</p>
</div>

<p>Assigning local values:</p>

<p>Local values are assigned by processing all bind elements in an XForms
Model in document order. It is an error to attempt to set a model item
property twice on the same node. The details of this process are given at <a href="#evt-modelConstruct" shape="rect"><b>4.2.1 The xforms-model-construct
Event</b></a>.</p>

<p>The following sections list the model item properties available as part of
all <a title="model item" href="#def-model-item" shape="rect">model items</a>. For each,
the following information is provided:</p>

<blockquote>
  <p>Description<br clear="none"/>
  Computed Expression (yes or no)<br clear="none"/>
  Legal Values<br clear="none"/>
  Default Value<br clear="none"/>
  Inheritance Rules</p>
</blockquote>

<div class="div3">
<h4><a name="model-prop-type" id="model-prop-type" shape="rect"/>6.1.1 The type
Property</h4>

<p>Description: associates a Schema datatype.</p>

<p>Computed Expression: No.</p>

<p>Legal Values: Any <code>xsd:QName</code> representing a datatype
definition in an XML Schema.</p>

<p>Default Value: <code>xsd:string</code>.</p>

<p>Inheritance Rules: does not inherit.</p>

<p>The effect of this model item property is the same as placing attribute
<code>xsi:type</code> on the instance data. However, in contrast to
<code>xsi:type</code>, <code>type</code> can be added to both elements and
attributes.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Attaching a XML Schema type constraint</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;instance&gt;
  &lt;my:person-name&gt;
    &lt;my:first-name /&gt;
    &lt;my:last-name xsi:type="my:nonEmptyString" /&gt;
  &lt;/my:person-name&gt;
&lt;/instance&gt;
&lt;bind type="my:nonEmptyString" nodeset="/my:person-name/my:first-name" /&gt;</pre>
</div>

<p>Here, we have illustrated two ways in which an XML Schema type can be
associated with an element.</p>
</div>
</div>

<div class="div3">
<h4><a name="model-prop-readOnly" id="model-prop-readOnly" shape="rect"/>6.1.2 The
readonly Property</h4>

<p>Description: describes whether the value is restricted from changing.</p>

<p>Computed Expression: Yes.</p>

<p>Legal Values: Any expression that is convertible to XPath
<code>boolean</code> with <code>boolean()</code>.</p>

<p>Default Value: <code>false()</code>, unless a <code>calculate</code>
property is specified, then <code>true()</code>.</p>

<p>Inheritance Rules: If any ancestor node evaluates to <code>true</code>,
this value is treated as <code>true</code>. Otherwise, the local value is
used.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>This is the equivalent of taking the logical OR of the evaluated
<code>readonly</code> property on the local and every ancestor node.</p>
</div>

<p>When evaluating to <code>true</code>, this model item property indicates
that the XForms Processor should not allow any changes to the bound instance
data node.</p>

<p>In addition to restricting value changes, the <code>readonly</code> model
item property provides a hint to the XForms user interface. Form controls
bound to instance data with the <code>readonly</code> model item property
should indicate that entering or changing the value is not allowed. This
specification does not define any effect on visibility, focus, or navigation
order.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Attaching a readonly property</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;instance&gt;
  &lt;my:person-name&gt;
    &lt;my:first-name&gt;Roland&lt;/my:first-name&gt;
    &lt;my:last-name/&gt;
  &lt;/my:person-name&gt;
&lt;/instance&gt;
&lt;bind nodeset="/my:person-name/my:first-name" readonly="true()"/&gt;</pre>
</div>

<p>Here, we have associated a <code>readonly</code> property with an
element.</p>
</div>
</div>

<div class="div3">
<h4><a name="model-prop-required" id="model-prop-required" shape="rect"/>6.1.3 The
required Property</h4>

<p>Description: describes whether a value is required before the instance
data is submitted.</p>

<p>Computed Expression: Yes.</p>

<p>Legal Values: Any expression that is convertible to XPath
<code>boolean</code> with <code>boolean()</code>.</p>

<p>Default Value: <code>false()</code>.</p>

<p>Inheritance Rules: does not inherit.</p>

<p>A form may <em>require</em> certain values, and this requirement may be
dynamic. When evaluating to <code>true</code>, this model item property
indicates that a non-empty instance data node is required before a submission
of instance data can occur. Non-empty is defined as:</p>
<ol type="1">
  <li><p>If the bound instance data node is an element, the element must not
    have the <code>xsi:nil</code> attribute set to <code>true</code>.</p>
  </li>
  <li><p>The value of the bound instance data node must be convertible to an
    XPath <code>string</code> with a length greater than zero.</p>
  </li>
</ol>

<p>Except as noted below, the <code>required</code> model item property does
not provide a hint to the XForms user interface regarding visibility, focus,
or navigation order. XForms authors are strongly encouraged to make sure that
form controls that accept <code>required</code> data are visible. An XForms
Processor may provide an indication that a form control is required, and may
provide immediate feedback, including limiting navigation. Chapter <a href="#rpm" shape="rect"><b>4 Processing Model</b></a> contains details on how the XForms
Processor enforces required values.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Attaching a required property</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;instance&gt;
  &lt;my:person-name&gt;
    &lt;my:first-name&gt;Roland&lt;/my:first-name&gt;
    &lt;my:last-name /&gt;
  &lt;/my:person-name&gt;
&lt;/instance&gt;
&lt;bind nodeset="/my:person-name/my:last-name" required="true()"/&gt;</pre>
</div>

<p>Here, we have associated a <code>required</code> property with element
<code>my:last-name</code> to indicate that a value must be supplied.</p>
</div>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>XML Schema has a similarly named concept with
<code>use</code>=<code>"required|optional|prohibited"</code>. This is
different than the XForms Model item property, in two ways: 1)
<code>use</code> applies only to attributes, while XForms
<code>required</code> applies to any node. 2) <code>use</code> is concerned
with whether the entire attribute must be specified (without regard to
value), while <code>required</code> determines whether a value is required of
the node before submission.</p>
</div>
</div>

<div class="div3">
<h4><a name="model-prop-relevant" id="model-prop-relevant" shape="rect"/>6.1.4 The
relevant Property</h4>

<p>Description: indicates whether the model item is currently
<em>relevant</em>. Instance data nodes with this property evaluating to
<code>false</code> are not serialized for submission.</p>

<p>Computed Expression: Yes.</p>

<p>Legal Values: Any expression that is convertible to XPath
<code>boolean</code> with <code>boolean()</code>.</p>

<p>Default Value: <code>true()</code>.</p>

<p>Inheritance Rules: If any ancestor node evaluates to XPath
<code>false</code>, this value is treated as <code>false</code>. Otherwise,
the local value is used.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>This is the equivalent of taking the logical AND of the evaluated
<code>relevant</code> property on the local and every ancestor node.</p>
</div>

<p>Many forms have data entry sections that depend on other conditions. For
example, a form might ask whether the respondent owns a car. It is only
appropriate to ask for further information about their car if they have
indicated that they own one.</p>

<p>The <code>relevant</code> model item property provides hints to the XForms
user interface regarding visibility, focus, and navigation order. In general,
when <code>true</code>, associated form controls should be made visible. When
<code>false</code>, associated form controls should be made unavailable,
removed from the navigation order, and not allowed focus.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Attaching a relevant property</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;instance&gt;
  &lt;my:order&gt;
    &lt;my:item&gt;
      &lt;my:amount /&gt;
      &lt;my:discount&gt;100&lt;/my:discount&gt;
    &lt;/my:item&gt;
  &lt;/my:order&gt;
&lt;/instance&gt;
&lt;bind nodeset="my:item/my:discount" readonly="true()"
      relevant="../my:amount &amp;gt; 1000"/&gt;</pre>
</div>

<p>Here, we have associated a <code>relevant</code> property with element
<code>my:discount</code> to indicate a discount is relevant when the order
amount is greater than 1000.</p>
</div>

<p>The following table shows the user interface interaction between
<code>required</code> and <code>relevant</code>.</p>

<table border="1" cellpadding="4" cellspacing="1" summary="shows combinations of depends and required">
  <tbody>
    <tr>
      <td colspan="1" rowspan="1"/>
      <td colspan="1" rowspan="1"><code>required="true()"</code></td>
      <td colspan="1" rowspan="1"><code>required="false()"</code></td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><code>relevant="true()"</code></td>
      <td colspan="1" rowspan="1">The form control (and any children) must be
        visible or available to the user. The XForms user interface may
        indicate that a value is required.</td>
      <td colspan="1" rowspan="1">The form control (and any children) must be
        visible or available to the user. The XForms user interface may
        indicate that a value is optional.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><code>relevant="false()"</code></td>
      <td colspan="1" rowspan="1">The form control (and any children) must be
        hidden or unavailable to the user. Entering a value or obtaining
        focus should not be allowed. The XForms user interface may indicate
        that should the form control become relevant, a value would be
        required.</td>
      <td colspan="1" rowspan="1">The form control (and any children) must be
        hidden or unavailable to the user. Entering a value or obtaining
        focus should not be allowed.</td>
    </tr>
  </tbody>
</table>
</div>

<div class="div3">
<h4><a name="model-prop-calculate" id="model-prop-calculate" shape="rect"/>6.1.5 The
calculate Property</h4>

<p>Description: supplies an expression used to calculate the value of the
associated instance data node.</p>

<p>Computed Expression: Yes.</p>

<p>Legal Values: Any XPath expression.</p>

<p>Default Value: none.</p>

<p>Inheritance Rules: does not inherit.</p>

<p>An XForms Model may include model items that are computed from other
values. For example, the sum over line items for quantity times unit price,
or the amount of tax to be paid on an order. Such computed value can be
expressed as a computed expression using the values of other model items.
Chapter <a href="#rpm" shape="rect"><b>4 Processing Model</b></a> contains details of when
and how the calculation is performed.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Attaching a calculate property</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;instance&gt;
  &lt;my:order&gt;
    &lt;my:item&gt;
      &lt;my:amount /&gt;
      &lt;my:discount /&gt;
    &lt;/my:item&gt;
  &lt;/my:order&gt;
&lt;/instance&gt;
&lt;bind nodeset="my:item/my:discount" calculate="../my:amount * 0.1"
      relevant="../my:amount &amp;gt; 1000"/&gt;</pre>
</div>

<p>Here, we have associated a <code>relevant</code> property with element
<code>my:discount</code> to indicate a discount of 10% is relevant when the
order amount is greater than 1000.</p>
</div>
</div>

<div class="div3">
<h4><a name="model-prop-validate" id="model-prop-validate" shape="rect"/>6.1.6 The
constraint Property</h4>

<p>Description: specifies a predicate that needs to be satisfied for the
associated instance data node to be considered valid.</p>

<p>Computed Expression: Yes.</p>

<p>Legal Values: Any expression that is convertible to XPath
<code>boolean</code> with <code>boolean()</code>.</p>

<p>Default Value: <code>true()</code>.</p>

<p>Inheritance Rules: does not inherit.</p>

<p>When evaluating to XPath <code>false</code>, the associated model item is
not valid; the converse is not necessarily true. Chapter <a href="#rpm" shape="rect"><b>4
Processing Model</b></a> contains details of when and how the constraint is
calculated as well as when validation is performed.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Attaching a constraint property</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;instance&gt;
  &lt;my:range&gt;
    &lt;my:from /&gt;
    &lt;my:to /&gt;
  &lt;/my:range&gt;
&lt;/instance&gt;
&lt;bind nodeset="my:to" constraint=". &amp;gt; ../my:from" /&gt;</pre>
</div>

<p>Here, a <code>constraint</code> property associated with element
<code>my:to</code> indicates that its value must be greater than that of
element <code>my:from</code>.</p>
</div>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Specifying minimum and maximum occurrences for nodes in the instance data
can be achieved by using the <code>count()</code> function within a
<code>constraint</code> property.</p>
</div>
</div>

<div class="div3">
<h4><a name="model-prop-p3ptype" id="model-prop-p3ptype" shape="rect"/>6.1.7 The
p3ptype Property</h4>

<p>Description: Attaches a P3P data element to an instance data node,
indicating the specific kind of data collected there.</p>

<p>Computed Expression: No.</p>

<p>Legal Values: <code>xsd:string</code>.</p>

<p>Default Value: none</p>

<p>Inheritance Rules: does not inherit.</p>

<p>This model item property holds a description of the kind of data collected
by the associated instance data node, based on the P3P datatype system <a href="#ref-p3p-1.0" shape="rect">[P3P 1.0]</a>. This information may be used to enhance
the form-fill experience, for example by supplying previously-known data.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Attaching a type constraint using Binding</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;instance&gt;
  &lt;my:person-name&gt;
    &lt;my:first-name /&gt;
    &lt;my:last-name /&gt;
  &lt;/my:person-name&gt;
&lt;/instance&gt;
&lt;bind type="my:nonEmptyString" nodeset="my:first-name"
      p3ptype="user.personname.given"/&gt;</pre>
</div>

<p>Here, we have attached both XML Schema and P3P type information to element
<code>first-name</code> via element <code>bind</code>.</p>
</div>
</div>
</div>

<div class="div2">
<h3><a name="model-using" id="model-using" shape="rect"/>6.2 Schema Constraints</h3>

<p>Chapter <a href="#datatypes" shape="rect"><b>5 Datatypes</b></a> described how XForms
uses the XML Schema datatype system to constrain the <a title="value space" href="#def-value-space" shape="rect">value space</a> of data values collected by an XForms
Model. Such datatype constraints can be provided via an XML Schema.
Alternatively, this section lists various mechanisms for attaching type
constraints to instance data. Attributes <code>xsi:schemaLocation</code> and
<code>xsi:noNamespaceSchemaLocation</code> are ignored for purposes for
locating a Schema.</p>

<div class="div3">
<h4><a name="model-using-atomic" id="model-using-atomic" shape="rect"/>6.2.1 Atomic
Datatype</h4>

<p>The XForms Processing Model applies XML Schema facets as part of the
validation process. At the simplest level, it is necessary to associate a set
of facets (through an XML Schema datatype) with a model item. This has the
effect of restricting the allowable values of the associated instance data
node to valid representations of the lexical space of the datatype.</p>

<p>The set of facets associated with a model item must be determined by the
following list, as if it were processed in the given order. When multiple
datatype restrictions apply to the same model item, the combination of all
given restrictions must apply. Note that it is possible to produce a
combination of restrictions that is impossible to satisfy; authors are
encouraged to avoid this practice.</p>
<ol type="1">
  <li><p>An XML Schema associated with the instance data.</p>
  </li>
  <li><p>An XML Schema <code>xsi:type</code> attribute in the instance
    data.</p>
  </li>
  <li><p>An XForms <code>type</code> constraint associated with the instance
    data node using <a title="binding" href="#def-binding" shape="rect">XForms
    binding</a>.</p>
  </li>
  <li><p>If no type constraint is provided, the instance data node defaults
    to <code>type="xsd:string"</code> (default to string rule).</p>
  </li>
</ol>

<p>The following declares a datatype based on <code>xsd:string</code> with an
additional constraining facet.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Type Constraint Using XML Schema</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xsd:simpleType name="nonEmptyString"&gt;
  &lt;xsd:restriction base="xsd:string"&gt;
    &lt;xsd:minLength value="1"/&gt;
  &lt;/xsd:restriction&gt;
&lt;/xsd:simpleType&gt;</pre>
</div>

<p>This new datatype would then be associated with one or more model items
through one of the methods outlined here.</p>
</div>

<div class="exampleOuter">

<div class="exampleHead">
Example: Attaching A Type Constraint</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;my:first-name xsi:type="my:nonEmptyString"/&gt;</pre>
</div>

<p>This defines element <code>first-name</code> to be of type
<code>my:nonEmptyString</code>.</p>
</div>

<div class="exampleOuter">

<div class="exampleHead">
Example: Attaching Type Constraint Using XForms Binding</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;instance&gt;
  &lt;my:first-name /&gt;
&lt;/instance&gt;
&lt;bind type="my:nonEmptyString" nodeset="/my:first-name"/&gt;</pre>
</div>

<p>Here, we have attached type information to element <code>first-name</code>
via element <code>bind</code>. Thus the XForms author can extend external
schemas without having the ability to change them.</p>
</div>
</div>
</div>
</div>

<div class="div1">
<h2><a name="expr" id="expr" shape="rect"/>7 XPath Expressions in XForms</h2>

<p>XForms uses XPath to address <a title="instance data item" href="#def-instance-data-node" shape="rect">instance data node</a>s in binding
expressions, to express constraints, and to specify calculations. XPath
expressions that are not syntactically valid, including attempted calls to
undefined functions, result in an exception (<a href="#evt-computeException" shape="rect"><b>4.5.4 The xforms-compute-exception
Event</b></a>), except for binding expressions, which produce a different
exception (<a href="#evt-bindingException" shape="rect"><b>4.5.1 The
xforms-binding-exception Event</b></a>).</p>

<div class="div2">
<h3><a name="expr-datatypes" id="expr-datatypes" shape="rect"/>7.1 XPath Datatypes</h3>

<p>XPath datatypes are used only in <a title="binding expression" href="#def-binding-expression" shape="rect">binding expression</a>s and <a title="computed expression" href="#def-computed-expression" shape="rect">computed
expression</a>s. XForms uses XPath datatypes <code>boolean</code>,
<code>string</code>, <code>number</code>, and <code>node-set</code>. A future
version of XForms is expected to use XPath 2.0, which includes support for
XML Schema datatypes.</p>
</div>

<div class="div2">
<h3><a name="expr-hasfeature" id="expr-hasfeature" shape="rect"/>7.2 Feature string for
the hasFeature method call</h3>

<p>For this version of the XForms specification, the feature string for the
<a href="#ref-dom2-core" shape="rect">[DOM2 Core]</a> <code>DOMImplementation</code>
interface <code>hasFeature</code> method call is
<code>"org.w3c.xforms.dom"</code> and the version string is
<code>"1.0"</code>.</p>
</div>

<div class="div2">
<h3><a name="expr-instance" id="expr-instance" shape="rect"/>7.3 Instance Data</h3>

<p>For each <code>model</code> element, the XForms Processor maintains the
state in an internal structure called <a title="instance data" href="#def-instance-data" shape="rect">instance data</a> that conforms to the XPath Data
Model <a href="#ref-xpath-1.0" shape="rect">[XPath 1.0]</a>. XForms Processors that
implement DOM must provide DOM access to this instance data via the interface
defined below.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Instance data always has a single root element, and thus corresponds to a
DOM Document.</p>
</div>

<p>The IDL for this interface follows:</p>

<div class="exampleInner">
<pre xml:space="preserve">#include "dom.idl"
pragma prefix "w3c.org"
module xforms {
  interface XFormsModelElement : dom::Element {
    dom::Document getInstanceDocument(in dom::DOMString instanceID)
      raises(dom::DOMException);
    void rebuild();
    void recalculate();
    void revalidate();
    void refresh();
  };
};</pre>
</div>

<div class="div3">
<h4><a name="idl-getInstanceDocument" id="idl-getInstanceDocument" shape="rect"/>7.3.1
The getInstanceDocument() Method</h4>

<p>This method returns a DOM Document that corresponds to the instance data
associated with the <code>instance</code> element containing an
<code>ID</code> matching the <code>instance-id</code> parameter. If there is
no matching instance data, a <code>DOMException</code> is thrown.</p>
</div>

<div class="div3">
<h4><a name="idl-rebuild" id="idl-rebuild" shape="rect"/>7.3.2 The rebuild() Method</h4>

<p>This method signals the XForms Processor to rebuild any internal data
structures used to track computational dependencies within this XForms Model.
This method takes no parameters and raises no exceptions.</p>
</div>

<div class="div3">
<h4><a name="idl-recalculate" id="idl-recalculate" shape="rect"/>7.3.3 The
recalculate() Method</h4>

<p>This method signals the XForms Processor to perform a full recalculation
of this XForms Model. This method takes no parameters and raises no
exceptions.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Script invocation of <code>recalculate()</code> is not necessarily
equivalent to performing the recalculate action handler. Though the script is
assumed to have modified instance data prior to invoking
<code>recalculate()</code>, the DOM mutations are not cached. Thus, a
<em>full</em> recalculation is necessary to ensure the proper changes are
effected throughout the XForms Model.</p>
</div>
</div>

<div class="div3">
<h4><a name="idl-revalidate" id="idl-revalidate" shape="rect"/>7.3.4 The revalidate()
Method</h4>

<p>This method signals the XForms Processor to perform a full revalidation of
this XForms Model. This method takes no parameters and raises no
exceptions.</p>
</div>

<div class="div3">
<h4><a name="idl-refresh" id="idl-refresh" shape="rect"/>7.3.5 The refresh() Method</h4>

<p>This method signals the XForms Processor to perform a full refresh of form
controls bound to instance nodes within this XForms Model. This method takes
no parameters and raises no exceptions.</p>
</div>
</div>

<div class="div2">
<h3><a name="expr-eval" id="expr-eval" shape="rect"/>7.4 Evaluation Context</h3>

<p>Within XForms, XPath expressions reference abstract instance data (using
the "path" portion of XPath), instead of a concrete XML document. This
reference is called a <a title="binding expression" href="#def-binding-expression" shape="rect">binding expression</a> in this specification.
Every XPath expression requires an evaluation context. The following rules
are used in determining evaluation context when evaluating XPath expressions
as part of XForms:</p>
<ol type="1">
  <li><p>The context node for outermost binding elements is the top-level
    element node, or the single node returned by <code>/*</code>. A
    <b>binding element</b> is any element that is explicitly allowed to have
    a binding expression attribute. A binding element is "<b>outermost</b>"
    when the node-set returned by the XPath expression
    <code>ancestor::*</code> includes no binding element nodes.</p>
  </li>
  <li><p>The context node for non-outermost binding elements is the first
    node of the binding expression of the immediately enclosing element. An
    element is "<b>immediately enclosing</b>" when it is the first binding
    element node in the node-set returned by the XPath expression
    <code>ancestor::*</code>. This is also referred to as "scoped
    resolution".</p>
  </li>
  <li><p>The context node always resides within the context model, which is
    determined choosing the first item that applies from this list:</p>
    <ol type="a">
      <li><p>If a <code>model</code> attribute is present on the binding
        element, the attribute determines the context model.</p>
      </li>
      <li><p>If the binding element has an immediately enclosing binding
        element, the context model of the immediately enclosing binding
        element is used.</p>
      </li>
      <li><p>The first model in document order is used.</p>
      </li>
    </ol>
  </li>
  <li><p>The context node for computed expressions (occurring on element
    bind) is the node currently being processed.</p>
  </li>
  <li><p>For Single-Node binding expressions, the context size and position
    are 1. For Nodeset binding expressions, the context size is the size of
    the node-set, and the context position is the document order position of
    the node currently being processed within the node-set.</p>
  </li>
  <li><p>No variable bindings are in place.</p>
  </li>
  <li><p>The available function library is defined below, plus any functions
    supplied by the implementation. Extension functions required for
    operation of the form should be declared, as described at <a href="#expr-extension" shape="rect"><b>7.12 Extension Functions</b></a>.</p>
  </li>
  <li><p>Any namespace declarations in scope for the attribute that defines
    the expression are applied to the expression.</p>
  </li>
</ol>

<div class="exampleOuter">

<div class="exampleHead">
Example: Binding Expression Context Nodes</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;group ref="level2/level3"&gt;
  &lt;select1 ref="@attr" ... /&gt;
&lt;/group&gt;</pre>
</div>
</div>

<p>In this example, the <code>group</code> has a binding expression of
<code>level2/level3</code>. According to the rules above, this outermost
element node would have a context node of <code>/level1</code>, which is the
top-level element node of the instance data. The <code>select1</code> form
control then inherits a context node from the parent group. Matching instance
data, represented as serialized XML, follows:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Sample XML Instance Data</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;level1&gt;
  &lt;level2&gt;
    &lt;level3 attr="xyz"/&gt;
  &lt;/level2&gt;
&lt;/level1&gt;</pre>
</div>
</div>
</div>

<div class="div2">
<h3><a name="expr-binding-expression" id="expr-binding-expression" shape="rect"/>7.5
Binding Expressions</h3>

<p>A <a title="binding expression" href="#def-binding-expression" shape="rect">binding
expression</a> is an XPath PathExpr used in binding a <a title="model item property" href="#def-model-item-property" shape="rect">model item
property</a> to one or more instance nodes, or to bind a form control to
instance data, or to specify the node or node set for operation by an action.
By default, all binding expressions refer to the first instance within the
context model. This behavior can be changed with the <code>instance()</code>
function.</p>

<div class="div3">
<h4><a name="expr-dynamic-dependency" id="expr-dynamic-dependency" shape="rect"/>7.5.1
Dynamic Dependencies</h4>

<p id="defn-dynamic-dependency">Not every possible XPath expression is
acceptable as a binding expression. In particular, there are restrictions on
model binding expressions that create <b>dynamic dependencies</b>, which are
defined as follows:</p>

<p>An XPath predicate (in square brackets) is a possibly implicit boolean
test. A dynamic dependency exists on any predicate unless all terms in the
test are "fixed", where fixed means either a constant, or a value that will
not change between operations explicitly defined as rebuilding computational
dependencies.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>For purposes of determining dynamic dependencies, the following
subexpressions are considered fixed: <code>position()</code>,
<code>last()</code>, <code>count()</code>, and <code>property()</code>. This
is because the specification mandates a dependency rebuild after any event
that could change the values returned by these functions.</p>
</div>

<p>Another dynamic dependency is any use of the <code>id()</code> function,
unless both the parameter to the function and the matching attribute of type
<code>xsd:ID</code> are fixed. In the same way, the <code>instance()</code>
function is dynamic unless the parameter to the function is fixed.</p>

<p>XPath variables that change in value from one recalculate to the next
would also create dynamic dependencies (though XForms 1.0 defines an empty
variable context for all XPath expressions).</p>

<p>Authors that define extension functions are encouraged to follow these
rules.</p>
</div>

<div class="div3">
<h4><a name="expr-model-binding-expression" id="expr-model-binding-expression" shape="rect"/>7.5.2 Model Binding Expressions</h4>

<p>A <a title="model binding expression" href="#def-model-binding-expression" shape="rect">model binding expression</a> is a kind
of binding expression that can be used to declare model item properties, and
is used in attributes of the <code>bind</code> element.</p>

<p>Dynamic dependencies in model binding expressions will generally require
manual rebuilding of dependencies.</p>
</div>

<div class="div3">
<h4><a name="expr-ui-binding-expression" id="expr-ui-binding-expression" shape="rect"/>7.5.3 UI Binding Expressions</h4>

<p>Binding references can be used to bind form controls to the underlying
instance data as described here. Different attribute names, <code>ref</code>
and <code>nodeset</code> distinguish between a single node and a node-set
respectively. See <a href="#structure-attrs-single-node" shape="rect"><b>3.2.3 Single-Node
Binding Attributes</b></a> and <a href="#structure-attrs-nodeset" shape="rect"><b>3.2.4
Node-Set Binding Attributes</b></a>.</p>

<p>Dynamic dependences are allowed in UI binding expressions based on the
conformance profile.</p>
</div>

<div class="div3">
<h4><a name="ui-binding-foreign" id="ui-binding-foreign" shape="rect"/>7.5.4 UI Binding
in other XML vocabularies</h4>

<p>The XForms binding mechanism allows other XML vocabularies to bind user
interface controls to an XForms Model using any of the techniques shown here.
As an example, XForms binding attribute <code>bind</code> might be used
within XHTML 1.x user interface controls as shown below. See <a href="#structure-attrs-single-node" shape="rect"><b>3.2.3 Single-Node Binding
Attributes</b></a> and <a href="#structure-attrs-nodeset" shape="rect"><b>3.2.4 Node-Set
Binding Attributes</b></a>.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: XForms Binding In XHTML 1.x User Interface Controls</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;html:input type="text" name="..." xforms:bind="fn"/&gt;</pre>
</div>
</div>
</div>

<div class="div3">
<h4><a name="ui-binding-examples" id="ui-binding-examples" shape="rect"/>7.5.5 Binding
Examples</h4>

<p>Consider the following document with the one-and-only XForms model:</p>

<div class="exampleOuter">

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:model id="orders"&gt;
  &lt;xforms:instance xmlns=""&gt;
    &lt;orderForm&gt;
      &lt;shipTo&gt;
        &lt;firstName&gt;John&lt;/firstName&gt;
      &lt;/shipTo&gt;
    &lt;/orderForm&gt;
  &lt;/xforms:instance&gt;
  &lt;xforms:bind nodeset="/orderForm/shipTo/firstName" id="fn" /&gt;
&lt;/xforms:model&gt;</pre>
</div>
</div>

<p>The following examples show three ways of binding user interface control
<code>xforms:input</code> to instance element <code>firstName</code> declared
in the model shown above.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: UI Binding Using Attribute <code>ref</code></div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:input ref="/orderForm/shipTo/firstName"&gt;...</pre>
</div>
</div>

<div class="exampleOuter">

<div class="exampleHead">
Example: UI Binding Using Attribute <code>bind</code></div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:input bind="fn"&gt;...</pre>
</div>
</div>

<div class="exampleOuter">

<div class="exampleHead">
Example: Specifies Model Containing The Instance Explicitly</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:input model="orders" ref="/orderForm/shipTo/firstName"&gt;...</pre>
</div>
</div>
</div>
</div>

<div class="div2">
<h3><a name="expr-lib" id="expr-lib" shape="rect"/>7.6 XForms Core Function Library</h3>

<p>The XForms Core Function Library includes the entire <a href="#ref-xpath-1.0" shape="rect">[XPath 1.0]</a> Core Function Library, including
operations on node-sets, strings, numbers, and booleans.</p>

<p>These following sections define additional required functions for use
within XForms.</p>
</div>

<div class="div2">
<h3><a name="expr-lib-bool" id="expr-lib-bool" shape="rect"/>7.7 Boolean Functions</h3>

<div class="div3">
<h4><a name="fn-boolean-from-string" id="fn-boolean-from-string" shape="rect"/>7.7.1
The boolean-from-string() Function</h4>

<p><em>boolean</em> <b>boolean-from-string</b>(<var>string</var>)</p>

<p>Function <code>boolean-from-string</code> returns <code>true</code> if the
required parameter <code>string</code> is "true" or "1", or
<code>false</code> if parameter <code>string</code> is "false", or "0". This
is useful when referencing a Schema <code>xsd:boolean</code> datatype in an
XPath expression. If the parameter string matches none of the above strings,
according to a case-insensitive comparison, processing stops with an
exception (<a href="#evt-computeException" shape="rect"><b>4.5.4 The
xforms-compute-exception Event</b></a>).</p>
</div>

<div class="div3">
<h4><a name="fn-if" id="fn-if" shape="rect"/>7.7.2 The if() Function</h4>

<p><em>string</em> <b>if</b>(<var>boolean</var>, <var>string</var>,
<var>string</var>)</p>

<p>Function <code>if</code> evaluates the first parameter as boolean,
returning the second parameter when <code>true</code>, otherwise the third
parameter.</p>
</div>
</div>

<div class="div2">
<h3><a name="expr-lib-num" id="expr-lib-num" shape="rect"/>7.8 Number Functions</h3>

<div class="div3">
<h4><a name="fn-avg" id="fn-avg" shape="rect"/>7.8.1 The avg() Function</h4>

<p><em>number</em> <b>avg</b>(<var>node-set</var>)</p>

<p>Function <code>avg</code> returns the arithmetic average of the result of
converting the string-values of each node in the argument node-set to a
number. The sum is computed with <code>sum()</code>, and divided with
<code>div</code> by the value computed with <code>count()</code>. If the
parameter is an empty node-set, the return value is <code>NaN</code>.</p>
</div>

<div class="div3">
<h4><a name="fn-min" id="fn-min" shape="rect"/>7.8.2 The min() Function</h4>

<p><em>number</em> <b>min</b>(<var>node-set</var>)</p>

<p>Function <code>min</code> returns the minimum value of the result of
converting the string-values of each node in argument <code>node-set</code>
to a number. "Minimum" is determined with the <code>&lt;</code> operator. If
the parameter is an empty node-set, or if any of the nodes evaluate to
<code>NaN</code>, the return value is <code>NaN</code>.</p>
</div>

<div class="div3">
<h4><a name="fn-max" id="fn-max" shape="rect"/>7.8.3 The max() Function</h4>

<p><em>number</em> <b>max</b>(<var>node-set</var>)</p>

<p>Function <code>max</code> returns the maximum value of the result of
converting the string-values of each node in argument <code>node-set</code>
to a number. "Maximum" is determined with the <code>&lt;</code> operator. If
the parameter is an empty node-set, or if any of the nodes evaluate to
<code>NaN</code>, the return value is <code>NaN</code>.</p>
</div>

<div class="div3">
<h4><a name="fn-count-non-empty" id="fn-count-non-empty" shape="rect"/>7.8.4 The
count-non-empty() Function</h4>

<p><em>number</em> <b>count-non-empty</b>(<var>node-set</var>)</p>

<p>Function <code>count-non-empty</code> returns the number of non-empty
nodes in argument <code>node-set</code>. A node is considered non-empty if it
is convertible into a string with a greater-than zero length.</p>
</div>

<div class="div3">
<h4><a name="fn-index" id="fn-index" shape="rect"/>7.8.5 The index() Function</h4>

<p><em>number</em> <b>index</b>(<var>string</var>)</p>

<p>Function <code>index</code> takes a string argument that is the
<code>IDREF</code> of a <code>repeat</code> and returns the current 1-based
position of the repeat index for the identified <code>repeat</code>—see
<a href="#ui-repeat" shape="rect"><b>9.3.1 The repeat Element</b></a> for details on
<code>repeat</code> and its associated repeat index. If the specified
argument does not identify a <code>repeat</code>, processing stops with an
exception (<a href="#evt-computeException" shape="rect"><b>4.5.4 The
xforms-compute-exception Event</b></a>).</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: index</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:trigger&gt;
  &lt;xforms:label&gt;Add to Shopping Cart&lt;/xforms:label&gt;
  &lt;xforms:insert ev:event="DOMActivate" position="after"
                 nodeset="items/item" at="index('cartUI')"/&gt;
&lt;/xforms:trigger&gt;</pre>
</div>
</div>
</div>
</div>

<div class="div2">
<h3><a name="expr-lib-string" id="expr-lib-string" shape="rect"/>7.9 String
Functions</h3>

<div class="div3">
<h4><a name="fn-property" id="fn-property" shape="rect"/>7.9.1 <code>The property()
Function</code></h4>

<p><em>string</em> <b>property</b>(<var>string</var>)</p>

<p>Function <code>property</code> returns the XForms property named by the
string parameter.</p>

<p>The following properties are available for reading (but not
modification).</p>
<dl>
  <dt class="label">version</dt>
    <dd><p><code>version</code> is defined as the string "<code>1.0</code>"
      for XForms 1.0.</p>
    </dd>
  <dt class="label">conformance-level</dt>
    <dd><p><code>conformance-level</code> strings are defined in <a href="#conform" shape="rect"><b>12 Conformance</b></a>.</p>
    </dd>
</dl>

<div class="exampleOuter">

<div class="exampleHead">
Example: property</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:instance&gt;
  ...
  &lt;xforms:bind nodeset="message"
               calculate="concat( 'created with XForms ', property('version'))"/&gt; ...
&lt;/xforms:instance&gt;</pre>
</div>
</div>
</div>
</div>

<div class="div2">
<h3><a name="expr-lib-date" id="expr-lib-date" shape="rect"/>7.10 Date and Time
Functions</h3>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>The following XML Schema datatypes do not have specific functions for
manipulation within XForms expressions: <code>xsd:time</code>,
<code>xsd:gYearMonth</code>, <code>xsd:gYear</code>,
<code>xsd:gMonthDay</code>, <code>xsd:gDay</code>, <code>xsd:gMonth</code>.
Extension functions (<a href="#expr-extension" shape="rect"><b>7.12 Extension
Functions</b></a>) may be used to perform needed operations on these
datatypes.</p>
</div>

<div class="div3">
<h4><a name="fn-now" id="fn-now" shape="rect"/>7.10.1 The now() Function</h4>

<p><em>string</em> <b>now</b>()</p>

<p>The <code>now</code> function returns the current system date and time as
a string value in the canonical XML Schema <code>xsd:dateTime</code> format.
If time zone information is available, it is included (normalized to UTC). If
no time zone information is available, an implementation default is used.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Attaching a calculation of "<code>now()</code>" to an instance data node
would not result in a stream of continuous recalculations of the XForms
Model.</p>
</div>
</div>

<div class="div3">
<h4><a name="fn-get-duration-from-date" id="fn-get-duration-from-date" shape="rect"/>7.10.2 The days-from-date() Function</h4>

<p><em>number</em> <b>days-from-date</b>(<var>string</var>)</p>

<p>This function returns a whole number of days, according to the following
rules:</p>

<p>If the string parameter represents a legal lexical <code>xsd:date</code>
or <code>xsd:dateTime</code>, the return value is equal to the number of days
difference between the specified date and <code>1970-01-01</code>. Hour,
minute, and second components are ignored. Any other input parameter causes a
return value of <code>NaN</code>.</p>

<p>Examples:</p>

<blockquote>
  <p><code>days-from-date("2002-01-01")</code> returns <code>11688</code><br clear="none"/>
  <code>days-from-date("1969-12-31")</code> returns <code>-1</code></p>
</blockquote>
</div>

<div class="div3">
<h4><a name="fn-get-duration-from-dateTime" id="fn-get-duration-from-dateTime" shape="rect"/>7.10.3 The seconds-from-dateTime()
Function</h4>

<p><em>number</em> <b>seconds-from-dateTime</b>(<var>string</var>)</p>

<p>This function returns a possibly fractional number of seconds, according
to the following rules:</p>

<p>If the string parameter represents a legal lexical
<code>xsd:dateTime</code>, the return value is equal to the number of seconds
difference between the specified dateTime and
<code>1970-01-01T00:00:00Z</code>. If no time zone is specified, an
implementation default is used. Any other input string parameter causes a
return value of <code>NaN</code>.</p>
</div>

<div class="div3">
<h4><a name="fn-get-seconds-from-duration" id="fn-get-seconds-from-duration" shape="rect"/>7.10.4 The seconds() Function</h4>

<p><em>number</em> <b>seconds</b>(<var>string</var>)</p>

<p>This function returns a possibly fractional number of seconds, according
to the following rules:</p>

<p>If the string parameter represents a legal lexical
<code>xsd:duration</code>, the return value is equal to the number specified
in the seconds component plus 60 * the number specified in the minutes
component, plus 60 * 60 * the number specified in the hours component, plus
60 * 60 * 24 * the number specified in the days component. The sign of the
result will match the sign of the duration. If no time zone is specified, an
implementation default is used. Year and month components, if present, are
ignored. Any other input parameter causes a return value of
<code>NaN</code>.</p>

<p>Examples:</p>

<blockquote>
  <p><code>seconds("P1Y2M")</code> returns <code>0</code><br clear="none"/>
  <code>seconds("P3DT10H30M1.5S")</code> returns <code>297001.5</code><br clear="none"/>
  <code>seconds("3")</code> returns <code>NaN</code></p>
</blockquote>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Even though this function is defined based on a lexical
<code>xsd:duration</code>, it is intended for use only with
derived-from-<code>xsd:duration</code> datatypes, specifically
<code>xforms:dayTimeDuration</code>.</p>
</div>
</div>

<div class="div3">
<h4><a name="fn-get-months-from-duration" id="fn-get-months-from-duration" shape="rect"/>7.10.5 The months() Function</h4>

<p><em>number</em> <b>months</b>(<var>string</var>)</p>

<p>This function returns a whole number of months, according to the following
rules:</p>

<p>If the string parameter represents a legal lexical
<code>xsd:duration</code>, the return value is equal to the number specified
in the months component plus 12 * the number specified in the years
component. The sign of the result will match the sign of the duration. Day,
hour, minute, and second components, if present, are ignored. Any other input
parameter causes a return value of <code>NaN</code>.</p>

<p>Examples:</p>

<blockquote>
  <p><code>months("P1Y2M")</code> returns <code>14</code><br clear="none"/>
  <code>months("-P19M")</code> returns <code>-19</code></p>
</blockquote>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Even though this function is defined based on a lexical
<code>xsd:duration</code>, it is intended for use only with
derived-from-<code>xsd:duration</code> datatypes, specifically
<code>xforms:yearMonthDuration</code>.</p>
</div>
</div>
</div>

<div class="div2">
<h3><a name="expr-lib-nodset" id="expr-lib-nodset" shape="rect"/>7.11 Node-set
Functions</h3>

<div class="div3">
<h4><a name="fn-instance" id="fn-instance" shape="rect"/>7.11.1 The instance()
Function</h4>

<p><em>node-set</em> <b>instance</b>(<var>string</var>)</p>

<p>An XForms Model can contain more that one instance. This function allows
access to instance data, within the same XForms Model, but outside the
instance data containing the context node.</p>

<p>The argument is converted to a string as if by a call to the
<code>string</code> function. This string is treated as an IDREF, which is
matched against <code>instance</code> elements in the containing document. If
a match is located, and the matching instance data is associated with the
same XForms Model as the current context node, this function returns a
node-set containing just the root element node (also called the document
element node) of the referenced instance data. In all other cases, an empty
node-set is returned.</p>

<p>Example:</p>

<p>For instance data corresponding to this XML:</p>

<div class="exampleOuter">

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:instance xmlns="" id="orderform"&gt;
  &lt;orderForm&gt;
    &lt;shipTo&gt;
      &lt;firstName&gt;John&lt;/firstName&gt;
    &lt;/shipTo&gt;
  &lt;/orderForm&gt;
&lt;/xforms:instance&gt;</pre>
</div>
</div>

<p>The following expression selects the <code>firstName</code> node. Note
that the <code>instance</code> function returns an element node, effectively
replacing the leftmost location step from the path:</p>

<div class="exampleOuter">

<div class="exampleInner">
<pre xml:space="preserve">ref="instance('orderform')/shipTo/firstName"</pre>
</div>
</div>
</div>
</div>

<div class="div2">
<h3><a name="expr-extension" id="expr-extension" shape="rect"/>7.12 Extension
Functions</h3>

<p>XForms documents may use additional XPath extension functions beyond those
described here. A number of useful community extensions are defined at <a href="#ref-exslt" shape="rect">[EXSLT]</a>. The names of any such extension functions must
be declared in attribute <code>functions</code> on element
<code>model</code>. Such declarations are used by the XForms Processor to
check against available extension functions. XForms Processors perform this
check at the time the document is loaded, and stop processing by signaling an
exception (<a href="#evt-computeException" shape="rect"><b>4.5.4 The
xforms-compute-exception Event</b></a>) if the XForms document declares an
extension function for which the processor does not have an
implementation.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Explicitly declaring extension functions enables XForms Processors to
detect the use of unimplemented extension functions at document load-time,
rather than throwing a fatal error during user interaction. Failure by
authors to declare extension functions will result in an XForms Processor
potentially halting processing during user interaction with a fatal error.</p>
</div>
</div>
</div>

<div class="div1">
<h2><a name="controls" id="controls" shape="rect"/>8 Form Controls</h2>

<div class="div2">
<h3><a name="id2647690" id="id2647690" shape="rect"/>8.1 The XForms Form Controls
Module</h3>

<p><a title="form control" href="#def-form-control" shape="rect">Form controls</a> are
declared using markup elements, and their behavior refined via markup
attributes.</p>

<table border="1" summary="listing of XForms Core elements, attributes, and content models">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Element</th>
      <th colspan="1" rowspan="1">Attributes</th>
      <th colspan="1" rowspan="1">Minimal Content Model</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-input" shape="rect">input</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>,
        inputmode (xsd:string), incremental (xsd:boolean)</td>
      <td colspan="1" rowspan="1">label, (<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-secret" shape="rect">secret</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>,
        inputmode (xsd:string), incremental (xsd:boolean)</td>
      <td colspan="1" rowspan="1">label, (<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-textarea" shape="rect">textarea</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>,
        inputmode (xsd:string), incremental (xsd:boolean)</td>
      <td colspan="1" rowspan="1">label, (<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-output" shape="rect">output</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
        (optional), appearance
        ("full"|"compact"|"minimal"|xforms:QNameButNotNCNAME), value
        (XPathExpression)</td>
      <td colspan="1" rowspan="1">label?</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-upload" shape="rect">upload</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>,
        mediatype (xsd:string), incremental (xsd:boolean)</td>
      <td colspan="1" rowspan="1">label, filename?, mediatype?, (<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-range" shape="rect">range</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>, start
        (xsd:string), end (xsd:string), step (xsd:string), incremental
        (xsd:boolean)</td>
      <td colspan="1" rowspan="1">label, (<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-button" shape="rect">trigger</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
      (optional)</td>
      <td colspan="1" rowspan="1">label, (<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-submit" shape="rect">submit</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
        (optional), submission (xsd:IDREF)</td>
      <td colspan="1" rowspan="1">label, (<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-selectMany" shape="rect">select</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>,
        selection ("open" | "closed"), incremental (xsd:boolean)</td>
      <td colspan="1" rowspan="1">label, (<a title="" href="#elems-list-ui-common" shape="rect">List UI Common</a>)+, (<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-selectOne" shape="rect">select1</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>,
        selection ("open" | "closed"), incremental (xsd:boolean)</td>
      <td colspan="1" rowspan="1">label, (<a title="" href="#elems-list-ui-common" shape="rect">List UI Common</a>)+, (<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-common-elements-choices" shape="rect">choices</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a></td>
      <td colspan="1" rowspan="1">label?, (<a title="" href="#elems-list-ui-common" shape="rect">List UI Common</a>)+</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-common-elements-item" shape="rect">item</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a></td>
      <td colspan="1" rowspan="1">label, value, (<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-commonelems-filename" shape="rect">filename</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a></td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-commonelems-mediatype" shape="rect">mediatype</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a></td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-common-choices-value" shape="rect">value</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
      (optional)</td>
      <td colspan="1" rowspan="1">(PCDATA|ANY)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-commonelems-label" shape="rect">label</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
        (optional), <a title="" href="#structure-attrs-link" shape="rect">Linking</a></td>
      <td colspan="1" rowspan="1">(PCDATA|(<a title="" href="#elems-inline" shape="rect">UI Inline</a>))*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-commonelems-help" shape="rect">help</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
        (optional), <a title="" href="#structure-attrs-link" shape="rect">Linking</a></td>
      <td colspan="1" rowspan="1">(PCDATA|(<a title="" href="#elems-inline" shape="rect">UI Inline</a>))*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-commonelems-hint" shape="rect">hint</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
        (optional), <a title="" href="#structure-attrs-link" shape="rect">Linking</a></td>
      <td colspan="1" rowspan="1">(PCDATA|(<a title="" href="#elems-inline" shape="rect">UI Inline</a>))*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-common-elements-alert" shape="rect">alert</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
        (optional), <a title="" href="#structure-attrs-link" shape="rect">Linking</a></td>
      <td colspan="1" rowspan="1">(PCDATA|(<a title="" href="#elems-inline" shape="rect">UI Inline</a>))*</td>
    </tr>
  </tbody>
</table>

<p>See also: <a href="#ui-common-elements-itemset" shape="rect"><b>9.3.3 The itemset
Element</b></a>.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Unless bound to form controls, instance data nodes are not presented to
the user; consequently, there is no need for a form control corresponding to
HTML <code>input type="hidden"</code>.</p>
</div>

<p>The following attributes are common to many user-interface related XForms
elements, here called the <code>UI Common</code> attribute group.</p>

<table border="1" id="attrs-ui-common" summary="listing of XForms Common UI attributes">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Element</th>
      <th colspan="1" rowspan="1">Attributes</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">(various)</td>
      <td colspan="1" rowspan="1">appearance
        ("full"|"compact"|"minimal"|QName-but-not-NCName)</td>
    </tr>
  </tbody>
</table>
<dl>
  <dt class="label">appearance</dt>
    <dd><p>Optional attribute to define an appearance hint.</p>
    </dd>
</dl>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>A host language is expected to add attributes such as
<code>xml:lang</code> as well as an attribute, named <code>class</code>, that
holds a list of strings that can be matched by CSS class selectors.</p>

<p>Further, a host language must provide a way to indicate overall navigation
order among form controls and other elements included in the host language,
as well as keyboard or direct access navigation to specific elements. One
such proposal is to uses a pair of attributes named <code>navindex</code> and
<code>accesskey</code>, defined as follows:</p>
<dl>
  <dt class="label">navindex</dt>
    <dd><p>Optional attribute is a non-negative integer in the range of
      0-32767 used to define the navigation sequence. This gives the author
      control over the sequence in which <a title="form control" href="#def-form-control" shape="rect">form control</a>s are traversed. The default
      navigation order is specified in the chapter <a href="#rpm" shape="rect"><b>4
      Processing Model</b></a>.</p>
    </dd>
  <dt class="label">accesskey</dt>
    <dd><p>Optional attribute defines a shortcut for moving the input focus
      directly to a particular <a title="form control" href="#def-form-control" shape="rect">form control</a>. The value of this is a
      single character which when pressed together with a platform specific
      modifier key (e.g., the <em>alt</em> key) results in the focus being
      set to this <a title="form control" href="#def-form-control" shape="rect">form
      control</a>.</p>
      <p>The user agent must provide a means of identifying the accesskeys
      that can be used in a presentation. This may be accomplished in
      different ways by different implementations, for example through direct
      interaction with the application or via the user's guide. The accesskey
      requested by the author might not be made available by the player (for
      example it may not exist on the device used, or it may be used by the
      player itself). Therefore the user agent should make the specified key
      available, but may map the accesskey to a different interaction
      behavior.</p>
    </dd>
</dl>
</div>

<p>Additionally, this module defines the following content sets:</p>

<table border="1" summary="listing of XForms Core elements, attributes, and content models">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Content Set</th>
      <th colspan="1" rowspan="1">Minimal Content Model</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1" id="elems-ui-common"><b>UI Common</b></td>
      <td colspan="1" rowspan="1">(help|hint|alert|<a title="" href="#action-xmlevents" shape="rect">Action</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1" id="elems-list-ui-common"><b>List UI
        Common</b></td>
      <td colspan="1" rowspan="1">(choices|item|itemset)+</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1" id="elems-form-controls"><b>Form
        Controls</b></td>
      <td colspan="1" rowspan="1">(input|secret|textarea|output|upload|range|trigger|submit|select|select1)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1" id="elems-inline"><b>UI Inline</b></td>
      <td colspan="1" rowspan="1">(output)*</td>
    </tr>
  </tbody>
</table>

<p>As shown above, the XML Events module adds the Actions content set into
the UI Common content set. A host language should add inline markup to the
Inline content set. When the XForms Extension module is present, it too
should be included in the UI Common content set.</p>

<div class="div3">
<h4><a name="ui-processing" id="ui-processing" shape="rect"/>8.1.1 Implementation
Requirements Common to All Form Controls</h4>

<p>XForms user interface controls are bound to the underlying instance data
using <a title="binding" href="#def-binding" shape="rect">binding</a> attributes as
defined in the chapter <a href="#model" shape="rect"><b>6 Model Item
Properties</b></a>.</p>

<p>Form controls enable accessibility by taking a uniform approach to such
features as labels, help text, navigation, and keyboard shortcuts.
Internationalization issues are addressed by following the same design
principles as in XHTML. All form controls are suitable for styling as aural
or visual media.</p>

<p>Form controls encapsulate high-level semantics without sacrificing the
ability to deliver real implementations. For instance, the form control
<code>select</code> enables the user to <em>select items from a set</em>.
These form controls distinguish the functional aspects of the underlying
control from the presentational and behavioral aspects. This separation
enables the expression of the intent underlying a particular form
control—see <a href="#aui-conversational-gestures" shape="rect">[AUI97]</a> for a
definition of such high-level user interaction primitives.</p>

<p>Form controls when rendered display the underlying data values to which
they are bound. While the data presented to the user through a form control
must directly correspond to the bound instance data, the display
representation is not required to match the lexical value. For example, user
agents should apply appropriate conventions to the display of dates, times,
durations and numeric values including separator characters.</p>

<p>All form controls must meet the following implementation requirements:</p>
<ul>
  <li><p>Form controls that write simpleContent to instance data must do so
    exactly as defined by the XForms Action <a href="#action-setvalue" shape="rect"><b>10.1.9 The setvalue Element</b></a></p>
  </li>
  <li><p>All form controls that read simpleContent instance data must do so
    as follows:</p>
    <ul>
      <li><p>Element nodes: if text child nodes are present, returns the
        string-value of the first text child node. Otherwise, returns "" (the
        empty string)</p>
      </li>
      <li><p>Attribute nodes: returns the string-value of the node.</p>
      </li>
      <li><p>Text nodes: returns the string-value of the node.</p>
      </li>
      <li><p>Namespace, processing instruction, comment, and the XPath root
        node: behavior is undefined.</p>
      </li>
    </ul>
  </li>
  <li><p>Form controls must distinguish rendering between valid and invalid
    states. Control of this behavior should be made available to
    stylesheets.</p>
  </li>
  <li><p>Form controls must indicate when the bound instance data contains a
    value the form control is not capable of rendering. Control of this
    behavior should be made available to stylesheets.</p>
  </li>
  <li><p>Form controls must render upon request an explanation of the current
    state of a form control, including validity and associated model item
    properties. Control of this behavior should be made available to
    stylesheets.</p>
  </li>
  <li><p>Form controls must provide a default explanation for the above when
    no user-specified explanation is available.</p>
  </li>
</ul>

<p>Sections in this chapter define the various form controls by specifying
the following:</p>

<blockquote>
  <p>Description<br clear="none"/>
  Common Attributes<br clear="none"/>
  Special Attributes<br clear="none"/>
  Examples<br clear="none"/>
  Data Binding Restrictions<br clear="none"/>
  Implementation Requirements</p>
</blockquote>
</div>

<div class="div3">
<h4><a name="ui-input" id="ui-input" shape="rect"/>8.1.2 The input Element</h4>

<p>Description: This form control enables free-form data entry.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node UI Binding</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">inputmode</dt>
    <dd><p>This form control accepts an input mode hint. <a href="#mode" shape="rect"><b>E
      Input Modes</b></a>.</p>
    </dd>
  <dt class="label">incremental</dt>
    <dd><p>when <code>true</code>, this form control will generate additional
      <code>xforms-value-changed</code> events. The default value for this
      attribute is <code>false</code>.</p>
    </dd>
</dl>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleInner">
<pre xml:space="preserve">&lt;input ref="order/shipTo/street" class="streetAddress"&gt;
  &lt;label&gt;Street&lt;/label&gt;
  &lt;hint&gt;Please enter the number and street name&lt;/hint&gt;
&lt;/input&gt;</pre>
</div>
</div>

<p>In the above, the <code>class</code> attribute can be used by a style
sheet to specify the display size of the form control. Note that the
constraints on how much text can be input are obtained from the underlying
XForms Model definition and not from these display properties.</p>

<p>A graphical browser might render the above example as follows:</p>

<p><img src="images/ui-input.png" alt="An average-looking text entry form control. The label, 'Street' has been aligned to the left"/></p>

<p>Data Binding Restrictions: Binds to any simpleContent (except
<code>xsd:base64Binary</code>, <code>xsd:hexBinary</code> or any datatype
derived from these).</p>

<p>Implementation Requirements: Must allow entry of a lexical value for the
bound datatype. Implementations should provide a convenient means for entry
of datatypes and take into account localization and internationalization
issues such as representation of numbers. For example, an <code>input</code>
bound to an instance data node of type <code>xsd:date</code> might provide a
calendar control to enter dates; similarly, an input control bound to of type
<code>boolean</code> might be rendered as a checkbox.</p>

<div class="exampleOuter">

<div class="exampleInner">
<pre xml:space="preserve">&lt;input ref="order/shipDate"&gt;
  &lt;label&gt;Ship By&lt;/label&gt;
  &lt;hint&gt;Please specify the ship date for this order.&lt;/hint&gt;
&lt;/input&gt;</pre>
</div>
</div>

<p>A graphical browser might render the above example as follows:</p>

<p><img src="images/calendar-picker-closed.png" alt="A text box for a date control, with a button to open into a calendar."/></p>

<p>The user can type a date into the text edit box, or press the button to
open a calendar:</p>

<p><img src="images/calendar-picker-open.png" alt="A calendar picker graphical widget."/></p>
</div>

<div class="div3">
<h4><a name="ui-secret" id="ui-secret" shape="rect"/>8.1.3 The secret Element</h4>

<p>Description: This form control is used to provide the user with the
ability to supply information to the system in a manner that makes it
difficult for someone, other than the user, who may be observing the process
to discern the value that is being supplied. A common use is for password
entry.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">inputmode</dt>
    <dd><p>This form control accepts an input mode hint. <a href="#mode" shape="rect"><b>E
      Input Modes</b></a>.</p>
    </dd>
  <dt class="label">incremental</dt>
    <dd><p>when <code>true</code>, this form control will generate additional
      <code>xforms-value-changed</code> events. The default value for this
      attribute is <code>false</code>.</p>
    </dd>
</dl>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Password Entry</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;secret ref="/login/password"&gt;
  &lt;label&gt;Password&lt;/label&gt;
  &lt;hint&gt;The password you enter will not be displayed.&lt;/hint&gt;
&lt;/secret&gt;</pre>
</div>
</div>

<p>A graphical browser might render this form control as follows:</p>

<p><img src="images/ui-secret-with-hint.png" alt="A password entry form control, with '*' characters where the text would be expected and a hint box displaying hint text."/></p>

<p>Data Binding Restrictions: Identical to <code>input</code>.</p>

<p>Implementation Requirements: Implementations, including accessibility
aids, must obscure the value being entered into this form control. One
possible approach would be to render a "*" or similar character instead of
the actual characters entered. Note that this provides only a casual level of
security; truly sensitive information will require additional security
measures outside the scope of XForms.</p>
</div>

<div class="div3">
<h4><a name="ui-textarea" id="ui-textarea" shape="rect"/>8.1.4 The textarea Element</h4>

<p>Description: This form control enables free-form data entry and is
intended for use in entering multiline content, e.g., the body of an email
message.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">inputmode</dt>
    <dd><p>This form control accepts an input mode hint. <a href="#mode" shape="rect"><b>E
      Input Modes</b></a>.</p>
    </dd>
  <dt class="label">incremental</dt>
    <dd><p>when <code>true</code>, this form control will generate additional
      <code>xforms-value-changed</code> events. The default value for this
      attribute is <code>false</code>.</p>
    </dd>
</dl>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Email Message Body</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;textarea ref="message/body" class="messageBody"&gt;
  &lt;label&gt;Message Body&lt;/label&gt;
  &lt;hint&gt;Enter the text of your message here&lt;/hint&gt;
&lt;/textarea&gt;</pre>
</div>
</div>

<p>In the above, the <code>class</code> attribute can be used by a style
sheet to specify the display size of the form control. Note that the
constraints on how much text can be input are obtained from the underlying
XForms Model definition and not from these display properties.</p>

<p>A graphical browser might render the above example as follows:</p>

<p><img src="images/ui-textarea.png" alt="A larger-than-average text entry form control. The title, 'Message Body:' provides an additional hint that large amounts of text are allowed here."/></p>

<p>Data Binding Restrictions: Binds to <code>xsd:string</code> or any derived
simpleContent.</p>

<p>Implementation Requirements: Must allow entry of a lexical value for the
bound datatype, including multiple lines of text.</p>
</div>

<div class="div3">
<h4><a name="ui-output" id="ui-output" shape="rect"/>8.1.5 The output Element</h4>

<p>Description: This form control renders a value from the instance data, but
provides no means for entering or changing data. It is used to display values
from the instance, and is treated as <code>display:inline</code> for purposes
of layout. Element <code>output</code> can be used to display the value at a
particular location in the instance by using a binding expression; it can
also be used to display the result of evaluating an XPath expression by
specifying the XPath expression to be evaluated via attribute
<code>value</code> instead of <code>ref</code>. Note that attributes
<code>ref</code> and <code>value</code> on element <code>output</code> are
mutually exclusive.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
(optional)</p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">appearance</dt>
    <dd><p>This form control does not use the UI Common attribute group, but
      nevertheless still contains an appearance attribute, as defined
      above.</p>
    </dd>
  <dt class="label">value</dt>
    <dd><p>An XPath expression to be evaluated. The result of the evaluation
      is rendered by the form control. If binding attributes are present to
      select a node, this attribute has no effect. The XPath expression is
      re-evaluated whenever there is a change in any node that the expression
      refers to.</p>
    </dd>
</dl>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Explanatory Message</div>

<div class="exampleInner">
<pre xml:space="preserve">I charged you -
&lt;output ref="order/totalPrice"/&gt;
- and here is why:</pre>
</div>
</div>

<p>A graphical browser might render an output form control as follows:</p>

<p><img src="images/ui-output.png" alt="Average-looking text, reading 'I charged you 100.0 - and here is why:'"/></p>

<p>Data Binding Restrictions: Binds to any simpleContent.</p>

<p>Implementation Requirements: Must allow display of a lexical value for the
bound datatype. Implementations should provide a convenient means for display
of datatypes and take into account localization and internationalization
issues such as representation of numbers.</p>
</div>

<div class="div3">
<h4><a name="ui-upload" id="ui-upload" shape="rect"/>8.1.6 The upload Element</h4>

<p>Description: This form control enables the common feature found on Web
sites to upload a file from the local file system, as well as accepting input
from various devices including microphones, pens, and digital cameras.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">mediatype</dt>
    <dd><p>Space-separated list of suggested media types, used by the XForms
      Processor to determine the possible sources of data to upload.</p>
    </dd>
  <dt class="label">incremental</dt>
    <dd><p>When <code>true</code>, this form control will generate additional
      <code>xforms-value-changed</code> events. The default for this form
      control is <code>false</code>.</p>
    </dd>
</dl>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Uploading An Image</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;upload ref="mail/attachment" mediatype="image/*"&gt;
  &lt;label&gt;Select image:&lt;/label&gt;
  &lt;filename ref="@filename" /&gt;
  &lt;mediatype ref="@mediatype" /&gt;
&lt;/upload&gt;</pre>
</div>
</div>

<p>A graphical browser might render this form control as follows:</p>

<p><img src="images/ui-upload.png" alt="A drop-down box; main display reads 'Select Image:' with a cute icon. The drop-down itself has three items: (icon)-From Scanner or Camera...; (icon)-Scribble...; Browse..."/></p>

<p>Implementation Requirements:</p>
<ul>
  <li><p>On activation, if child element <code>filename</code> is present and
    a filename is available, <code>upload</code> places the filename of the
    data to upload in the instance at the node indicated by the binding
    attributes on child element <code>filename</code>.</p>
  </li>
  <li><p>On activation, if child element <code>mediatype</code> is present
    and a mediatype is available, <code>upload</code> places the mediatype of
    the data to upload in the instance at the node indicated by the binding
    attributes on child element <code>mediatype</code>.</p>
  </li>
</ul>

<p>Data Binding Restrictions: This form control can only be bound to
datatypes <code>xsd:anyURI</code>, <code>xsd:base64Binary</code> or
<code>xsd:hexBinary</code>, or types derived by restriction from these.</p>

<p>Implementation Requirements: For base64Binary or hexBinary data
binding:</p>
<ul>
  <li><p>When bound to an instance data node of type
    <code>xsd:base64binary</code>, <code>xsd:hexBinary</code>, or a type
    derived by restriction thereof, on activation <code>upload</code> places
    the binary content in the content of the node with the indicated
    encoding.</p>
  </li>
</ul>

<p>Implementation Requirements: For anyURI data binding:</p>
<ul>
  <li><p>When bound to an instance data node of type <code>xsd:anyURI</code>
    (or a type derived by restriction thereof), on activation
    <code>upload</code> places a URI in the content of the node.</p>
    <p>For security reasons, the XForms Processor must not dereference the
    URI bound to this form control without explicit user permission.</p>

    <div class="note">
    <p class="prefix"><b>Note:</b></p>
    <p>Implementors note that <code>upload</code> must associate the binary
    content, mediatype, and filename with that URI for <a href="#serialize-multipart" shape="rect"><b>11.4 Serialization as
    multipart/related</b></a> and <a href="#serialize-form-data" shape="rect"><b>11.5
    Serialization as multipart/form-data</b></a> serialization.</p>
    </div>
  </li>
</ul>
<ul>
  <li><p>Implementations with a file system should support <em>file
    upload</em>—selecting a specific file. The types of files presented
    by default should reflect the mediatype specified by attribute
    <code>mediatype</code>, for example defaulting to only audio file types
    in the file dialog when the mediatype is "audio/*".</p>
  </li>
</ul>

<p>Implementation Requirements: For all data bindings:</p>
<ul>
  <li><p>Implementations with specific pen/digitizer hardware should (and
    implementations with other pointing devices may) support
    <em>scribble</em>—allowing in-place creation of pen-based data.</p>
  </li>
  <li><p>Implementations with specific audio recording capabilities should
    support <em>record audio</em>—in-place recording of an audio
    clip.</p>
  </li>
  <li><p>Implementations with a digital camera, scanner interface or screen
    capture should support <em>acquire image</em>—in-place upload of
    images from an attached device.</p>
  </li>
  <li><p>Implementations with video recording capability should provide a
    <em>record video</em> option.</p>
  </li>
  <li><p>Implementations with 3d capabilities should provide a 3d interface
    option.</p>
  </li>
  <li><p>Implementations may provide proprietary implementations (for
    example, a mediatype of <code>text/rtf</code> could invoke an edit window
    with a proprietary word processing application)</p>
  </li>
  <li><p>Implementations are encouraged to support other input devices not
    mentioned here.</p>
  </li>
  <li><p>Implementations which cannot support upload for the given mediatype
    must make this apparent to the user.</p>
  </li>
</ul>

<p>See the child elements <code>filename</code> <a href="#ui-commonelems-filename" shape="rect"><b>8.3.1 The filename Element</b></a> and
<code>mediatype</code> <a href="#ui-commonelems-mediatype" shape="rect"><b>8.3.2 The
mediatype Element</b></a>.</p>
</div>

<div class="div3">
<h4><a name="ui-range" id="ui-range" shape="rect"/>8.1.7 The range Element</h4>

<p>Description: This form control allows selection from a sequential range of
values.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">start</dt>
    <dd><p>Optional hint for the lexical starting bound for the range—a
      legal value for the underlying data. If provided, this value is used to
      further refine the constraints specified by the underlying model.</p>
    </dd>
  <dt class="label">end</dt>
    <dd><p>Optional hint for the ending bound for the range—a legal
      value for the underlying data. If provided, this value is used to
      further refine the constraints specified by the underlying model.</p>
    </dd>
  <dt class="label">step</dt>
    <dd><p>Optional value to use for incrementing or decrementing the value.
      Must be of a type capable of expressing the difference between two
      legal values of the underlying data.</p>
    </dd>
  <dt class="label">incremental</dt>
    <dd><p>When <code>true</code>, this form control will generate additional
      <code>xforms-value-changed</code> events. The default for this form
      control is <code>false</code>.</p>
    </dd>
</dl>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Picking From A Range</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;range ref="/stats/balance" start="-2.0" end="2.0" step="0.5"&gt;
  &lt;label&gt;Balance&lt;/label&gt;
&lt;/range&gt;</pre>
</div>
</div>

<p>A graphical browser might render this as follows:</p>

<p><img src="images/ui-range.png" alt="a slider control, from -2 to +2"/></p>

<p>Data Binding Restrictions: Binds only the following list of datatypes, or
datatypes derived by restriction from those in the list:
<code>xsd:duration</code>, <code>xsd:date</code>, <code>xsd:time</code>,
<code>xsd:dateTime</code>, <code>xsd:gYearMonth</code>,
<code>xsd:gYear</code>, <code>xsd:gMonthDay</code>, <code>xsd:gDay</code>,
<code>xsd:gMonth</code>, <code>xsd:float</code>, <code>xsd:decimal</code>,
<code>xsd:double</code>.</p>

<p>Implementation Requirements: Must allow input of a value corresponding to
the bound datatype. Implementations should inform the user of the upper and
lower bounds, as well as the step size, if any. If the instance data value is
outside the upper or lower bounds, this form control must indicate an
out-of-range condition. In graphical environments, this form control may be
rendered as a "slider" or "rotary control".</p>

<p>Notice that the attributes of this element encapsulate sufficient metadata
that in conjunction with the type information available from the XForms Model
proves sufficient to produce meaningful prompts when using modalities such as
speech, e.g., when using an accessibility aid. Thus, in the example below, an
aural user agent might speak a prompt of the form <em>Please pick a date in
the range January 1, 2001 through December 31, 2001.</em></p>

<p>In the event of overlapping restrictions between the underlying datatype
and the <code>start</code> and <code>end</code> hints, the most restrictive
range should be used.</p>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Picking a date from a range</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;range ref="/order/shipDate" start="2001-01-01" end="2001-12-31"&gt;
  &lt;label&gt;Ship Date&lt;/label&gt;
&lt;/range&gt;</pre>
</div>
</div>
</div>

<div class="div3">
<h4><a name="ui-button" id="ui-button" shape="rect"/>8.1.8 The trigger Element</h4>

<p>Description: This form control is similar to the HTML element
<code>button</code> and allows for user-triggered actions. This form control
may also be used to construct other custom form controls.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a> (optional)</p>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Simple Trigger</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;trigger&gt;
  &lt;label&gt;Click here&lt;/label&gt;
&lt;/trigger&gt;</pre>
</div>
</div>

<p>Data Binding Restrictions: Binds to any node. This form control does not
directly interact with form data, but is affected by model item properties of
the bound node, thus binding attributes are not required.</p>

<p>Implementation Requirements: The user agent must provide a means to
generate an <code>DOMActivate</code> event on the form control. Graphical
implementations might render this form control as a push-button with the
label on the button face. Style sheets can be used to style this form control
as an image, hyperlink, or other presentation.</p>
</div>

<div class="div3">
<h4><a name="ui-submit" id="ui-submit" shape="rect"/>8.1.9 The submit Element</h4>

<p>Description: This form control initiates submission of all or part of the
instance data to which it is bound.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a> (optional)</p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">submission</dt>
    <dd><p>Required reference to element <code>submission</code>.</p>
    </dd>
</dl>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Submit</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;submit submission="timecard"&gt;
  &lt;label&gt;Submit Timecard&lt;/label&gt;
&lt;/submit&gt;</pre>
</div>
</div>

<p>Data Binding Restrictions: Binds to any node. This form control does not
directly interact with form data, but is affected by model item properties of
the bound node, thus binding attributes are not required.</p>

<p>Implementation Requirements: Upon receiving event
<code>DOMActivate</code>, this form control dispatches event
<code>xforms-submit</code> to the <code>submission</code> element specified
by required attribute <code>submission</code>. Upon activation, this control
must become unavailable for further activations until the submit process
concludes with either an <code>xforms-submit-done</code> or
<code>xforms-submit-error</code> event.</p>
</div>

<div class="div3">
<h4><a name="ui-selectMany" id="ui-selectMany" shape="rect"/>8.1.10 The select
Element</h4>

<p>Description: This form control allows the user to make multiple selections
from a set of choices.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">selection</dt>
    <dd><p>Optional attribute determining whether free entry is allowed in
      the list. Default is "closed".</p>
    </dd>
  <dt class="label">incremental</dt>
    <dd><p>When <code>true</code>, this form control will generate additional
      <code>xforms-value-changed</code> events. The default for this form
      control is <code>true</code>.</p>
    </dd>
</dl>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Selecting Ice Cream Flavor</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;select ref="my:flavors"&gt;
  &lt;label&gt;Flavors&lt;/label&gt;
  &lt;choices&gt;
    &lt;item&gt;
      &lt;label&gt;Vanilla&lt;/label&gt;
      &lt;value&gt;v&lt;/value&gt;
    &lt;/item&gt;
    &lt;item&gt;
      &lt;label&gt;Strawberry&lt;/label&gt;
      &lt;value&gt;s&lt;/value&gt;
    &lt;/item&gt;
    &lt;item&gt;
      &lt;label&gt;Chocolate&lt;/label&gt;
      &lt;value&gt;c&lt;/value&gt;
    &lt;/item&gt;
  &lt;/choices&gt;
&lt;/select&gt;</pre>
</div>
</div>

<p>In the above example, more than one flavor can be selected.</p>

<p>A graphical browser might render form control <code>select</code> as any
of the following:</p>

<table border="1" summary="Selection controls">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1"><code>appearance="full"</code></th>
      <th colspan="1" rowspan="1"><code>appearance="compact"</code></th>
      <th colspan="1" rowspan="1"><code>appearance="minimal"</code></th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><img src="images/ui-selectMany-checkbox.png" alt="checkboxes, Vanilla, Strawberry, and Chocolate; Strawberry and Chocolate selected"/></td>
      <td colspan="1" rowspan="1"><img src="images/ui-selectMany-listbox.png" alt="list-box; Vanilla, Strawberry, and Chocolate visible; Strawberry and Chocolate selected"/></td>
      <td colspan="1" rowspan="1"><img src="images/menu.png" alt="A popup menu with three choices, 'Strawberry', 'Vanilla', and 'Chocolate'. The last two are checked."/></td>
    </tr>
  </tbody>
</table>

<p>Typically, a style sheet would be used to determine the exact appearance
of form controls, though a means is provided to suggest an appearance through
attribute <code>appearance</code>. The value of the attribute consists of one
of the following values:</p>

<blockquote>
  <p>"full": all choices should be rendered at all times.<br clear="none"/>
  "compact": a fixed number of choices should be rendered, with scrolling
  facilities as needed<br clear="none"/>
  "minimal": a minimum number of choices should be rendered, with a facility
  to temporarily render additional choices</p>
</blockquote>

<p>Data Binding Restrictions: any simpleContent capable of holding a
sequence. The restriction to binding simpleContent exists when the choices
are authored as part of the user interface control as shown in this section.
Element <code>itemset</code> for creating dynamic selections described in <a href="#ui-common-elements-itemset" shape="rect"><b>9.3.3 The itemset Element</b></a>
allows the available choices to be obtained from an XForms Model, and when
using that construct, the data binding restriction to simpleContent is
relaxed.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>A limitation of the XML Schema list datatypes is that white space
characters in the storage values (the <code>value</code> element) are always
interpreted as separators between individual data values. Therefore, authors
should avoid using white space characters within storage values with list
simpleContent.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Incorrect Type Declaration</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;item&gt;
  &lt;value&gt;United States of America&lt;/value&gt;
  ...
&lt;/item&gt;</pre>
</div>
</div>

<p>When selected, this item would introduce not one but four additional
selection values: "America", "of", "States", and "United".</p>
</div>

<p>Implementation Requirements: The label for each choice must be presented,
allowing at any number of selections, possibly none. This form control stores
the values corresponding to the selected choices as a space separated list in
the location addressed by attribute <code>ref</code>. The values to be stored
are either directly specified as the contents of element <code>value</code>,
or specified indirectly through binding attributes on element
<code>value</code>.</p>

<p>Note that the datatype bound to this form control may include a
non-enumerated value space, e.g., <code>xsd:string</code>, or a union of a
enumeration and a non-enumerated datatype (called an open enumeration). In
this case, control <code>select</code> may have attribute
<code>selection="open"</code>. The form control should then allow free data
entry, as described in <a href="#ui-input" shape="rect"><b>8.1.2 The input
Element</b></a>. The form control may permit multiple values to be entered
through free entry.</p>

<p>For closed selections: If the initial instance value matches the storage
value of one or more of the given items, those items are selected. If there
is no match, no items are initially selected. If any selected values do not
have a choice with a matching storage value, the form control must indicate
an out-of-range condition.</p>

<p>For open selections: If the initial instance values match the storage
value specified by one or more of the items, the all such matching items are
selected. If the initial instance values do not match the storage value
specified by one or more of the items, all such non-matching items are
included as selected values, as if entered through free entry. Free entry
text is handled the same as form control <code>input</code> <a href="#ui-input" shape="rect"><b>8.1.2 The input Element</b></a>, possibly in
multiplicity. When using dynamic selections with complexTypes, open selection
has no effect.</p>

<p>Implementation Hints: An accessibility aid might allow the user to browse
through the available choices and leverage the grouping of choices in the
markup to provide enhanced navigation through long lists of choices.</p>
</div>

<div class="div3">
<h4><a name="ui-selectOne" id="ui-selectOne" shape="rect"/>8.1.11 The select1
Element</h4>

<p>Description: This form control allows the user to make a single selection
from multiple choices.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">selection</dt>
    <dd><p>Optional attribute determining whether free entry is allowed in
      the list. Default is "closed".</p>
    </dd>
  <dt class="label">incremental</dt>
    <dd><p>When <code>true</code>, this form control will generate additional
      <code>xforms-value-changed</code> events. The default for this form
      control is <code>true</code>.</p>
    </dd>
</dl>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Pick A Flavor</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;select1 ref="my:flavor"&gt;
  &lt;label&gt;Flavor&lt;/label&gt;
  &lt;item&gt;
    &lt;label&gt;Vanilla&lt;/label&gt;
    &lt;value&gt;v&lt;/value&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;label&gt;Strawberry&lt;/label&gt;
    &lt;value&gt;s&lt;/value&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;label&gt;Chocolate&lt;/label&gt;
    &lt;value&gt;c&lt;/value&gt;
  &lt;/item&gt;
&lt;/select1&gt;</pre>
</div>
</div>

<p>In the above example, selecting one of the choices will result in the
associated value given by element <code>value</code> on the selected item
being set in the underlying instance data at the location
<code>icecream/flavor</code>.</p>

<p>A graphical browser might render this form control as any of the
following:</p>

<table summary="Selection controls">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">appearance="full"</th>
      <th colspan="1" rowspan="1">appearance="compact"</th>
      <th colspan="1" rowspan="1">appearance="minimal"</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><img src="images/ui-selectOne-radio.png" alt="radio buttons, Vanilla, Strawberry, Chocolate; Strawberry is selected"/></td>
      <td colspan="1" rowspan="1"><img src="images/ui-selectOne-listbox.png" alt="a list control, Vanilla, Strawberry, and Chocolate visible; Strawberry selected"/></td>
      <td colspan="1" rowspan="1"><img src="images/ui-selectOne-pulldown.png" alt="a collapsed pull-down list; Vanilla is selected"/></td>
    </tr>
  </tbody>
</table>

<p>Data Binding Restrictions: Binds to any simpleContent. The restriction to
binding simpleContent exists when the choices are authored as part of the
user interface control as shown in this section. Element <code>itemset</code>
for creating dynamic selections described in <a href="#ui-common-elements-itemset" shape="rect"><b>9.3.3 The itemset Element</b></a>
allows the available choices to be obtained from an XForms Model, and when
using that construct, the data binding restriction to simpleContent is
relaxed.</p>

<p>Implementation Requirements: The label for each choice must be presented,
allowing at all times exactly one selection. This form control stores the
value corresponding to the selected choice in the location addressed by
attribute <code>ref</code>. The value to be stored is either directly
specified as the contents of element <code>value</code>, or specified
indirectly through binding attributes on element <code>value</code>.</p>

<p>Note that the datatype bound to this form control may include a
non-enumerated value space, e.g., <code>xsd:string</code>, or a union of a
enumeration and a non-enumerated datatype (called an open enumeration). In
this case, control <code>select1</code> may have attribute
<code>selection="open"</code>. The form control should then allow free data
entry, as described in <a href="#ui-input" shape="rect"><b>8.1.2 The input
Element</b></a>.</p>

<p>For closed selections: If the initial instance value matches the storage
value of one of the given items, that item is selected. If there is no match,
the form control must indicate an out-of-range condition..</p>

<p>For open selections: If the initial instance value matches the storage
value specified by one of the items, the first such matching item is
selected. Otherwise, the selected value is the initial lexical value. Free
entry text is handled the same as form control <code>input</code> <a href="#ui-input" shape="rect"><b>8.1.2 The input Element</b></a>.</p>

<p>User interfaces may choose to render this form control as a pulldown list
or group of radio buttons, among other options. The <code>appearance</code>
attribute offers a hint as to which rendering might be most appropriate,
although any styling information (such as CSS) should take precedence.</p>
</div>
</div>

<div class="div2">
<h3><a name="ui-commonelem" id="ui-commonelem" shape="rect"/>8.2 Common Markup for
Selection Controls</h3>

<div class="div3">
<h4><a name="ui-common-elements-choices" id="ui-common-elements-choices" shape="rect"/>8.2.1 The choices Element</h4>

<p>This element is used within selection form controls to group available
choices. This provides the same functionality as element
<code>optgroup</code> in HTML.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a></p>
</div>

<div class="div3">
<h4><a name="ui-common-elements-item" id="ui-common-elements-item" shape="rect"/>8.2.2
The item Element</h4>

<p>This element specifies the storage value and label to represent an item in
a list. It is found within elements <code>select1</code> and
<code>select</code>, or grouped in element <code>choices</code>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a></p>
</div>

<div class="div3">
<h4><a name="ui-common-choices-value" id="ui-common-choices-value" shape="rect"/>8.2.3
The value Element</h4>

<p>This element provides a storage value to be used when an <code>item</code>
is selected.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
(optional)</p>

<p>Data Binding Restriction: All lexical values must be valid according to
the datatype bound to the selection control.</p>

<p>If inline content and a <code>ref</code> attribute are both specified, the
<code>ref</code> attribute is used.</p>
</div>
</div>

<div class="div2">
<h3><a name="ui-commonelems" id="ui-commonelems" shape="rect"/>8.3 Additional
Elements</h3>

<p>The child elements detailed below provide the ability to attach metadata
to form controls.</p>

<p>Instead of supplying such metadata e.g., the label for a form control as
inline content of the contained element <code>label</code>, the metadata can
be pointed to by using a simple linking attribute <code>src</code> on these
elements. Notice that systematic use of this feature can be exploited in
internationalizing XForms user interfaces by:</p>
<ul>
  <li><p>Factoring all human readable messages to a separate resource XML
    file.</p>
  </li>
  <li><p>Using URIs into this XML resource bundle within individual
    <code>label</code> elements</p>
  </li>
  <li><p>Finally, an XForms implementation could use content negotiation to
    obtain the appropriate XML resource bundle, e.g., based on the
    <code>accept-language</code> headers from the client, to serve up the
    user interface with messages localized to the client's locale.</p>
  </li>
</ul>

<div class="div3">
<h4><a name="ui-commonelems-filename" id="ui-commonelems-filename" shape="rect"/>8.3.1
The filename Element</h4>

<p>Binding attributes on optional element <code>filename</code> specify the
location in the instance for the parent element <code>upload</code>, when
activated, to place the filename for the chosen binary resource. For security
reasons, <code>upload</code> must not take action due to any existing value
of the node.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a></p>

<p>In the following example, the user is prompted to select an image. When
activated, <code>upload</code> places in <code>mail/attachment</code> either
the binary data of the image or a URI for it, depending on the type declared
for the <code>mail/attachment</code>. The filename, perhaps
"<code>me.jpg</code>", is placed in the attribute node
<code>mail/attachment@filename</code>, and the mediatype, perhaps
"<code>image/jpeg</code>" in the attribute node
<code>mail/attachment@mediatype</code>.</p>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleInner">
<pre xml:space="preserve">&lt;upload ref="mail/attachment" mediatype="image/*"&gt;
  &lt;label&gt;Select an image to attach&lt;/label&gt;
  &lt;filename ref="@filename"/&gt;
  &lt;mediatype ref="@mediatype"/&gt;
&lt;/upload&gt;</pre>
</div>
</div>
</div>

<div class="div3">
<h4><a name="ui-commonelems-mediatype" id="ui-commonelems-mediatype" shape="rect"/>8.3.2 The mediatype Element</h4>

<p>Binding attributes on optional element <code>mediatype</code> specify the
location in the instance for the parent element <code>upload</code>, when
activated, to place the mediatype of the chosen binary resource, if
available.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a></p>
</div>

<div class="div3">
<h4><a name="ui-commonelems-label" id="ui-commonelems-label" shape="rect"/>8.3.3 The
label Element</h4>

<p>This required element labels the containing form control with a
descriptive label. Additionally, the label makes it possible for someone who
can't see the form control to obtain a short description while navigating
between form controls.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
(optional), <a title="" href="#structure-attrs-link" shape="rect">Linking</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">Linking Attributes</dt>
    <dd><p>Link to external label. If the link traversal fails, it is treated
      as an error (<a href="#evt-linkError" shape="rect"><b>4.5.3 The xforms-link-error
      Event</b></a>).</p>
    </dd>
</dl>

<p>The label specified can exist in instance data, in a remote document, or
as inline text. If more than one source of label is specified in this
element, the order of precedence is: single node binding attributes, linking
attributes, inline text.</p>

<p>An accessibility aid might speak the metadata encapsulated here when the
containing form control gets focus.</p>
</div>

<div class="div3">
<h4><a name="ui-commonelems-help" id="ui-commonelems-help" shape="rect"/>8.3.4 The help
Element</h4>

<p>The optional element <code>help</code> provides a convenient way to attach
help information to a form control. This is equivalent to a <code>&lt;message
level="modeless" ev:event="xforms-help" ev:propagate="stop&gt;</code>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
(optional), <a title="" href="#structure-attrs-link" shape="rect">Linking</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">Linking Attributes</dt>
    <dd><p>Link to external help information. If the link traversal fails, it
      is treated as an error (<a href="#evt-linkError" shape="rect"><b>4.5.3 The
      xforms-link-error Event</b></a>).</p>
    </dd>
</dl>

<p>The message specified can exist in instance data, in a remote document, or
as inline text. If more than one source of message is specified in this
element, the order of precedence is: single node binding attributes, linking
attributes, inline text.</p>

<p>An example of this element is at <a href="#action-info" shape="rect"><b>10.1.12 The
message Element</b></a>.</p>
</div>

<div class="div3">
<h4><a name="ui-commonelems-hint" id="ui-commonelems-hint" shape="rect"/>8.3.5 The hint
Element</h4>

<p>The optional element <code>hint</code> provides a convenient way to attach
hint information to a form control. This is equivalent to a handler for event
<code>xforms-hint</code> that responds with a <code>&lt;message
level="ephemeral"&gt;</code>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
(optional), <a title="" href="#structure-attrs-link" shape="rect">Linking</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">Linking Attributes</dt>
    <dd><p>Link to external hint. If the link traversal fails, it is treated
      as an error (<a href="#evt-linkError" shape="rect"><b>4.5.3 The xforms-link-error
      Event</b></a>).</p>
    </dd>
</dl>

<p>The message specified can exist in instance data, in a remote document, or
as inline text. If more than one source of message is specified in this
element, the order of precedence is: single node binding attributes, linking
attributes, inline text.</p>

<p>An example of this element is at <a href="#action-info" shape="rect"><b>10.1.12 The
message Element</b></a>.</p>
</div>

<div class="div3">
<h4><a name="ui-common-elements-alert" id="ui-common-elements-alert" shape="rect"/>8.3.6 The alert Element</h4>

<p>The optional element <code>alert</code> provides a convenient way to
attach alert or error information to a form control. Rendering of this
element is implementation-defined, and there is no default <code>level</code>
such as <code>modal</code> or <code>ephemeral</code> for the displayed
message.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
(optional), <a title="" href="#structure-attrs-link" shape="rect">Linking</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">Linking Attributes</dt>
    <dd><p>Link to external alert. If the link traversal fails, it is treated
      as an error (<a href="#evt-linkError" shape="rect"><b>4.5.3 The xforms-link-error
      Event</b></a>).</p>
    </dd>
</dl>

<p>The message specified can exist in instance data, in a remote document, or
as inline text. If more than one source of message is specified in this
element, the order of precedence is: single node binding attributes, linking
attributes, inline text. See <a href="#style" shape="rect"><b>F XForms and Styling</b></a>
for examples to see how this might be presented to the user.</p>
</div>
</div>
</div>

<div class="div1">
<h2><a name="ui" id="ui" shape="rect"/>9 XForms User Interface</h2>

<p>This chapter covers XForms features for combining <a title="form control" href="#def-form-control" shape="rect">form control</a>s into user interfaces.</p>

<div class="div2">
<h3><a name="id2658879" id="id2658879" shape="rect"/>9.1 The XForms Group Module</h3>

<p>All form controls defined in <a href="#controls" shape="rect"><b>8 Form
Controls</b></a> are treated as individual units for purposes of visual
layout e.g., in XHTML processing. Aggregation of form controls with markup
defined in this chapter provides semantics about the relationship among user
interface controls; such knowledge can be useful in delivering a coherent UI
to small devices. For example, if the user interface needs to be split up
over several screens, controls appearing inside the same aggregation would
typically be rendered on the same screen or page. The elements and attributes
included in this module are:</p>

<table border="1" summary="listing of XForms Group elements, attributes, and content models">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Element</th>
      <th colspan="1" rowspan="1">Attributes</th>
      <th colspan="1" rowspan="1">Minimal Content Model</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-group" shape="rect">group</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
      (optional)</td>
      <td colspan="1" rowspan="1">label?, ((<a title="" href="#elems-form-controls" shape="rect">Form Controls</a>)|group|switch|repeat|<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
  </tbody>
</table>

<div class="div3">
<h4><a name="ui-group" id="ui-group" shape="rect"/>9.1.1 The group Element</h4>

<p>The <code>group</code> element is used as a container for defining a
hierarchy of form controls. Groups can be nested to create complex
hierarchies. Model item properties that apply to form controls apply equally
to <code>group</code>, and take precedence over model item properties applied
to individual members of the <code>group</code>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a> (optional)</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>When no model item properties apply to the binding expression on group, it
can be considered as an authoring convenience for relative XPath expressions
used by form controls appearing within the <code>group</code>.</p>

<p>When model item properties do apply, they apply to all form controls
within the <code>group</code>. This means, for instance, that if a group is
bound to an instance data node that is non-relevant, all child form controls
will also be treated as non-relevant.</p>
</div>

<p>The optional <code>label</code> element has special significance when it
appears as the first element child of <code>group</code>, representing a
label for the entire group.</p>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Grouping Related Controls</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;group ref="address"&gt;
  &lt;label&gt;Shipping Address&lt;/label&gt;
  &lt;input ref="line_1"&gt;
    &lt;label&gt;Address line 1&lt;/label&gt;
  &lt;/input&gt;
  &lt;input ref="line_2"&gt;
    &lt;label&gt;Address line 2&lt;/label&gt;
  &lt;/input&gt;
  &lt;input ref="postcode"&gt;
    &lt;label&gt;Postcode&lt;/label&gt;
  &lt;/input&gt;
&lt;/group&gt;</pre>
</div>
</div>

<p>Setting the input focus on a group results in the focus being set to the
first form control in the navigation order within that group.</p>
</div>
</div>

<div class="div2">
<h3><a name="id2659334" id="id2659334" shape="rect"/>9.2 The XForms Switch Module</h3>

<p>This section defines a switch construct that allows the creation of user
interfaces where the user interface can be varied based on user actions and
events. The elements and attributes included in this module are:</p>

<table border="1" summary="listing of XForms Switch elements, attributes, and content models">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Element</th>
      <th colspan="1" rowspan="1">Attributes</th>
      <th colspan="1" rowspan="1">Minimal Content Model</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-conditional" shape="rect">switch</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
      (optional)</td>
      <td colspan="1" rowspan="1">case+</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-case" shape="rect">case</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, selected (xsd:boolean)</td>
      <td colspan="1" rowspan="1">label?, ((<a title="" href="#elems-form-controls" shape="rect">Form
      Controls</a>)|group|switch|repeat)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-toggle" shape="rect">toggle</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, case (xsd:IDREF)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
  </tbody>
</table>

<div class="div3">
<h4><a name="ui-conditional" id="ui-conditional" shape="rect"/>9.2.1 The switch
Element</h4>

<p>This element contains one or more <code>case</code> elements, any one of
which is rendered at a given time.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>This is separate from XForms <code>relevant</code> processing (see <a href="#model-prop-relevant" shape="rect"><b>6.1.4 The relevant Property</b></a>), which is
based on the current state of the XForms Model. As an example, portions of a
questionnaire pertaining to the user's automobile may become relevant only if
the user has answered in the affirmative to the question 'Do you own a
car?'.</p>
</div>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a> (optional)</p>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: switch</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;switch&gt;
  &lt;case id="in" selected="true"&gt;
    &lt;input ref="yourname"&gt;
      &lt;label&gt;Please tell me your name&lt;/label&gt;
      &lt;toggle ev:event="DOMActivate" case="out"/&gt;
    &lt;/input&gt;
  &lt;/case&gt;
  &lt;case id="out" selected="false"&gt;
    &lt;html:p&gt;Hello &lt;output ref="yourname" /&gt;
      &lt;trigger id="editButton"&gt;
        &lt;label&gt;Edit&lt;/label&gt;
        &lt;toggle ev:event="DOMActivate" case="in"/&gt;
      &lt;/trigger&gt;
    &lt;/html:p&gt;
  &lt;/case&gt;
&lt;/switch&gt;</pre>
</div>
</div>

<p>The above results in the portion of the user interface contained in the
first <code>case</code> being displayed initially. This prompts for the
user's name; filling in a value and <em>activating</em> the control e.g., by
pressing <code>enter</code> results switches to the alternate case, with a
read-only <code>output</code> rendering. Activating the trigger labeled
"Edit" in turn switches back to the original case.</p>
</div>

<div class="div3">
<h4><a name="ui-case" id="ui-case" shape="rect"/>9.2.2 The case Element</h4>

<p>This element encloses markup to be conditionally rendered. The attribute
<code>selected</code> determines the selected state and can be manipulated
programmatically via the DOM, or declaratively via XForms Action
<code>toggle</code>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">selected</dt>
    <dd><p>Optional selection status for the case. The default value is
      "false".</p>
    </dd>
</dl>

<p>If multiple <code>case</code>s within a <code>switch</code> are marked as
<code>selected="true"</code>, the first selected <code>case</code> remains
and all others are deselected. If none are selected, the first becomes
selected.</p>
</div>

<div class="div3">
<h4><a name="action-toggle" id="action-toggle" shape="rect"/>9.2.3 The toggle
Element</h4>

<p>This XForms Action selects one possible case from an exclusive list of
alternatives in a <code>switch</code>.</p>

<p>This action adjusts all <code>selected</code> attributes on the affected
<code>case</code>s to reflect the new state, and then performs the
following:</p>
<ol type="1">
  <li><p>Dispatching an <code>xforms-deselect</code> event to the currently
    selected <code>case</code>.</p>
  </li>
  <li><p>Dispatching an <code>xform-select</code> event to the
    <code>case</code> to be selected.</p>
  </li>
</ol>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">case</dt>
    <dd><p>Required reference to a <code>case</code> section inside the
      conditional construct.</p>
    </dd>
</dl>
</div>
</div>

<div class="div2">
<h3><a name="id2659912" id="id2659912" shape="rect"/>9.3 The XForms Repeat Module</h3>

<p>The XForms specification allows the definition of repeating structures
such as multiple items within a purchase order. When defining the XForms
Model, such higher-level collections are constructed out of basic building
blocks; similarly, this section defines user interface construct
<code>repeat</code> that can bind to data structures such as lists and
collections. The elements and attributes included in this module are:</p>

<table border="1" summary="listing of XForms Repeat elements, attributes, and content models">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Element</th>
      <th colspan="1" rowspan="1">Attributes</th>
      <th colspan="1" rowspan="1">Minimal Content Model</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-repeat" shape="rect">repeat</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-nodeset" shape="rect">Node Set Binding</a>, startindex
        (xsd:positiveInteger), number (xsd:nonNegativeInteger)</td>
      <td colspan="1" rowspan="1">((<a title="" href="#elems-form-controls" shape="rect">Form Controls</a>)|group|repeat)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-common-elements-itemset" shape="rect">itemset</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-nodeset" shape="rect">Node Set Binding</a></td>
      <td colspan="1" rowspan="1">label, (value|copy), (<a title="" href="#elems-ui-common" shape="rect">UI Common</a>)*</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#ui-adv-copy" shape="rect">copy</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
      (optional)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-insert" shape="rect">insert</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, <a title="" href="#structure-attrs-nodeset" shape="rect">Node Set Binding</a>, at
        (XPathExpression), position ("before"|"after")</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-delete" shape="rect">delete</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, <a title="" href="#structure-attrs-nodeset" shape="rect">Node Set Binding</a>, at
        (XPathExpression)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-setRepeatCursor" shape="rect">setindex</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, repeat (xsd:IDREF), index
        (XPathExpression)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">(various)</td>
      <td colspan="1" rowspan="1">[repeat-nodeset, repeat-bind, repeat-model]
        (Node Set Binding attributes), repeat-startindex
        (xsd:positiveInteger), repeat-number (xsd:nonNegativeInteger)</td>
      <td colspan="1" rowspan="1">N/A</td>
    </tr>
  </tbody>
</table>

<div class="div3">
<h4><a name="ui-repeat" id="ui-repeat" shape="rect"/>9.3.1 The repeat Element</h4>

<p id="defn-homogeneous">This element defines a UI mapping over a
<b>homogeneous collection</b> selected by Node Set Binding Attributes. This
node-set must consist of contiguous child element nodes, with the same local
name and namespace name of a common parent node. The behavior of element
<code>repeat</code> with respect to non-homogeneous node-sets is
undefined.</p>

<p>For example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Shopping Cart</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;repeat nodeset="/cart/items/item"&gt;
  &lt;input ref="." .../&gt;&lt;html:br/&gt;
&lt;/repeat&gt;</pre>
</div>
</div>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#attrs-ui-common" shape="rect">UI Common</a>, <a title="" href="#structure-attrs-nodeset" shape="rect">Node Set Binding</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">startindex</dt>
    <dd><p>Optional 1-based initial value of the repeat index. The default
      value is 1.</p>
    </dd>
  <dt class="label">number</dt>
    <dd><p>Optional hint to the XForms Processor as to how many elements from
      the collection to display.</p>
    </dd>
</dl>

<p>This element operates over a homogeneous collection by binding the
encapsulated user interface controls to each element of the collection.
Attributes on this element specify how many members of the collection are
presented to the user at any given time. XForms Actions <code>insert</code>,
<code>delete</code>, and <code>setindex</code> can be used to operate on the
collection—see <a href="#action" shape="rect"><b>10 XForms Actions</b></a>. Another
way to view repeat processing (disregarding special user interface
interactions) is to consider "unrolling" the repeat. The above example is
similar to the following (given four <code>item</code> elements in the
returned node-set):</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Repeat Unrolled</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;!-- unrolled repeat --&gt;
  &lt;input ref="/cart/items/item[1]" .../&gt;&lt;html:br/&gt;
  &lt;input ref="/cart/items/item[2]" .../&gt;&lt;html:br/&gt;
  &lt;input ref="/cart/items/item[3]" .../&gt;&lt;html:br/&gt;
  &lt;input ref="/cart/items/item[4]" .../&gt;&lt;html:br/&gt;</pre>
</div>
</div>

<div class="exampleOuter">

<div class="exampleHead">
Example: Homogeneous Collection</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;model&gt;
  &lt;instance&gt;
    &lt;my:lines&gt;
      &lt;my:line name="a"&gt;
        &lt;my:price&gt;3.00&lt;/my:price&gt;
      &lt;/my:line&gt;
      &lt;my:line name="b"&gt;
        &lt;my:price&gt;32.25&lt;/my:price&gt;
      &lt;/my:line&gt;
      &lt;my:line name="c"&gt;
        &lt;my:price&gt;132.99&lt;/my:price&gt;
      &lt;/my:line&gt;
      &lt;/my:lines&gt;
  &lt;/instance&gt;
&lt;/model&gt;
  ...
&lt;repeat id="lineset" nodeset="/my:lines/my:line"&gt;
  &lt;input ref="my:price"&gt;
    &lt;label&gt;Line Item&lt;/label&gt;
  &lt;/input&gt;
  &lt;input ref="@name"&gt;
    &lt;label&gt;Name&lt;/label&gt;
  &lt;/input&gt;
&lt;/repeat&gt;
        
&lt;trigger&gt;
  &lt;label&gt;Insert a new item after the current one&lt;/label&gt;
  &lt;action ev:event="DOMActivate"&gt;
    &lt;insert nodeset="/my:lines/my:line" at="index('lineset')"
      position="after"/&gt;
    &lt;setvalue ref="/my:lines/my:line[index('lineset')]/@name"/&gt;
    &lt;setvalue ref="/my:lines/my:line[index('lineset')]/price"&gt;0.00&lt;/setvalue&gt;
  &lt;/action&gt;  
&lt;/trigger&gt;
          
&lt;trigger&gt;
  &lt;label&gt;remove current item&lt;/label&gt;
  &lt;delete ev:event="activate" nodeset="/my:lines/my:line"
    at="index('lineset')"/&gt;
&lt;/trigger&gt;</pre>
</div>
</div>
</div>

<div class="div3">
<h4><a name="ui.repeat.via.attrs" id="ui.repeat.via.attrs" shape="rect"/>9.3.2 Creating
Repeating Structures Via Attributes</h4>

<p>Element <code>repeat</code> enables the creation of user interfaces for
populating repeating structures. When using XForms within host languages like
XHTML, it is often necessary to create repeating structures within constructs
such as <code>table</code>. Thus, one might wish to use element
<code>repeat</code> within a <code>table</code> to create the rows of a
table, where each row of the table binds to a distinct member of a
homogeneous collection. Since <code>html:table</code> doesn't (and probably
never will) allow <code>xforms:repeat</code> elements as children, another
syntax is needed.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Tables And Repeating Structures</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;table&gt;
  &lt;repeat nodeset="..."&gt;
    &lt;tr&gt;
      &lt;td&gt;...&lt;/td&gt;
      ...
    &lt;/tr&gt;
  &lt;/repeat&gt;
&lt;/table&gt;</pre>
</div>
</div>

<p>More generally, there is a need to integrate repeat behavior into host
languages at points where the content model of the host language does not or
cannot provide the appropriate extension hooks via modularization. To
accommodate this, XForms 1.0 defines an alternative syntax that is
functionally equivalent to the <code>repeat</code> element, using the
following attributes:</p>

<blockquote>
  <p><code>repeat-model</code><br clear="none"/>
  <code>repeat-bind</code><br clear="none"/>
  <code>repeat-nodeset</code><br clear="none"/>
  <code>repeat-startindex</code><br clear="none"/>
  <code>repeat-number</code></p>
</blockquote>

<p>The above attributes are equivalent to the <code>repeat</code> attributes
of the same name, but without the prefix <code>repeat-</code>. A host
language can include these attributes in the appropriate places to enable
repeating constructs. For example, a version of XHTML might use:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Tables And Repeating Structures</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;html:table xforms:repeat-nodeset="..."&gt;
  &lt;html:tr&gt;
    &lt;html:td&gt;&lt;xforms:output ref="..."/&gt;&lt;/html:td&gt;
  &lt;/html:tr&gt;
&lt;/html:table&gt;</pre>
</div>

<p>Which could be validated against an appropriately configured XHTML Schema
that includes the XForms Repeat module. Note that what gets repeated is the
child elements of the element with the <code>repeat-</code> attributes.</p>
</div>

<p>This should be thought purely as a syntactic transformation, i.e., there
is no change to repeat processing semantics. Further, for purposes of
understanding the above as a pure syntactic transformation, element
<code>repeat</code> can be viewed as containing an anonymous
<code>group</code> that wraps the contents of element <code>repeat</code>.
Thus, consider the following:</p>

<div class="exampleOuter">

<div class="exampleInner">
<pre xml:space="preserve">&lt;repeat ...&gt;
  ...
&lt;/repeat&gt;</pre>
</div>

<p>is equivalent to</p>

<div class="exampleInner">
<pre xml:space="preserve">&lt;repeat ...&gt;
  &lt;group&gt;...&lt;/group&gt;
&lt;/repeat&gt;</pre>
</div>

<p>Which is equivalent to</p>

<div class="exampleInner">
<pre xml:space="preserve">&lt;group repeat-...&gt;
  ...
&lt;/group&gt;</pre>
</div>
</div>

<p>Additionally, when using XForms Action <code>setindex</code>, attribute
<code>repeat</code> of type <code>idref</code> can point to any element
carrying the repeat attributes. Similarly, when using function
<code>index</code> against a repeating structure created via the
<code>repeat-</code>attributes, the <code>id</code> of that element can be
used as the argument to function <code>index</code>.</p>
</div>

<div class="div3">
<h4><a name="ui-common-elements-itemset" id="ui-common-elements-itemset" shape="rect"/>9.3.3 The itemset Element</h4>

<p>This element allows the creation of dynamic selections within controls
<code>select</code> and <code>select1</code>, where the available choices are
determined at run-time. The node-set that holds the available choices is
specified via attribute <code>nodeset</code>. As with <code>repeat</code>,
this nodeset should refer to a <a title="" href="#defn-homogeneous" shape="rect">homogeneous</a> collection. Child elements
<code>label</code> and <code>value</code> indirectly specify the label and
storage values. Notice that the run-time effect of <code>itemset</code> is
the same as using element <code>choices</code> to statically author the
available choices.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#structure-attrs-nodeset" shape="rect">Node Set Binding</a></p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Whenever a <code>refresh</code> event is dispatched the
<code>nodeset</code> is re-evaluated to update the list of available
choices.</p>
</div>

<p>The following example shows element <code>itemset</code> within control
<code>select</code> to specify a dynamic list of ice cream flavors:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Dynamic Choice Of Ice Cream Flavors</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;model id="cone"&gt;
  &lt;instance&gt;
    &lt;my:icecream&gt;
      &lt;my:order/&gt;
    &lt;/my:icecream&gt;
  &lt;/instance&gt;
&lt;/model&gt;
&lt;model id="flavors"&gt;
  &lt;instance&gt;
    &lt;my:flavors&gt;
      &lt;my:flavor type="v"&gt;
        &lt;my:description&gt;Vanilla&lt;/my:description&gt;
      &lt;/my:flavor&gt;
      &lt;my:flavor type="s"&gt;
        &lt;my:description&gt;Strawberry&lt;/my:description&gt;
      &lt;/my:flavor&gt;
      &lt;my:flavor type="c"&gt;
        &lt;my:description&gt;Chocolate&lt;/my:description&gt;
      &lt;/my:flavor&gt;
    &lt;/my:flavors&gt;
  &lt;/instance&gt;
&lt;/model&gt;
&lt;!-- user interaction markup --&gt;
&lt;select model="cone" ref="my:order"&gt;
  &lt;label&gt;Flavors&lt;/label&gt;
  &lt;itemset model="flavors" nodeset="/my:flavors/my:flavor"&gt;
    &lt;label ref="my:description"/&gt;
    &lt;copy ref="my:description"/&gt;
  &lt;/itemset&gt;
&lt;/select&gt;
          
&lt;!-- For all three items selected, this example produces instance data like
     &lt;my:icecream&gt;
       &lt;my:order&gt;
         &lt;my:description&gt;Vanilla&lt;/my:description&gt;
         &lt;my:description&gt;Strawberry&lt;/my:description&gt;
         &lt;my:description&gt;Chocolate&lt;/my:description&gt;    
       &lt;/my:order&gt;
     &lt;/my:icecream&gt;
--&gt;</pre>
</div>
</div>
</div>

<div class="div3">
<h4><a name="ui-adv-copy" id="ui-adv-copy" shape="rect"/>9.3.4 The copy Element</h4>

<p>Structurally, this element is similar to <a href="#ui-common-choices-value" shape="rect"><b>8.2.3 The value Element</b></a>. It
differs in that it can only be used within <code>itemset</code>, and that it
works with subtrees of instance data rather than simple values.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
(optional)</p>

<p>When an <code>item</code> becomes selected, the following rules apply:</p>
<ul>
  <li><p>The target node, selected by the binding attributes on the list form
    control, must be an element node, otherwise an exception results (<a href="#evt-bindingException" shape="rect"><b>4.5.1 The xforms-binding-exception
    Event</b></a>).</p>
  </li>
  <li><p>The element node associated with the <code>item</code>, selected by
    the binding attributes on <code>copy</code>, is deep copied as a child of
    the target node.</p>
  </li>
  <li><p>A full computational dependency rebuild is done.</p>
  </li>
</ul>

<p>When an <code>item</code> becomes unselected, the following rules
apply:</p>
<ul>
  <li><p>The target node, selected by the binding attributes on the list form
    control, must be an element node, otherwise an exception results (<a href="#evt-bindingException" shape="rect"><b>4.5.1 The xforms-binding-exception
    Event</b></a>).</p>
  </li>
  <li><p>The child element node associated with the <code>item</code>,
    selected by the binding attributes on <code>copy</code>, is deleted.</p>
  </li>
  <li><p>A full computational dependency rebuild.</p>
  </li>
</ul>
</div>

<div class="div3">
<h4><a name="action-insert" id="action-insert" shape="rect"/>9.3.5 The insert
Element</h4>

<p>This action is used to insert new entries into a homogeneous collection,
e.g., a set of items in a shopping cart. Attributes of action
<code>insert</code> specify the insertion in terms of the collection in which
a new entry is to be inserted, and the location within that collection where
the new node will appear. The new node is created by cloning the final member
of the homogeneous collection specified by the initialization instance data.
In this process, nodes of type <code>xsd:ID</code> are modified to remain as
unique values in the instance data.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a>, <a title="" href="#structure-attrs-nodeset" shape="rect">Node Set Binding</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">at</dt>
    <dd><p>Required XPath expression evaluated to determine insert
      location.</p>
    </dd>
  <dt class="label">position</dt>
    <dd><p>Required selector ("before" or "after") of insert before/after
      behavior.</p>
    </dd>
</dl>

<p>The rules for <code>insert</code> processing are as follows:</p>
<ol type="1">
  <li><p>The homogeneous collection to be updated is determined by evaluating
    binding attribute <code>nodeset</code>.</p>
  </li>
  <li><p>The corresponding node-set of the initial instance data is located
    to determine the prototypical member of the collection. The final member
    of this collection is cloned to produce the node that will be inserted.
    Finally, this newly created node is inserted into the instance data at
    the location specified by attributes <code>position</code> and
    <code>at</code>.</p>
    <p>Attribute <code>at</code> is evaluated to determine the insertion
    index—a numerical value that is the index into the node-set.
    Attribute <code>position</code> specifies whether the new node is
    inserted <em>before</em> or <em>after</em> this index.</p>
    <p>The rules for selecting the index are as follows:</p>
    <ol type="a">
      <li><p>The return value of the XPath expression in attribute
        <code>at</code> is processed according to the rules of the XPath
        function <code>round()</code>. For example, the literal
        <code>1.5</code> becomes <code>2</code>, and the literal
        <code>'string'</code> becomes <code>NaN</code>.</p>
      </li>
      <li><p>If the result is <code>NaN</code>, the insert appends to the end
        of the node-set.</p>
      </li>
      <li><p>If the resulting index is outside the valid range of the
        node-set, it is replaced with either <code>1</code> or the size of
        the node-set, whichever is closer.</p>
      </li>
    </ol>
  </li>
  <li><p>The index for any repeating sequence that is bound to the
    homogeneous collection where the node was added is updated to point to
    the newly added node. The indexes for inner nested repeat collections are
    re-initialized to 1.</p>
  </li>
  <li><p>If the insert is successful, the event <code>xforms-insert</code> is
    dispatched.</p>
  </li>
</ol>

<p>This action results in the insertion of newly created data nodes into the
XForms instance data. Such nodes are constructed as defined in the
initialization section of the processing model—see <a href="#rpm-init" shape="rect"><b>4.2 Initialization Events</b></a>. As an example, this
causes the instantiation of the necessary user interface for populating a new
entry in the underlying collection when used in conjunction with repeating
structures.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>If this action is contained within an <code>action</code> element, it has
special deferred update behavior (<a href="#action-action" shape="rect"><b>10.1.1 The
action Element</b></a>).</p>
</div>

<p>An example of using <code>insert</code> with a repeating structure is
located at <a href="#ui-repeat" shape="rect"><b>9.3.1 The repeat Element</b></a>. Note
that XForms Action <code>setvalue</code> can be used in conjunction with
<code>insert</code> to provide initial values for the newly inserted
nodes.</p>
</div>

<div class="div3">
<h4><a name="action-delete" id="action-delete" shape="rect"/>9.3.6 The delete
Element</h4>

<p>This action deletes nodes from the instance data.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a>, <a title="" href="#structure-attrs-nodeset" shape="rect">Node Set Binding</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">at</dt>
    <dd><p>Required XPath expression evaluated to determine delete
      location.</p>
    </dd>
</dl>

<p>The rules for <code>delete</code> processing are as follows:</p>
<ol type="1">
  <li><p>The homogeneous collection to be updated is determined by evaluating
    binding attribute <code>nodeset</code>. If the collection is empty, the
    delete action has no effect.</p>
  </li>
  <li><p>The <code>n</code>-th element node is deleted from the instance
    data, where <code>n</code> represents the number returned from node-set
    index evaluation, defined in <a href="#action-insert" shape="rect"><b>9.3.5 The insert
    Element</b></a>. If no <code>n</code>th node exists, the operation has no
    effect.</p>
  </li>
  <li><p>The index should point to the same node after a delete as it did
    before the delete except:</p>
    <ul>
      <li><p>When the last remaining item in the collection is removed, the
        index position becomes 0.</p>
      </li>
      <li><p>When the index was pointing to the deleted node, which was the
        last item in the collection, the index will point to the new last
        node of the collection and the index of inner repeats is
        reinitialized.</p>
      </li>
      <li><p>When the index was pointing to the deleted node, which was not
        the last item in the collection, the index position is not changed
        and the index of inner repeats is re-initialized.</p>
      </li>
    </ul>
    <p>To re-initialize a repeat means to change the index to 0 if it is
    empty, otherwise 1.</p>
  </li>
  <li><p>If the delete is successful, the event <code>xforms-delete</code> is
    dispatched.</p>
  </li>
</ol>

<p>This action results in deletion of nodes in the instance data.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>If this action is contained within an <code>action</code> element, it has
special deferred update behavior (<a href="#action-action" shape="rect"><b>10.1.1 The
action Element</b></a>).</p>
</div>

<p>An example of using <code>delete</code> with a repeating structure is
located at <a href="#ui-repeat" shape="rect"><b>9.3.1 The repeat Element</b></a>.</p>
</div>

<div class="div3">
<h4><a name="action-setRepeatCursor" id="action-setRepeatCursor" shape="rect"/>9.3.7
The setindex Element</h4>

<p>This action marks a specific item as current in a repeating sequence
(within <a href="#ui-repeat" shape="rect"><b>9.3.1 The repeat Element</b></a>).</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">repeat</dt>
    <dd><p>Required reference to a repeating element.</p>
    </dd>
  <dt class="label">index</dt>
    <dd><p>Required XPath expression that evaluates to a 1-based offset into
      the sequence.</p>
    </dd>
</dl>

<p>If the selected index is 0 or less, an <code>xforms-scroll-first</code>
event is dispatched and the index is set to 1. If the selected index is
greater than the index of the last repeat item, an
<code>xforms-scroll-last</code> event is dispatched and the index is set to
that of the last item. The indexes for inner nested repeat collections are
re-initialized to 1. The implementation data structures for tracking
computational dependencies are rebuilt or updated as a result of this
action.</p>
</div>

<div class="div3">
<h4><a name="ui-repeat-processing" id="ui-repeat-processing" shape="rect"/>9.3.8 Repeat
Processing</h4>

<p>The markup contained within the body of element <code>repeat</code>
specifies the user interface to be generated for each member of the
underlying collection. During user interface initialization (see <a href="#evt-modelConstructDone" shape="rect"><b>4.2.2 The xforms-model-construct-done
Event</b></a>), the following steps are performed for <code>repeat</code>:</p>
<ol type="1">
  <li><p>Attribute <code>nodeset</code> is evaluated to locate the
    homogeneous collection to be operated on by this <code>repeat</code>.</p>
  </li>
  <li><p>The corresponding nodes in element <code>instance</code> in the
    source document are located—these nodes provide initial values and
    also serve as a prototypical instance for constructing members of the
    repeating collection.</p>
  </li>
  <li><p>The <em>index</em> for this repeating structure is initialized to
    the value of <code>startindex</code>.</p>
  </li>
  <li><p>The user interface template specified within element
    <code>repeat</code> is <em>bound</em> to this prototypical instance. If
    there is a type mismatch between the prototypical instance and the
    binding restrictions for the user interface controls, an error is
    signaled and processing stops.</p>
  </li>
  <li><p>User interface as specified by the <code>repeat</code> is generated
    for the requisite number of members of the collection as specified by
    attributes on element <code>repeat</code>.</p>
  </li>
</ol>

<p>The processing model for repeating structures uses an <em>index</em> that
points to the <em>current</em> item in the instance data. This repeat index
is accessed via XForms function <code>index</code> <a href="#fn-index" shape="rect"><b>7.8.5 The index() Function</b></a> and manipulated via
XForms Action <code>setindex</code> <a href="#action-setRepeatCursor" shape="rect"><b>9.3.7 The setindex Element</b></a>. This
index is used as a reference point for <code>insert</code> and
<code>delete</code> operations. Notice that the contained XForms form
controls inside element <code>repeat</code> do not explicitly specify the
index of the collection entry being populated. This is intentional; it keeps
both authoring as well as the processing model simple.</p>

<p>The binding expression attached to the repeating sequence returns a
node-set of the collection being populated, not an individual node. Within
the body of element <code>repeat</code>, binding expressions are evaluated
with a context node of the node determined by the index. Repeat processing
uses XPath expressions to address the collection over which element
<code>repeat</code> operates. The initial instance data supplies the
prototypical member of the homogeneous collection, and this is used during UI
initialization—<a href="#evt-modelConstructDone" shape="rect"><b>4.2.2 The
xforms-model-construct-done Event</b></a>—to construct the members of
the homogeneous collection. This prototypical instance is also used by action
<code>insert</code> when creating new members of the collection. To create
homogeneous collections, the initial instance data <em>must</em> specify at
least one member of the collection; this requirement is similar to
<em>requiring</em> instance data in addition to a schema, and the same
justification applies.</p>

<p>The form controls appearing inside <code>repeat</code> need to be suitable
for populating individual items of the collection. A simple but powerful
consequence of the above is that if the XForms Model specifies nested
collections, then a corresponding user interface can nest <code>repeat</code>
elements.</p>
</div>

<div class="div3">
<h4><a name="ui-nested-repeats" id="ui-nested-repeats" shape="rect"/>9.3.9 Nested
Repeats</h4>

<p>It is possible to nest repeat elements to create more powerful user
interface for editing structured data. <a href="#bookmarks-in-x-smiles" shape="rect"><b>G.2 Editing Hierarchical Bookmarks Using
XForms</b></a> is an example of a form using nested repeats to edit
hierarchical data consisting of bookmarks within multiple sections. Notice
that an inner repeat's index always starts from <code>1</code>. Consider the
following <code>insert</code> statement that appears as part of that
example.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Repeat Index and Nested Repeats</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:insert nodeset="/bookmarks/section[index('repeatSections')]/bookmark"
               at="index('repeatBookmarks')"
               position="after"/&gt;</pre>
</div>
</div>

<p>The above <code>insert</code> statement is used in that example to add new
bookmark entries into the <em>currently selected</em> section. The inner
(nested) repeat operates on bookmarks in this selected section; The
index—as returned by XForms function <code>index</code>—for this
inner repeat starts at <code>1</code>. Hence, after a new empty section of
bookmarks is created and becomes <em>current</em>, the first <em>insert
bookmark</em> operation adds the newly created bookmark at the front of the
list.</p>
</div>

<div class="div3">
<h4><a name="ui-repeat-ui" id="ui-repeat-ui" shape="rect"/>9.3.10 User Interface
Interaction</h4>

<p>Element <code>repeat</code> enables the binding of user interaction to a
homogeneous collection. The number of displayed items might be less than the
total number available in the collection. In this case, the presentation
would render only a portion of the repeating items at a given time. For
example, a graphical user interface might present a scrolling table. The
current item indicated by the repeat index should be made available to the
user at all times, for example, not allowed to scroll out of view. The XForms
Actions enumerated at <a href="#action" shape="rect"><b>10 XForms Actions</b></a> may be
used within event listeners to manipulate the homogeneous collection being
populated by scrolling, inserting, and deleting entries.</p>

<p>Notice that the markup encapsulated by element <code>repeat</code> acts as
the template for the user interaction that is presented to the user. As a
consequence, it is not possible to refer to portions of the generated user
interface via statically authored <code>idref</code> attributes. A necessary
consequence of this is that XForms 1.0 does not specify the behavior of
construct <code>switch</code> within element <code>repeat</code>. Future
versions of XForms may specify the behavior of <code>switch</code> inside
<code>repeat</code> based on implementation experience and user feedback.</p>
</div>
</div>
</div>

<div class="div1">
<h2><a name="action" id="action" shape="rect"/>10 XForms Actions</h2>

<p>This chapter defines an XML Events-based <a href="#ref-xml-events" shape="rect">[XML
Events]</a> common set of actions that can be invoked in response to
events.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>XForms itself defines no method for script-based event handling. The
definition of such facilities is a responsibility of the hosting language.</p>
</div>

<div class="div2">
<h3><a name="id2665418" id="id2665418" shape="rect"/>10.1 The XForms Action Module</h3>

<p>All form controls defined in this specification have a set of common
<em>behaviors</em> that encourage consistent authoring and look and feel for
XForms-based applications. This consistency comes from attaching a common set
of behaviors to the various form controls. In conjunction with the event
binding mechanism provided by XML Events, these handlers provide a flexible
means for forms authors to specify event processing at appropriate points
within the XForms user interface. XForms Actions are declarative XML event
handlers that capture high-level semantics. As a consequence, they
significantly enhance the accessibility of XForms-based applications in
comparison to previous Web technologies that relied exclusively on
scripting.</p>

<p>The elements and attributes included in this module are:</p>

<table border="1" summary="listing of XForms Repeat elements, attributes, and content models">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Element</th>
      <th colspan="1" rowspan="1">Attributes</th>
      <th colspan="1" rowspan="1">Minimal Content Model</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-action" shape="rect">action</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a></td>
      <td colspan="1" rowspan="1">(<a title="" href="#action-xmlevents" shape="rect">Action</a>)+</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-dispatch" shape="rect">dispatch</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, name (xsd:NMTOKEN), target
        (xsd:IDREF), bubbles (xsd:boolean), cancelable (xsd:boolean)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-refresh" shape="rect">rebuild</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, model (xsd:IDREF)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-refresh" shape="rect">recalculate</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, model (xsd:IDREF)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-recalculate" shape="rect">revalidate</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, model (xsd:IDREF)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-revalidate" shape="rect">refresh</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, model (xsd:IDREF)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-setfocus" shape="rect">setfocus</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, control (xsd:IDREF)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-load" shape="rect">load</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
        (optional), resource (xsd:anyURI), show ("new" | "replace")</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-setvalue" shape="rect">setvalue</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>, value
        (XPathExpression)</td>
      <td colspan="1" rowspan="1">PCDATA</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-submit" shape="rect">send</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, submission (xsd:IDREF)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-reset" shape="rect">reset</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, model (xsd:IDREF)</td>
      <td colspan="1" rowspan="1">EMPTY</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><a title="" href="#action-info" shape="rect">message</a></td>
      <td colspan="1" rowspan="1"><a title="" href="#structure-attrs-common" shape="rect">Common</a>, <a title="" href="#action-xmlevents" shape="rect">Events</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a>
        (optional), <a title="" href="#structure-attrs-link" shape="rect">Linking</a>,
        level ("ephemeral" | "modeless" | "modal")</td>
      <td colspan="1" rowspan="1">(PCDATA|<a title="" href="#elems-inline" shape="rect">UI
        Inline</a>)*</td>
    </tr>
  </tbody>
</table>

<p>See also: <a href="#action-toggle" shape="rect"><b>9.2.3 The toggle Element</b></a>; <a href="#action-insert" shape="rect"><b>9.3.5 The insert Element</b></a>; <a href="#action-delete" shape="rect"><b>9.3.6 The delete Element</b></a>; and <a href="#action-setRepeatCursor" shape="rect"><b>9.3.7 The setindex Element</b></a>.</p>

<p id="action-xmlevents">This module also defines the content set "Action",
which includes the following elements (of these, <code>toggle</code> comes
from the XForms Switch module, and <code>insert</code>, <code>delete</code>,
and <code>setindex</code> come from the XForms Repeat module):</p>

<div class="exampleInner">
<pre xml:space="preserve">(action|dispatch|rebuild|refresh|recalculate|revalidate|setfocus|
 load|setvalue|send|reset|message|toggle|insert|delete|setindex)*</pre>
</div>

<p>Additionally, this module defines the attribute group "XML Events", which
includes all of the "global" attributes defined in that specification (<a href="#ref-xml-events" shape="rect">[XML Events]</a>).</p>

<p>The following example shows how events can be used:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Action Syntax</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;xforms:trigger&gt;
  &lt;xforms:label&gt;Reset&lt;/xforms:label&gt;
  &lt;xforms:reset ev:event="DOMActivate" model="thismodel"/&gt;
&lt;/xforms:trigger&gt;</pre>
</div>
</div>

<p>This example recreates the behavior of the HTML <em>reset</em> control,
which this specification does not define as an independent form control.</p>

<p>For each built-in XForms Action, this chapter lists the following:</p>

<blockquote>
  <p>Name<br clear="none"/>
  Common Attributes<br clear="none"/>
  Special Attributes<br clear="none"/>
  Description of behavior</p>
</blockquote>

<p>All elements defined in this chapter explicitly allow global attributes
from the XML Events namespace, and apply the processing defined in that
specification in section 2.3 <a href="#ref-xml-events" shape="rect">[XML Events]</a>.</p>

<div class="div3">
<h4><a name="action-action" id="action-action" shape="rect"/>10.1.1 The action
Element</h4>

<p>Action <code>action</code> is used to group multiple actions.</p>

<p>When using element <code>action</code> to group actions, care should be
taken to list the event on element <code>action</code>, rather than on the
contained actions.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Grouping Actions</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;trigger&gt;
  &lt;label&gt;Click me&lt;/label&gt;
  &lt;action ev:event="DOMActivate"&gt;
    &lt;reset model="thismodel"/&gt;
    &lt;setvalue ref="."/&gt;
  &lt;/action&gt;
&lt;/trigger&gt;</pre>
</div>
</div>

<p>Notice that in the above example, <code>ev:event="DOMActivate"</code>
occurs on element <code>action</code>. Placing
<code>ev:event="DOMActivate"</code> on either or both of the contained
actions will have no effect. This is because the above example relies on the
defaulting of <a href="#ref-xml-events" shape="rect">[XML Events]</a> attributes
<code>observer</code> and <code>handler</code>. As defined in the XML Events
specification, if both observer and handler attributes are omitted, then the
parent is the observer. Placing <code>ev:event="DOMActivateD"</code> on the
children of element <code>action</code> therefore causes element
<code>action</code> to become the <em>observer</em> for the individual
events. Consequently, these actions will never be triggered since events
arrive at element <code>trigger</code>, not element <code>action</code>.</p>

<p><b>Deferred Updates</b>: Many XForms Actions have a deferred effect on the
instance data when specified as a descendant of an <code>action</code>
element.</p>

<p>Implementations are free to use any strategy to accomplish deferred
updates, but the end result must be as follows: Instance data changes
performed by a set of actions do not result in immediate computation
dependency rebuilding, recalculation, revalidate and form control refreshing
until the termination of the outermost action handler, as described here.
Each outermost action handler can be thought of as having a set of Boolean
flags, initially <code>false</code>, to indicate whether each of the actions
<code>rebuild</code>, <code>recalculate</code>, <code>revalidate</code>, and
<code>refresh</code> are required upon termination of the outer action
handler.</p>

<p>Actions that directly invoke rebuild, recalculate, revalidate, or refresh
always have an immediate effect, and clear the corresponding flag. The XForms
Actions in this category are:</p>

<blockquote>
  <p><code>rebuild</code><br clear="none"/>
  <code>recalculate</code><br clear="none"/>
  <code>revalidate</code><br clear="none"/>
  <code>refresh</code></p>
</blockquote>

<p>XForms Actions that change the tree structure of instance data result in
setting all four flags to <code>true</code>. The XForms Actions in this
category are:</p>

<blockquote>
  <p><code>insert</code><br clear="none"/>
  <code>delete</code></p>
</blockquote>

<p>XForms Actions that change only the value of an instance node results in
setting the flags for <code>recalculate</code>, <code>revalidate</code>, and
<code>refresh</code> to <code>true</code> and making no change to the flag
for <code>rebuild</code>. The XForms Actions in this category are:</p>

<blockquote>
  <p>setvalue</p>
</blockquote>

<p>Finally, the <code>reset</code> action takes effect immediately and clears
all of the flags.</p>
</div>

<div class="div3">
<h4><a name="action-dispatch" id="action-dispatch" shape="rect"/>10.1.2 The dispatch
Element</h4>

<p>This action dispatches an XForms Event to a specific element identified by
the <code>target</code> attribute. Two kinds of event can be dispatched:</p>
<ol type="1">
  <li><p>Predefined XForms events (i.e., xforms-event-name), in which case
    the <code>bubbles</code> and <code>cancelable</code> attributes are
    ignored and the standard semantics as defined in <a href="#rpm" shape="rect"><b>4
    Processing Model</b></a> apply.</p>
  </li>
  <li><p>An event created by the XForms author with no predefined XForms
    semantics and as such not handled by default by the XForms Processor.</p>
  </li>
</ol>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">name</dt>
    <dd><p>Required name of the event to dispatch.</p>
    </dd>
  <dt class="label">target</dt>
    <dd><p>Required reference to the event target.</p>
    </dd>
  <dt class="label">bubbles</dt>
    <dd><p>Optional boolean indicating if this event bubbles—as defined
      in <a href="#ref-dom2-events" shape="rect">[DOM2 Events]</a>. The default value
      depends on the definition of a custom event. For predefined events,
      this attribute has no effect.</p>
    </dd>
  <dt class="label">cancelable</dt>
    <dd><p>Optional boolean indicating if this event is cancelable—as
      defined in <a href="#ref-dom2-events" shape="rect">[DOM2 Events]</a>. The default
      value depends on the definition of a custom event. For predefined
      events, this attribute has no effect.</p>
    </dd>
</dl>
</div>

<div class="div3">
<h4><a name="action-rebuild" id="action-rebuild" shape="rect"/>10.1.3 The rebuild
Element</h4>

<p>This action causes the processing of <code>xforms-rebuild</code> to
happen, bypassing the normal event flow. This action results in the XForms
Processor rebuilding any internal data structures used to track computational
dependencies among instance data nodes —see <a href="#evt-rebuild" shape="rect"><b>4.3.7 The xforms-rebuild Event</b></a>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">model</dt>
    <dd><p>Required IDREF of the <code>model</code> to be processed.</p>
    </dd>
</dl>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>If this action is contained within an <code>action</code> element, it has
special deferred update behavior (<a href="#action-action" shape="rect"><b>10.1.1 The
action Element</b></a>).</p>
</div>
</div>

<div class="div3">
<h4><a name="action-recalculate" id="action-recalculate" shape="rect"/>10.1.4 The
recalculate Element</h4>

<p>This action causes the processing of <code>xforms-recalculate</code> to
happen, bypassing the normal event flow. As a result, instance data nodes
whose values need to be recalculated are updated as specified in the
processing model—see <a href="#evt-recalculate" shape="rect"><b>4.3.6 The
xforms-recalculate Event</b></a>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">model</dt>
    <dd><p>Required IDREF of the <code>model</code> to be processed.</p>
    </dd>
</dl>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>If this action is contained within an <code>action</code> element, it has
special deferred update behavior (<a href="#action-action" shape="rect"><b>10.1.1 The
action Element</b></a>).</p>
</div>
</div>

<div class="div3">
<h4><a name="action-revalidate" id="action-revalidate" shape="rect"/>10.1.5 The
revalidate Element</h4>

<p>This action causes the processing of <code>xforms-revalidate</code> to
happen, bypassing the normal event flow. This results in the instance data
being revalidated as specified by the processing model—see <a href="#evt-revalidate" shape="rect"><b>4.3.5 The xforms-revalidate Event</b></a>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">model</dt>
    <dd><p>Required IDREF of the <code>model</code> to be processed.</p>
    </dd>
</dl>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>If this action is contained within an <code>action</code> element, it has
special deferred update behavior (<a href="#action-action" shape="rect"><b>10.1.1 The
action Element</b></a>).</p>
</div>
</div>

<div class="div3">
<h4><a name="action-refresh" id="action-refresh" shape="rect"/>10.1.6 The refresh
Element</h4>

<p>This action causes the processing of <code>xforms-refresh</code> to
happen, bypassing the normal event flow. This action results in the XForms
user interface being <em>refreshed</em>, and the presentation of user
interface controls being updated to reflect the state of the underlying
instance data—see <a href="#evt-refresh" shape="rect"><b>4.3.4 The xforms-refresh
Event</b></a>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">model</dt>
    <dd><p>Required IDREF of the <code>model</code> to be processed.</p>
    </dd>
</dl>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>If this action is contained within an <code>action</code> element, it has
special deferred update behavior (<a href="#action-action" shape="rect"><b>10.1.1 The
action Element</b></a>).</p>
</div>
</div>

<div class="div3">
<h4><a name="action-setfocus" id="action-setfocus" shape="rect"/>10.1.7 The setfocus
Element</h4>

<p>This action sets focus to the form control identified by attribute
<code>control</code> by dispatching an <code>xforms-focus</code> event (<a href="#evt-focus" shape="rect"><b>4.3.2 The xforms-focus Event</b></a>). Note that this
event is implicitly invoked to implement XForms accessibility features such
as <code>accesskey</code>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">control</dt>
    <dd><p>Required reference to a form control.</p>
    </dd>
</dl>

<p>Setting focus to a repeating structure sets the focus to the repeat item
represented by the repeat index.</p>
</div>

<div class="div3">
<h4><a name="action-load" id="action-load" shape="rect"/>10.1.8 The load Element</h4>

<p>This action traverses the specified link.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a> (optional)</p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">resource</dt>
    <dd><p>Link to external resource to load, defined as an <a href="#ref-xlink-1.0" shape="rect">[XLink 1.0]</a> link between this element and the
      remote resource indicated. No XLink <code>actuate</code> value is
      defined, since control of actuation is defined by XML Events. The XLink
      <code>show</code> value depends on the <code>show</code> attribute. If
      the link traversal fails, it is treated as an error (<a href="#evt-linkError" shape="rect"><b>4.5.3 The xforms-link-error Event</b></a>).</p>
    </dd>
  <dt class="label">show</dt>
    <dd><p>Optional link behavior specifier.</p>
    </dd>
</dl>

<p>Either the single node binding attributes, pointing to a URI in the
instance data, or the linking attributes are required. If both are present,
the action has no effect.</p>

<p>Possible values for attribute <code>show</code> have the following
processing for the document (or portion of a document) reached by traversing
the link:</p>
<dl>
  <dt class="label">new</dt>
    <dd><p>The document is loaded into a new presentation context, e.g., a
      new window. Form processing in the original window continues.</p>
    </dd>
  <dt class="label">replace</dt>
    <dd><p>The document is loaded into the current window. Form processing is
      interrupted, exactly as if the user had manually requested navigating
      to a new document.</p>
    </dd>
</dl>
</div>

<div class="div3">
<h4><a name="action-setvalue" id="action-setvalue" shape="rect"/>10.1.9 The setvalue
Element</h4>

<p>This action explicitly sets the value of the specified instance data
node.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">value</dt>
    <dd><p>Optional XPath expression to evaluate, with the result stored in
      the selected instance data node.</p>
    </dd>
</dl>

<p>The element content of <code>setvalue</code> specifies the literal value
to set; this is an alternative to specifying a computed value via attribute
<code>value</code>. The following two examples contrast these approaches:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: setvalue with Expression</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;setvalue bind="put-here" value="a/b/c"/&gt;</pre>
</div>

<p>This causes the string value at <code>a/b/c</code> in the instance data to
be placed on the single node selected by the bind element with
<code>id="put-here"</code>.</p>
</div>

<div class="exampleOuter">

<div class="exampleHead">
Example: setvalue with Literal</div>

<div class="exampleInner">
<pre xml:space="preserve">&lt;setvalue bind="put-here"&gt;literal string&lt;/setvalue&gt;</pre>
</div>

<p>This causes the value "literal string" to be placed on the single node
selected by the bind element with <code>id="put-here"</code>.</p>

<p>If neither a <code>value</code> attribute nor text content are present,
the effect is to set the value of the selected node to the empty string ("").
If both are present, the <code>value</code> attribute is used.</p>
</div>

<p>All strings are inserted into the instance data as follows:</p>
<ul>
  <li><p>Element nodes: If the element has any child text nodes, the first
    text node is replaced with one corresponding to the new value. If no
    child text nodes are present, a text node is created, corresponding to
    the new value, and appended as the first child node.</p>
  </li>
  <li><p>Attribute nodes: The string-value of the attribute is replaced with
    a string corresponding to the new value.</p>
  </li>
  <li><p>Text nodes: The text node is replaced with a new one corresponding
    to the new value.</p>
  </li>
  <li><p>Namespace, processing instruction, comment, and the XPath root node:
    behavior is undefined.</p>
  </li>
</ul>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>If this action is contained within an <code>action</code> element, it has
special deferred update behavior (<a href="#action-action" shape="rect"><b>10.1.1 The
action Element</b></a>).</p>
</div>
</div>

<div class="div3">
<h4><a name="action-submit" id="action-submit" shape="rect"/>10.1.10 The send
Element</h4>

<p>This action initiates submit processing by dispatching an
<code>xforms-submit</code> event. Processing of event
<code>xforms-submit</code> is defined in the processing model—see <a href="#evt-submit" shape="rect"><b>4.3.9 The xforms-submit Event</b></a>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">submission</dt>
    <dd><p>Required reference to a <code>submission</code> element.</p>
    </dd>
</dl>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>This XForms Action is a convenient way of expressing the following:</p>

<div class="exampleInner">
<pre xml:space="preserve">&lt;dispatch target="mysubmitinfo" name="xforms-submit"/&gt;</pre>
</div>
</div>
</div>

<div class="div3">
<h4><a name="action-reset" id="action-reset" shape="rect"/>10.1.11 The reset
Element</h4>

<p>This action initiates reset processing by dispatching an
<code>xforms-reset</code> event to the specified <code>model</code>.
Processing of event <code>xforms-reset</code> is defined in the processing
model—see <a href="#evt-reset" shape="rect"><b>4.3.8 The xforms-reset
Event</b></a>.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a></p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">model</dt>
    <dd><p>Required selection of instance data for reset, defined in <a href="#structure-attrs-single-node" shape="rect"><b>3.2.3 Single-Node Binding
      Attributes</b></a>.</p>
    </dd>
</dl>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>If this action is contained within an <code>action</code> element, it has
special deferred update behavior (<a href="#action-action" shape="rect"><b>10.1.1 The
action Element</b></a>).</p>
</div>
</div>

<div class="div3">
<h4><a name="action-info" id="action-info" shape="rect"/>10.1.12 The message
Element</h4>

<p>This action encapsulates a message to be displayed to the user.</p>

<p>Common Attributes: <a title="" href="#structure-attrs-common" shape="rect">Common</a>,
<a title="" href="#action-xmlevents" shape="rect">Events</a>, <a title="" href="#structure-attrs-single-node" shape="rect">Single Node Binding</a> (optional)</p>

<p>Special Attributes:</p>
<dl>
  <dt class="label">Linking Attributes</dt>
    <dd><p>Link to external message. If the link traversal fails, it is
      treated as an error (<a href="#evt-linkError" shape="rect"><b>4.5.3 The
      xforms-link-error Event</b></a>).</p>
    </dd>
  <dt class="label">level</dt>
    <dd><p>Required message level identifier, one of
      ("ephemeral"|"modeless"|"modal"|QName-but-not-NCName). This
      specification does not define behavior for QName values.</p>
    </dd>
</dl>

<p>The message specified can exist in instance data, in a remote document, or
as inline text. If more than one source of message is specified in this
element, the order of precedence is: single node binding attributes, linking
attributes, inline text.</p>

<p>A graphical browser might render a modal message as follows:</p>

<div class="exampleInner">
<pre xml:space="preserve">&lt;model&gt;
  &lt;message level="modal" ev:event="xforms-ready"&gt;This is not a drill!&lt;/message&gt;
  ...
&lt;/model&gt;</pre>
</div>

<p><img src="images/ui-input-with-alert.png" alt="An alert popup, with a helpful error message."/></p>

<p>A modeless message is the foundation for displaying a <code>help</code>
message, which a graphical browser might render as follows:</p>

<div class="exampleInner">
<pre xml:space="preserve">&lt;secret ref="/login/password"&gt;
  &lt;label&gt;Password&lt;/label&gt;
  &lt;help&gt;Have you forgotten your password? Simply call 1-900-555-1212 and have
        a major credit card handy.&lt;/help&gt;
&lt;/secret&gt;</pre>
</div>

<p><img src="images/ui-password-with-help.png" alt="A password entry form control, with a popup window below, displaying instructions for retrieving a forgotten password"/></p>

<p>An ephemeral message is the foundation for displaying a <code>hint</code>
message, which a graphical browser might render as follows:</p>

<div class="exampleInner">
<pre xml:space="preserve">&lt;input ref="po/address/street1"&gt;
  &lt;label&gt;Street&lt;/label&gt;
  &lt;hint&gt;Please enter the number and street name&lt;/hint&gt;
&lt;/input&gt;</pre>
</div>

<p><img src="images/ui-input-with-hint.png" alt="An average-looking text entry form control, with a mouse pointer visible and a tooltip below, reading 'Please enter the number and street name'"/></p>
</div>

<div class="div3">
<h4><a name="action-repeat" id="action-repeat" shape="rect"/>10.1.13 Actions
<code>insert</code>, <code>delete</code> and <code>setindex</code></h4>

<p>In addition to the action handlers detailed in this chapter, XForms
defines three actions as part of the XForms Repeat module: <a href="#action-insert" shape="rect"><b>9.3.5 The insert Element</b></a>, <a href="#action-delete" shape="rect"><b>9.3.6 The delete Element</b></a>, and <a href="#action-setRepeatCursor" shape="rect"><b>9.3.7 The setindex Element</b></a>.</p>
</div>
</div>
</div>

<div class="div1">
<h2><a name="submit" id="submit" shape="rect"/>11 Submit</h2>

<p>XForms is designed to gather <a title="instance data" href="#def-instance-data" shape="rect">instance data</a>, serialize it into an external
representation, and submit it with a protocol. XForms defines a set of
options for serialization and submission. The following sections define the
processing of instance data for submission, and the behavior for the
serialization and submission options.</p>

<div class="div2">
<h3><a name="submit-event" id="submit-event" shape="rect"/>11.1 The xforms-submit
Event</h3>

<p>Submission begins with the default action for a <code>xforms-submit</code>
event.</p>

<p>Target: <code>submission</code></p>

<p>Bubbles: Yes</p>

<p>Cancelable: Yes</p>

<p>Context Info: None</p>

<p>Under no circumstances may more than a single concurrent submit process be
under way for a particular XForms Model. From the start of the default action
of <code>xforms-submit</code>, until the completion of the default action for
<code>xforms-submit-done</code> or <code>xforms-submit-error</code>, the
default action for subsequent <code>xforms-submit</code> events is to do
nothing.</p>

<p>Otherwise, default action for this event results in the following
steps:</p>
<ol type="1">
  <li><p>A node from the instance data is selected, based on attributes on
    the <code>submission</code> element. The indicated node and all nodes for
    which it is an ancestor are considered for the remainder of the submit
    process.</p>
  </li>
  <li><p>All selected instance data is revalidated, according to the rules at
    <a href="#evt-revalidate" shape="rect"><b>4.3.5 The xforms-revalidate Event</b></a>,
    taking into account only namespace nodes considered for serialization as
    described at <a href="#structure-model-submission" shape="rect"><b>3.3.3 The
    submission Element</b></a>.. Any invalid instance data stops submit
    processing after dispatching event <code>xforms-submit-error</code>.</p>
  </li>
  <li><p>Selected instance data is serialized according to the rules stated
    at <a href="#submit-options" shape="rect"><b>11.2 Submission Options</b></a>.</p>
  </li>
  <li><p>Serialized instance data is submitted using the protocol indicated
    by the rules stated at <a href="#submit-options" shape="rect"><b>11.2 Submission
    Options</b></a>.</p>
  </li>
  <li><p>The response returned from the submission is applied as follows:</p>
    <ul>
      <li><p>For a success response including a body, when the value of the
        <code>replace</code> attribute on element <code>submission</code> is
        "<code>all</code>", the event <code>xforms-submit-done</code> is
        dispatched, and submit processing concludes with entire containing
        document being replaced with the returned body.</p>
      </li>
      <li><p>For a success response including a body of an XML media type,
        when the value of the <code>replace</code> attribute on element
        <code>submission</code> is "<code>instance</code>", the response is
        parsed as XML and all of the internal instance data corresponding to
        the submitted instance is replaced with the result, using the same
        processing as remote instance data retrieved through
        <code>src</code>, and the <code>xforms-model-construct</code> event
        is dispatched to element <code>model</code>. Submit processing then
        concludes after dispatching <code>xforms-submit-done</code>.</p>
      </li>
      <li><p>For a success response including a body of a non-XML media type,
        when the value of the <code>replace</code> attribute on element
        <code>submission</code> is "<code>instance</code>", nothing in the
        document is replaced and submit processing concludes after
        dispatching <code>xforms-submit-error</code>.</p>
      </li>
      <li><p>For a success response including a body, when the value of the
        <code>replace</code> attribute on element <code>submission</code> is
        "<code>none</code>", submit processing concludes after dispatching
        <code>xforms-submit-done</code>.</p>
      </li>
      <li><p>For a success response not including a body, submit processing
        concludes after dispatching <code>xforms-submit-done</code>.</p>
      </li>
      <li><p>Behaviors of other possible values for attribute
        <code>replace</code> are not defined in this specification.</p>
      </li>
      <li><p>For an error response nothing in the document is replaced, and
        submit processing concludes after dispatching
        <code>xforms-submit-error</code>.</p>
      </li>
    </ul>
  </li>
</ol>
</div>

<div class="div2">
<h3><a name="submit-options" id="submit-options" shape="rect"/>11.2 Submission
Options</h3>

<p>The XForms Model specifies a <code>submission</code> element containing
the following attributes that affect serialization and submission. This
section summarizes the behaviors for the allowable values of these
attributes, and introduces the following sections that define the behavior
for serialization and submission. (See <a href="#structure-model-submission" shape="rect"><b>3.3.3 The submission Element</b></a>
for additional <code>submission</code> attributes that affect
serialization.)</p>
<ul>
  <li><p><code>action</code> (xsd:anyURI)</p>
  </li>
  <li><p><code>method</code> (xsd:string, enumerated below)</p>
  </li>
</ul>

<p>For the URI scheme of <code>action</code>, XForms normatively defines a
binding to HTTP/1.1 <a href="#ref-rfc-2616" shape="rect">[RFC 2616]</a>.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Other bindings, in particular to the URI scheme "mailto:" may, and the
schemes "https:" and "file:" should, be supported. Bindings to these schemes
are not normatively defined in XForms. Implementations that choose to provide
a binding to these schemes should pay particular attention to privacy and
security concerns. Within the "http:" and "https:" schemes, form creators are
encouraged to follow the finding of the W3C Technical Architecture Group on
when to use the GET method: <a href="#ref-tag7" shape="rect">[TAG Finding 7]</a></p>
</div>

<p>The <code>method</code> attribute determines the serialization format, and
the URI scheme used in the <code>action</code> attribute determines the
submit protocol, according to the following table:</p>

<table border="1" summary="Form Serialization and Submission Behaviors">
  <thead>
    <tr>
      <th colspan="1" rowspan="1">URI scheme</th>
      <th colspan="1" rowspan="1"><code>method</code></th>
      <th colspan="1" rowspan="1">Serialization</th>
      <th colspan="1" rowspan="1">Submission</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td colspan="1" rowspan="1">http https mailto</td>
      <td colspan="1" rowspan="1">"post"</td>
      <td colspan="1" rowspan="1"><code>application/xml</code></td>
      <td colspan="1" rowspan="1">HTTP POST or equivalent</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">http https file</td>
      <td colspan="1" rowspan="1">"get"</td>
      <td colspan="1" rowspan="1"><code>application/x-www-form-urlencoded</code></td>
      <td colspan="1" rowspan="1">HTTP GET or equivalent</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">http https file</td>
      <td colspan="1" rowspan="1">"put"</td>
      <td colspan="1" rowspan="1"><code>application/xml</code></td>
      <td colspan="1" rowspan="1">HTTP PUT or equivalent</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">http https mailto</td>
      <td colspan="1" rowspan="1">"multipart-post"</td>
      <td colspan="1" rowspan="1"><code>multipart/related</code></td>
      <td colspan="1" rowspan="1">HTTP POST or equivalent</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">http https mailto</td>
      <td colspan="1" rowspan="1">"form-data-post"</td>
      <td colspan="1" rowspan="1"><code>multipart/form-data</code></td>
      <td colspan="1" rowspan="1">HTTP POST or equivalent</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">http https mailto</td>
      <td colspan="1" rowspan="1">"urlencoded-post" (Deprecated)</td>
      <td colspan="1" rowspan="1"><code>application/x-www-form-urlencoded</code></td>
      <td colspan="1" rowspan="1">HTTP POST or equivalent</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">(any)</td>
      <td colspan="1" rowspan="1">any other QNAME with no prefix</td>
      <td colspan="1" rowspan="1">N/A</td>
      <td colspan="1" rowspan="1">N/A</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">(any)</td>
      <td colspan="1" rowspan="1">any QNAME with a prefix</td>
      <td colspan="1" rowspan="1">implementation-defined</td>
      <td colspan="1" rowspan="1">implementation-defined</td>
    </tr>
  </tbody>
</table>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Foreign-namespaced attributes are allowed on element
<code>submission</code>, but no behavior is defined by XForms 1.0.</p>
</div>
</div>

<div class="div2">
<h3><a name="serialize-xml" id="serialize-xml" shape="rect"/>11.3 Serialization as
application/xml</h3>

<p>This format permits the expression of the instance data as XML that is
straightforward to process with off-the-shelf XML processing tools. In
addition, this format is capable of submission of binary content.</p>

<p>The steps for serialization are as follows:</p>
<ol type="1">
  <li><p>An XML document is produced following the rules of the XML output
    method defined in <a href="#ref-xslt" shape="rect">[XSLT 1.0]</a> section 16 and 16.1,
    using the values supplied as attributes of the <code>submission</code>
    element.</p>
    <ol type="a">
      <li><p>Handling of namespace nodes: The default behavior is that every
        namespace node is serialized according to the rules of the XML output
        method, so that at least one namespace declaration appears in the
        serialized XML for each in-scope namespace. Additional inherited
        namespaces are declared on the root element of the serialized XML.
        If, however, attribute <code>includenamespaceprefixes</code> on
        element <code>submission</code> is present, then all namespace
        declarations not visibly utilized in the instance data (as defined in
        <a href="#ref-Exc-C14N" shape="rect">[Exc-C14N]</a>) and the default namespace if
        it is empty are excluded from the root element serialization, unless
        the corresponding namespace prefix is listed in the
        <code>includenamespaceprefixes</code> attribute. The special value
        <code>#default</code> represents the default namespace.</p>
      </li>
      <li><p>Mediatype: By default, the mediatype of the serialized XML
        instance is <code>application/xml</code>, but can be changed to a
        compatible type using element <code>submission</code> attribute
        <code>mediatype</code>. Authors should ensure that the type specified
        is compatible with <code>application/xml</code>.</p>
      </li>
    </ol>
  </li>
</ol>
</div>

<div class="div2">
<h3><a name="serialize-multipart" id="serialize-multipart" shape="rect"/>11.4
Serialization as multipart/related</h3>

<p>This format is intended for integration of XForms into environments that
involve large amounts of binary data where the inclusion of the data as
<code>xsd:base64Binary</code> or <code>xsd:hexBinary</code> is
undesirable.</p>

<p>In this format, XML instance data is serialized as one part of the <a href="#ref-rfc-2387" shape="rect">[RFC 2387]</a> <code>multipart/related</code> message,
using the rules as described in <a href="#serialize-xml" shape="rect"><b>11.3
Serialization as application/xml</b></a>. Binary content from
<code>xsd:anyURI</code> instance nodes populated by the <code>upload</code>
(see <a href="#ui-upload" shape="rect"><b>8.1.6 The upload Element</b></a>) control is
serialized in separate parts of the <a href="#ref-rfc-2387" shape="rect">[RFC 2387]</a>
<code>multipart/related</code> message.</p>

<p>This format follows the rules of <code>multipart/related</code> MIME data
streams for in <a href="#ref-rfc-2387" shape="rect">[RFC 2387]</a>, with specific
requirements of this serialization listed below:</p>
<ul>
  <li><p><code>multipart/related</code> message header requirements:</p>
    <ul>
      <li><p>Must contain a <code>type</code> parameter of the mediatype of
        the serialized XML instance.</p>
      </li>
      <li><p>Must contain a <code>start</code> parameter referring to the
        Content-ID first body part (root).</p>
      </li>
    </ul>
  </li>
  <li><p>First body part (root) requirements:</p>
    <ul>
      <li><p>Must have <code>Content-Type</code> parameter of the type
        specified by the <code>submission</code> <code>mediatype</code>
        attribute.</p>
      </li>
      <li><p>Content is serialized by the rules at <a href="#serialize-xml" shape="rect"><b>11.3 Serialization as
        application/xml</b></a>.</p>
      </li>
    </ul>
  </li>
  <li><p>Subsequent part requirements:</p>
    <ul>
      <li><p>One part for each node with a datatype of
        <code>xsd:anyURI</code> populated by <code>upload</code> with:</p>
        <ul>
          <li><p>A <code>Content-Type</code> header that represents the type
            of the attachment if known, otherwise
            <code>application/octet-stream</code>.</p>
          </li>
          <li><p>A <code>Content-Transfer-Encoding</code> header.</p>
          </li>
          <li><p>A <code>Content-ID</code> header whose value matches the URI
            in the associated instance data node.</p>
          </li>
          <li><p>The binary content associated with the URI, serialized
            according to the <code>Content-Transfer-Encoding</code>
            heading.</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="exampleOuter">

<div class="exampleHead">
Example: multipart/related</div>

<div class="exampleInner">
<pre xml:space="preserve">Content-Type: multipart/related; boundary=f93dcbA3; type=application/xml; start="&lt;980119.X53GGT@example.com&gt;"
Content-Length: xxx
--f93dcbA3
Content-Type: application/xml; charset=UTF-8
Content-ID: &lt;980119.X53GGT@example.com&gt;
&lt;?xml version="1.0"?&gt;
&lt;uploadDocument&gt;
  &lt;title&gt;My Proposal&lt;/title&gt;
  &lt;author&gt;E. X. Ample&lt;/author&gt;
  &lt;summary&gt;A proposal for a new project.&lt;/summary&gt;
  &lt;notes image="cid:980119.X17AXM@example.com"&gt;(see handwritten region)&lt;/notes&gt;
  &lt;keywords&gt;project proposal funding&lt;/keywords&gt;
  &lt;readonly&gt;false&lt;/readonly&gt;
  &lt;filename&gt;image.png&lt;/filename&gt;
  &lt;content&gt;cid:980119.X25MNC@example.com&lt;/content&gt;
&lt;/uploadDocument&gt;
--f93dcbA3
Content-Type: image/png
Content-Transfer-Encoding: binary
Content-ID: &lt;980119.X25MNC@example.com&gt;
...Binary data here...
--f93dcbA3
Content-Type: image/png
Content-Transfer-Encoding: binary
Content-ID: &lt;980119.X17AXM@example.com&gt;
...Binary data here...
--f93dcbA3--</pre>
</div>
</div>
</div>

<div class="div2">
<h3><a name="serialize-form-data" id="serialize-form-data" shape="rect"/>11.5
Serialization as multipart/form-data</h3>

<p>This format is for legacy compatibility to permit the use of XForms
clients with <a href="#ref-rfc-2388" shape="rect">[RFC 2388]</a> servers. This method is
suitable for the persistence of binary content. Contextual path information,
attribute values, namespaces and namespace prefixes are not preserved. As a
result, different elements might serialize to the same name.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Existing HTML user agents fail to encode special characters (such as
double quotes) and non-ASCII characters in the <code>Content-Disposition:
form-data</code> <code>name</code> and <code>filename</code> parameters.
Since this serialization method is supported for legacy applications only,
new applications should use <code>application/xml</code> or
<code>multipart/related</code>.</p>
</div>

<p>This format follows the rules for <code>multipart/form-data</code> MIME
data streams in <a href="#ref-rfc-2388" shape="rect">[RFC 2388]</a>, with specific
requirements of this serialization listed below:</p>
<ul>
  <li><p>Each element node is visited in document order.</p>
  </li>
  <li><p>Each element that has exactly one text node child is selected for
    inclusion.</p>
  </li>
  <li><p>Element nodes selected for inclusion are as encoded as
    <code>Content-Disposition: form-data</code> MIME parts as defined in <a href="#ref-rfc-2387" shape="rect">[RFC 2387]</a>, with the <code>name</code> parameter
    being the element local name.</p>
  </li>
  <li><p>Element nodes of any datatype populated by <code>upload</code> are
    serialized as the specified content and additionally have a
    <code>Content-Disposition</code> <code>filename</code> parameter, if
    available.</p>
  </li>
  <li><p>The <code>Content-Type</code> must be <code>text/plain</code> except
    for <code>xsd:base64Binary</code>, <code>xsd:hexBinary</code>, and
    derived types, in which case the header represents the media type of the
    attachment if known, otherwise <code>application/octet-stream</code>. If
    a character set is applicable, the <code>Content-Type</code> may have a
    <code>charset</code> parameter.</p>
  </li>
</ul>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: multipart/form-data</div>

<div class="exampleInner">
<pre xml:space="preserve">Content-Type: multipart/form-data; boundary=AaB03x
Content-Length: xxx
        
--AaB03x
Content-Disposition: form-data; name="document"; filename="b.txt"
Content-Type: text/plain; charset=iso-8859-1
This is a file.
It has two lines.
--AaB03x
Content-Disposition: form-data; name="title"
Content-Type: text/plain; charset=iso-8859-1
A File
--AaB03x
Content-Disposition: form-data; name="summary"
Content-Type: text/plain; charset=iso-8859-1
This is my file
file test
--AaB03x--</pre>
</div>
</div>
</div>

<div class="div2">
<h3><a name="serialize-urlencode" id="serialize-urlencode" shape="rect"/>11.6
Serialization as application/x-www-form-urlencoded</h3>

<p>This serialization format is designed to allow the use of a form to gather
the data necessary to produce a URI that names a resource and for accessing
that resource with an HTTP GET operation.</p>

<p>This format represents an extension of the <a href="#ref-xhtml-1.0" shape="rect">[XHTML
1.0]</a> form content type <code>application/x-www-form-urlencoded</code>
with specific rules for encoding non-ASCII and reserved characters.</p>

<p>This format is not suitable for the persistence of binary content.
Therefore, it is recommended that forms capable of containing binary content
use another serialization method.</p>

<p>The steps for serialization are as follows:</p>
<ol type="1">
  <li><p>Each element node is visited in document order. Each element that
    has one text node child is selected for inclusion. Note that attribute
    information is not preserved.</p>
  </li>
  <li><p>Element nodes selected for inclusion are encoded as
    <code>EltName=value{sep}</code>, where <code>=</code> is a literal
    character, <code>{sep}</code> is the separator character from the
    <code>separator</code> attribute on <code>submission</code>,
    <code>EltName</code> represents the element local name, and
    <code>value</code> represents the contents of the text node. Note that
    contextual path information is not preserved, nor are namespaces or
    namespace prefixes. As a result, different elements might serialize to
    the same name.</p>
    <ul>
      <li><p>The encoding of <code>EltName</code> and <code>value</code> are
        as follows: space characters are replaced by <code>+</code>, and then
        non-ASCII and reserved characters (as defined by <a href="#ref-rfc-2396" shape="rect">[RFC 2396]</a> as amended by subsequent
        documents in the IETF track) are escaped by replacing the character
        with one or more octets of the UTF-8 representation of the character,
        with each octet in turn replaced by <code>%HH</code>, where
        <code>HH</code> represents the uppercase hexadecimal notation for the
        octet value and <code>%</code> is a literal character. Line breaks
        are represented as "CR LF" pairs (i.e., <code>%0D%0A</code>).</p>
      </li>
    </ul>
  </li>
  <li><p>All such encodings are concatenated, maintaining document order.</p>
  </li>
</ol>

<p>Example:</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: application/x-www-form-urlencoded</div>

<div class="exampleInner">
<pre xml:space="preserve">GivenName=Ren%C3%A9;</pre>
</div>

<p>This format consists of simple name-value pairs.</p>

<div class="exampleInner">
<pre xml:space="preserve">&lt;PersonName title="Mr"&gt;
  &lt;GivenName&gt;René&lt;/GivenName&gt;
&lt;/PersonName&gt;</pre>
</div>

<p>Here is the instance data for the above example. Note that very little of
the data is preserved. Authors desiring greater data integrity should select
a different serialization format.</p>
</div>
</div>

<div class="div2">
<h3><a name="send-post" id="send-post" shape="rect"/>11.7 The post, multipart-post,
form-data-post, and urlencoded-post Submit Methods</h3>

<p>These submit methods represent HTTP POST or the equivalent concept (such
as a mail message). The serialized form data is delivered as the message
body.</p>
</div>

<div class="div2">
<h3><a name="send-put" id="send-put" shape="rect"/>11.8 The put Submit Method</h3>

<p>This submit method represents HTTP PUT or the equivalent concept (such as
writing to a local file). The serialized form data is delivered as the
message body.</p>
</div>

<div class="div2">
<h3><a name="send-get" id="send-get" shape="rect"/>11.9 The get Submit Method</h3>

<p>This submit method represents HTTP GET or the equivalent concept. The
serialized form data is delivered as part of the URI that is requested during
the submit process.</p>

<p>This method is not suitable for submission of forms that are intended to
change state or cause other actions to take place at the server. See <a href="#ref-rfc-2616" shape="rect">[RFC 2616]</a> for recommended uses of HTTP GET.</p>

<p>The URI is constructed as follows:</p>
<ul>
  <li><p>The submit URI from the <code>action</code> attribute is examined.
    If it does not already contain a <code>?</code> (question mark)
    character, one is appended. If it does already contain a question mark
    character, then a separator character from the attribute
    <code>separator</code> is appended.</p>
  </li>
  <li><p>The serialized form data is appended to the URI.</p>
  </li>
</ul>

<p>No message body is sent with the request.</p>
</div>
</div>

<div class="div1">
<h2><a name="conform" id="conform" shape="rect"/>12 Conformance</h2>

<div class="div2">
<h3><a name="conform-levels" id="conform-levels" shape="rect"/>12.1 Conformance
Levels</h3>

<p>The XForms specification is intended for implementation on hardware
platforms of all sizes, from tiny hand-held devices to high-powered servers.
For this reason, a separate document is being developed to describe a
conformance profile of XForms that can be processed with fewer resources.</p>

<div class="div3">
<h4><a name="conform-levels-full" id="conform-levels-full" shape="rect"/>12.1.1 XForms
Full</h4>

<p>This conformance level is suitable for more powerful forms processing,
such as might be found on a standard desktop browser or a distributed XForms
Processor involving server-side components. <b>XForms Full</b>
implementations must return "<code>full</code>" from the
<code>property</code> method (defined at <a href="#fn-property" shape="rect"><b>7.9.1 The
property() Function</b></a> ) called with the
"<code>conformance-level</code>" parameter string.</p>
</div>
</div>

<div class="div2">
<h3><a name="conform-desc" id="conform-desc" shape="rect"/>12.2 Conformance
Description</h3>

<div class="div3">
<h4><a name="conform-desc-processors" id="conform-desc-processors" shape="rect"/>12.2.1
Conforming XForms Processors</h4>

<p>All XForms Processors must conform to the following specifications, except
as qualified below:</p>
<ul>
  <li><p><a href="#ref-xml-1.0" shape="rect">[XML 1.0]</a></p>
  </li>
  <li><p><a href="#ref-xml-names" shape="rect">[XML Names]</a></p>
  </li>
  <li><p><a href="#ref-xml-events" shape="rect">[XML Events]</a></p>
  </li>
  <li><p><a href="#ref-xpath-1.0" shape="rect">[XPath 1.0]</a> Implementing all
    features.</p>
  </li>
  <li><p><a href="#ref-xschema-2" shape="rect">[XML Schema part 2]</a></p>
  </li>
</ul>

<p>All XForms Processors must fully support the following XForms modules:
Core; MustUnderstand; Form Controls; Group; Switch; Repeat; and Action.</p>

<p>All XForms Processors must also support: the XForms Processing Model and
all events listed at <a href="#rpm" shape="rect"><b>4 Processing Model</b></a>; the
<code>http</code> scheme for processing xsd:anyURI; all serialization methods
defined at <a href="#submit" shape="rect"><b>11 Submit</b></a>.</p>

<p>A host language may introduce additional conformance requirements.</p>

<p>XForms Full Processors must implement all required features defined in
this specification.</p>
</div>

<div class="div3">
<h4><a name="conform-desc-documents" id="conform-desc-documents" shape="rect"/>12.2.2
Conforming XForms Documents</h4>

<p>All XForms Containing Documents must conform to the following
specifications, except as qualified below:</p>
<ul>
  <li><p><a href="#ref-xml-1.0" shape="rect">[XML 1.0]</a></p>
  </li>
  <li><p><a href="#ref-xml-names" shape="rect">[XML Names]</a></p>
  </li>
  <li><p><a href="#ref-xml-events" shape="rect">[XML Events]</a></p>
  </li>
  <li><p><a href="#ref-xschema-2" shape="rect">[XML Schema part 2]</a></p>
  </li>
</ul>

<p>XForms elements are typically inserted into a containing document in
multiple places. The root element for each individual fragment must be
<code>model</code>, a form control, <code>group</code>, <code>repeat</code>,
or <code>switch</code>. Individual XForms fragments must be schema-valid
against the Schema for XForms (<a href="#schema" shape="rect"><b>A Schema for
XForms</b></a>).</p>

<p>A host language may introduce additional conformance requirements.</p>

<p>All XForms Full conforming documents must conform to all required portions
of this specification.</p>
</div>

<div class="div3">
<h4><a name="conform-desc-generators" id="conform-desc-generators" shape="rect"/>12.2.3
Conforming XForms Generators</h4>

<p>XForms generators must generate conforming XForms documents.</p>
</div>
</div>
</div>

<div class="div1">
<h2><a name="terms" id="terms" shape="rect"/>13 Glossary Of Terms</h2>
<dl>
  <dt class="label">Binding</dt>
    <dd><p>[<a name="def-binding" id="def-binding" title="binding" shape="rect">Definition</a>: A "binding" connects an instance data
      node to a form control or to a model item constraint by using a binding
      expression as a locater.]</p>
    </dd>
  <dt class="label">Binding expression</dt>
    <dd><p>[<a name="def-binding-expression" id="def-binding-expression" title="binding expression" shape="rect">Definition</a>: An <a href="#ref-xpath-1.0" shape="rect">[XPath 1.0]</a> PathExpr used in a binding.]</p>
    </dd>
  <dt class="label">Model Binding expression</dt>
    <dd><p>[<a name="def-model-binding-expression" id="def-model-binding-expression" title="model binding expression" shape="rect">Definition</a>: An <a href="#ref-xpath-1.0" shape="rect">[XPath 1.0]</a> PathExpr used in a binding that
      declares a model item property.]</p>
    </dd>
  <dt class="label">UI or Action Binding expression</dt>
    <dd><p>[<a name="def-ui-or-action-binding-expression" id="def-ui-or-action-binding-expression" title="UI or action binding expression" shape="rect">Definition</a>: An <a href="#ref-xpath-1.0" shape="rect">[XPath 1.0]</a> PathExpr used in binding a form
      control to the instance, or to specify the node or node-set for
      operation by an action.]</p>
    </dd>
  <dt class="label">Computed expression</dt>
    <dd><p>[<a name="def-computed-expression" id="def-computed-expression" title="computed expression" shape="rect">Definition</a>: An <a href="#ref-xpath-1.0" shape="rect">[XPath 1.0]</a> expression used by model item
      properties such as relevant and calculate to include dynamic
      functionality in XForms.]</p>
    </dd>
  <dt class="label">Containing document</dt>
    <dd><p>[<a name="def-containing-document" id="def-containing-document" title="containing document" shape="rect">Definition</a>: A specific document, for
      example an XHTML document, in which one or more &lt;model&gt; elements
      are found.]</p>
    </dd>
  <dt class="label">Datatype</dt>
    <dd><p>[<a name="def-datatype" id="def-datatype" title="datatype" shape="rect">Definition</a>: From XML Schema <a href="#ref-xschema-2" shape="rect">[XML Schema part 2]</a>: A 3-tuple, consisting of
      a) a set of distinct values, called its value space, b) a set of
      lexical representations, called its lexical space, and c) a set of
      facets that characterize properties of the value space, individual
      values or lexical items.]</p>
    </dd>
  <dt class="label">Facet</dt>
    <dd><p>[<a name="def-facet" id="def-facet" title="facet" shape="rect">Definition</a>:
      From XML Schema <a href="#ref-xschema-2" shape="rect">[XML Schema part 2]</a>: A
      single defining aspect of a value space. Generally speaking, each facet
      characterizes a value space along independent axes or dimensions.]</p>
    </dd>
  <dt class="label">First node rule</dt>
    <dd><p>[<a name="def-first-node-rule" id="def-first-node-rule" title="first node rule" shape="rect">Definition</a>: When a UI Single-Node Binding
      attribute selects a node-set of size &gt; 1, the first node in the
      node-set is used.]</p>
    </dd>
  <dt class="label">Form control</dt>
    <dd><p>[<a name="def-form-control" id="def-form-control" title="form control" shape="rect">Definition</a>: An XForms user interface control
      that serves as a point of user interaction.]</p>
    </dd>
  <dt class="label">Host language</dt>
    <dd><p>[<a name="def-host-language" id="def-host-language" title="host language" shape="rect">Definition</a>: An XML vocabulary, such as XHTML,
      into which XForms is embedded.]</p>
    </dd>
  <dt class="label">Instance data</dt>
    <dd><p>[<a name="def-instance-data" id="def-instance-data" title="instance data" shape="rect">Definition</a>: An internal tree representation
      of the values and state of all the instance data nodes associated with
      a particular form.]</p>
    </dd>
  <dt class="label">Instance data node</dt>
    <dd><p>[<a name="def-instance-data-node" id="def-instance-data-node" title="instance data item" shape="rect">Definition</a>: An <a href="#ref-xpath-1.0" shape="rect">[XPath 1.0]</a> node from the instance data.]</p>
    </dd>
  <dt class="label">Lexical space</dt>
    <dd><p>[<a name="def-lexical-space" id="def-lexical-space" title="lexical space" shape="rect">Definition</a>: From XML Schema <a href="#ref-xschema-2" shape="rect">[XML Schema part 2]</a>: A lexical space is the
      set of valid literals for a datatype.]</p>
    </dd>
  <dt class="label">Model item</dt>
    <dd><p>[<a name="def-model-item" id="def-model-item" title="model item" shape="rect">Definition</a>: An instance data node with
      associated constraints.]</p>
    </dd>
  <dt class="label">Model item property</dt>
    <dd><p>[<a name="def-model-item-property" id="def-model-item-property" title="model item property" shape="rect">Definition</a>: An XForms-specific
      annotation to an instance data node.]</p>
    </dd>
  <dt class="label">Schema constraint</dt>
    <dd><p>[<a name="def-Schema-constraint" id="def-Schema-constraint" title="Schema constraint" shape="rect">Definition</a>: A restriction, applied to
      form data, based on XML Schema datatypes.]</p>
    </dd>
  <dt class="label">Value space</dt>
    <dd><p>[<a name="def-value-space" id="def-value-space" title="value space" shape="rect">Definition</a>: From XML Schema <a href="#ref-xschema-2" shape="rect">[XML Schema part 2]</a>: A set of values for a
      given datatype. Each value in the value space of a datatype is denoted
      by one or more literals in its lexical space.]</p>
    </dd>
  <dt class="label">XForms Model</dt>
    <dd><p>[<a name="def-XForms-Model" id="def-XForms-Model" title="XForms Model" shape="rect">Definition</a>: The non-visible definition of an
      XML form as specified by XForms. The XForms Model defines the
      individual model items and constraints and other run-time aspects of
      XForms.]</p>
    </dd>
  <dt class="label">XForms Processor</dt>
    <dd><p>[<a name="def-XForms-Processor" id="def-XForms-Processor" title="XForms Processor" shape="rect">Definition</a>: A software application or
      program that implements and conforms to the XForms specification.]</p>
    </dd>
</dl>
</div>
</div>

<div class="back">

<div class="div1">
<h2><a name="schema" id="schema" shape="rect"/>A Schema for XForms</h2>

<p>The normative XML Schema for XForms is located at <a href="http://www.w3.org/MarkUp/Forms/2002/XForms-Schema.xsd" shape="rect">http://www.w3.org/MarkUp/Forms/2002/XForms-Schema.xsd</a>.</p>

<div class="div2">
<h3><a name="schema-events" id="schema-events" shape="rect"/>A.1 Schema for XML
Events</h3>

<p>This XML Schema for XML Events is referenced by the XML Schema for XForms,
and located at <a href="http://www.w3.org/TR/2003/REC-xml-events-20031014/#a_schema_attribs" shape="rect">http://www.w3.org/TR/2003/REC-xml-events-20031014/#a_schema_attribs</a>.</p>
</div>
</div>

<div class="div1">
<h2><a name="references" id="references" shape="rect"/>B References</h2>

<div class="div2">
<h3><a name="references-norm" id="references-norm" shape="rect"/>B.1 Normative
References</h3>
<dl>
  <dt class="label"><a name="ref-Exc-C14N" id="ref-Exc-C14N" shape="rect"/>Exc-C14N</dt>
    <dd><a href="http://www.w3.org/TR/2002/REC-xml-exc-c14n-20020718/" shape="rect"><cite>Exclusive
      XML Canonicalization Version 1.0</cite></a>, J. Boyer, D. Eastlake 3rd,
      J. Reagle, 2002. W3C Recommendation available at
      http://www.w3.org/TR/2002/REC-xml-exc-c14n-20020718/.</dd>
  <dt class="label"><a name="ref-rfc-2119" id="ref-rfc-2119" shape="rect"/>RFC 2119</dt>
    <dd><a href="http://www.ietf.org/rfc/rfc2119.txt" shape="rect"><cite>RFC 2119: Key
      words for use in RFCs to Indicate Requirement Levels</cite></a>, S.
      Bradner, 1997. Available at http://www.ietf.org/rfc/rfc2119.txt.</dd>
  <dt class="label"><a name="ref-rfc-2387" id="ref-rfc-2387" shape="rect"/>RFC 2387</dt>
    <dd><a href="http://www.ietf.org/rfc/rfc2387.txt" shape="rect"><cite>RFC 2387: The
      MIME Multipart/Related Content-type</cite></a>, E. Levinson, 1998.
      Available at: http://www.ietf.org/rfc/rfc2387.txt.</dd>
  <dt class="label"><a name="ref-rfc-2388" id="ref-rfc-2388" shape="rect"/>RFC 2388</dt>
    <dd><a href="http://www.ietf.org/rfc/rfc2388.txt" shape="rect"><cite>RFC 2388:
      Returning Values from Forms: multipart/form-data</cite></a>, L.
      Masinter, 1998. Available at: http://www.ietf.org/rfc/rfc2388.txt.</dd>
  <dt class="label"><a name="ref-rfc-2396" id="ref-rfc-2396" shape="rect"/>RFC 2396</dt>
    <dd><a href="http://www.ietf.org/rfc/rfc2396.txt" shape="rect"><cite>RFC 2396: Uniform
      Resource Identifiers (URI): Generic Syntax</cite></a>, T. Berners-Lee,
      R. Fielding, L. Masinter, 1998. Available at:
      http://www.ietf.org/rfc/rfc2396.txt.</dd>
  <dt class="label"><a name="ref-rfc-2616" id="ref-rfc-2616" shape="rect"/>RFC 2616</dt>
    <dd><a href="http://www.ietf.org/rfc/rfc2616.txt" shape="rect"><cite>RFC 2616:
      Hypertext Transfer Protocol -- HTTP/1.1</cite></a>, R. Fielding, J.
      Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, T.
      Berners-Lee,1999. Available at:
    http://www.ietf.org/rfc/rfc2616.txt.</dd>
  <dt class="label"><a name="ref-xhtml-mod" id="ref-xhtml-mod" shape="rect"/>XHTML
  Modularization</dt>
    <dd><a href="http://www.w3.org/TR/xhtml-modularization/" shape="rect"><cite>Modularization
      of XHTML</cite></a>, M. Altheim, et al., 2001. W3C Recommendation
      available at http://www.w3.org/TR/xhtml-modularization/.</dd>
  <dt class="label"><a name="ref-xforms-req" id="ref-xforms-req" shape="rect"/>XForms
  Req</dt>
    <dd><a href="http://www.w3.org/TR/xhtml-forms-req" shape="rect"><cite>XForms
      Requirements</cite></a>, Micah Dubinko, Dave Raggett, Sebastian
      Schnitzenbaumer, Malte Wedel, 2001. W3C Working Draft available at:
      http://www.w3.org/TR/xhtml-forms-req.</dd>
  <dt class="label"><a name="ref-xml-base" id="ref-xml-base" shape="rect"/>XML Base</dt>
    <dd><a href="http://www.w3.org/TR/xmlbase/" shape="rect"><cite>XML Base</cite></a>,
      Jonathan Marsh, 2001. W3C Recommendation available at:
      http://www.w3.org/TR/xmlbase/.</dd>
  <dt class="label"><a name="ref-xml-events" id="ref-xml-events" shape="rect"/>XML
  Events</dt>
    <dd><a href="http://www.w3.org/TR/xml-events/" shape="rect"><cite>XML Events - An
      events syntax for XML</cite></a>, Steven Pemberton, T. V. Raman, Shane
      P. McCarron, 2002. W3C <span class="diff-chg">Proposed</span>
      Recommendation available at: http://www.w3.org/TR/xml-events/.</dd>
  <dt class="label"><a name="ref-xml-1.0" id="ref-xml-1.0" shape="rect"/>XML 1.0</dt>
    <dd><a href="http://www.w3.org/TR/REC-xml" shape="rect"><cite>Extensible Markup
      Language (XML) 1.0 (Second Edition)</cite></a>, Tim Bray, Jean Paoli,
      C. M. Sperberg-McQueen, Eve Maler, 2000. W3C Recommendation available
      at: http://www.w3.org/TR/REC-xml</dd>
  <dt class="label"><a name="ref-xml-names" id="ref-xml-names" shape="rect"/>XML
  Names</dt>
    <dd><a href="http://www.w3.org/TR/REC-xml-names/" shape="rect"><cite>Namespaces in
      XML</cite></a>, Tim Bray, Dave Hollander, Andrew Layman, 1999. W3C
      Recommendation available at: http://www.w3.org/TR/REC-xml-names.</dd>
  <dt class="label"><a name="ref-xpath-1.0" id="ref-xpath-1.0" shape="rect"/>XPath
  1.0</dt>
    <dd><a href="http://www.w3.org/TR/xpath" shape="rect"><cite>XML Path Language (XPath)
      Version 1.0</cite></a>, James Clark, Steve DeRose, 1999. W3C
      Recommendation available at: http://www.w3.org/TR/xpath.</dd>
  <dt class="label"><a name="ref-xschema-1" id="ref-xschema-1" shape="rect"/>XML Schema
  part 1</dt>
    <dd><a href="http://www.w3.org/TR/xmlschema-1/" shape="rect"><cite>XML Schema Part 1:
      Structures</cite></a>, Henry S. Thompson, David Beech, Murray Maloney,
      Noah Mendelsohn, 2001. W3C Recommendation available at:
      http://www.w3.org/TR/xmlschema-1/.</dd>
  <dt class="label"><a name="ref-xschema-2" id="ref-xschema-2" shape="rect"/>XML Schema
  part 2</dt>
    <dd><a href="http://www.w3.org/TR/xmlschema-2/" shape="rect"><cite>XML Schema Part 2:
      Datatypes</cite></a>, Paul V. Biron, Ashok Malhotra, 2001. W3C
      Recommendation available at: http://www.w3.org/TR/xmlschema-2/.</dd>
  <dt class="label"><a name="ref-xslt" id="ref-xslt" shape="rect"/>XSLT 1.0</dt>
    <dd><a href="http://www.w3.org/TR/xslt" shape="rect"><cite>XSL Transformations (XSLT)
      Version 1.0</cite></a>, James Clark, 1999. W3C Recommendation available
      at: http://www.w3.org/TR/xslt.</dd>
</dl>
</div>

<div class="div2">
<h3><a name="references-inform" id="references-inform" shape="rect"/>B.2 Informative
References</h3>
<dl>
  <dt class="label"><a name="ref-art" id="ref-art" shape="rect"/>Algorithms</dt>
    <dd><cite>The Art of Computer Programming: Volume 1 Fundamental
      Algorithms</cite>, D. E. Knuth, Addison-Wesley, Reading, MA. 1968.
      Third edition, 1997. ISBN:0-2018-9683-4.</dd>
  <dt class="label"><a name="aui-conversational-gestures" id="aui-conversational-gestures" shape="rect"/>AUI97</dt>
    <dd><cite>Auditory User Interfaces--Toward The Speaking Computer</cite>,
      T. V. Raman, Kluwer Academic Publishers, 1997. ISBN:0-7923-9984-6.</dd>
  <dt class="label"><a name="ref-css2" id="ref-css2" shape="rect"/>CSS2</dt>
    <dd><a href="http://www.w3.org/TR/REC-CSS2/" shape="rect"><cite>Cascading Style
      Sheets, level 2 (CSS2) Specification</cite></a>, Bert Bos, Håkon Wium
      Lie, Chris Lilley, Ian Jacobs, 1998. W3C Recommendation available at:
      http://www.w3.org/TR/REC-CSS2.</dd>
  <dt class="label"><a name="ref-ddj" id="ref-ddj" shape="rect"/>DDJ-ArrayDoubling</dt>
    <dd><cite>Resizable Arrays, Heaps and Hash Tables</cite>, John Boyer,
      Doctor Dobb's Journal, CMP Media LLC, January 1998 Issue.</dd>
  <dt class="label"><a name="ref-dom2-core" id="ref-dom2-core" shape="rect"/>DOM2
  Core</dt>
    <dd><a href="http://www.w3.org/TR/DOM-Level-2-core/" shape="rect"><cite>Document
      Object Model (DOM) Level 2 Core Specification</cite></a>, Tom Pixley,
      2000. W3C Recommendation available at:
      http://www.w3.org/TR/DOM-Level-2-core/.</dd>
  <dt class="label"><a name="ref-dom2-events" id="ref-dom2-events" shape="rect"/>DOM2
  Events</dt>
    <dd><a href="http://www.w3.org/TR/DOM-Level-2-Events/" shape="rect"><cite>Document
      Object Model (DOM) Level 2 Events Specification</cite></a>, Tom Pixley,
      2000. W3C Recommendation available at:
      http://www.w3.org/TR/DOM-Level-2-Events/.</dd>
  <dt class="label"><a name="ref-exslt" id="ref-exslt" shape="rect"/>EXSLT</dt>
    <dd><a href="http://www.exslt.org" shape="rect"><cite>EXSLT Web site</cite></a>.
      Available at http://www.exslt.org.</dd>
  <dt class="label"><a name="ref-java-unicode-blocks" id="ref-java-unicode-blocks" shape="rect"/>Java Unicode Blocks</dt>
    <dd><a href="http://java.sun.com/j2se/1.4/docs/api/java/lang/Character.UnicodeBlock.html" shape="rect"><cite>Java
      2 Platform, Standard Edition, v 1.4.0 API Specification; Class
      Character.UnicodeBlock</cite></a>, Sun Microsystems, Inc, 2002.
      Available at
      http://java.sun.com/j2se/1.4/docs/api/java/lang/Character.UnicodeBlock.html.</dd>
  <dt class="label"><a name="ref-p3p-1.0" id="ref-p3p-1.0" shape="rect"/>P3P 1.0</dt>
    <dd><a href="http://www.w3.org/TR/P3P/" shape="rect"><cite>The Platform for Privacy
      Preferences 1.0 (P3P1.0) Specification</cite></a>, Lorrie Cranor, Marc
      Langheinrich, Massimo Marchiori, Martin Presler-Marshall, Joseph
      Reagle, 2001. W3C Last Call Working Draft available at:
      http://www.w3.org/TR/P3P/.</dd>
  <dt class="label"><a name="ref-svg11" id="ref-svg11" shape="rect"/>SVG 1.1</dt>
    <dd><a href="http://www.w3.org/TR/SVG11/" shape="rect"><cite>SVG 1.1</cite></a>, Jon
      Ferraiolo, FUJISAWA Jun, Dean Jackson, 2003. W3C Recommendation
      available at: http://www.w3.org/TR/SVG11/.</dd>
  <dt class="label"><a name="ref-tag7" id="ref-tag7" shape="rect"/>TAG Finding 7</dt>
    <dd><a href="http://www.w3.org/2001/tag/doc/get7" shape="rect"><cite>TAG Finding:
      URIs, Addressability, and the use of HTTP GET</cite></a>, Dan Connolly,
      2002. Available at: http://www.w3.org/2001/tag/doc/get7</dd>
  <dt class="label"><a name="ref-uaag-1.0" id="ref-uaag-1.0" shape="rect"/>UAAG 1.0</dt>
    <dd><a href="http://www.w3.org/TR/UAAG10/" shape="rect"><cite>User Agent Accessibility
      Guidelines 1.0</cite></a>, Ian Jacobs, Jon Gunderson, Eric Hansen,
      2002. Working Draft available at http://www.w3.org/TR/UAAG10/.</dd>
  <dt class="label"><a name="ref-unicode-scripts" id="ref-unicode-scripts" shape="rect"/>Unicode Scripts</dt>
    <dd><a href="http://www.unicode.org/unicode/reports/tr24/" shape="rect"><cite>Script
      Names</cite></a>, Mark Davis, 2001. Unicode Technical Report #24
      available at http://www.unicode.org/unicode/reports/tr24/.</dd>
  <dt class="label"><a name="ref-xforms-basic" id="ref-xforms-basic" shape="rect"/>XForms Basic</dt>
    <dd><a href="http://www.w3.org/TR/xforms-basic/" shape="rect"><cite>XForms Basic
      Profile</cite></a>, Micah Dubinko, T. V. Raman, 2003. W3C Candidate
      Recommendation available at: http://www.w3.org/TR/xforms-basic/.</dd>
  <dt class="label"><a name="ref-xhtml-1.0" id="ref-xhtml-1.0" shape="rect"/>XHTML
  1.0</dt>
    <dd><a href="http://www.w3.org/TR/xhtml1/" shape="rect"><cite>XHTML 1.0: The
      Extensible HyperText Markup Language - A Reformulation of HTML 4 in XML
      1.0</cite></a>, Steven Pemberton, et al., 2000. W3C Recommendation
      available at: http://www.w3.org/TR/xhtml1.</dd>
  <dt class="label"><a name="ref-xlink-1.0" id="ref-xlink-1.0" shape="rect"/>XLink
  1.0</dt>
    <dd><a href="http://www.w3.org/TR/xlink/" shape="rect"><cite>XML Linking Language
      (XLink) Version 1.0</cite></a>, Steve DeRose, Eve Maler, David Orchard,
      2001. W3C Recommendation available at: http://www.w3.org/TR/xlink.</dd>
  <dt class="label"><a name="ref-xschema-0" id="ref-xschema-0" shape="rect"/>XML Schema
  part 0</dt>
    <dd><a href="http://www.w3.org/TR/xmlschema-0/" shape="rect"><cite>XML Schema Part 0:
      Primer</cite></a>, David C. Fallside, 2001. W3C Recommendation
      available at: http://www.w3.org/TR/xmlschema-0/.</dd>
</dl>
</div>
</div>

<div class="div1">
<h2><a name="privsec" id="privsec" shape="rect"/>C Privacy Considerations</h2>

<div class="div2">
<h3><a name="id2677149" id="id2677149" shape="rect"/>C.1 Using P3P with XForms</h3>

<p>P3P privacy policies may be associated with any forms transmitted over
HTTP that have URIs associated with them. In the future, mechanisms may be
specified for associating P3P policies with content transmitted over other
protocols.</p>

<p>P3P allows for policies to be associated with an individual URI or a set
of URIs. By associating a separate policy with each URI a site can declare a
very precise policy that addresses exactly what data is collected with a
particular HTTP request and how that data will be used. However, site
management is substantially easier for many sites if they declare a single
policy that covers many URIs, or even their entire Web presence.</p>

<p>The P3P specification specifies several methods for referencing a P3P
policy reference file, which in turn associates P3P policies with URIs and
cookies. XForms can be P3P enabled using any of the methods that are
appropriate for the Web site in which they are embedded. Some special
considerations regarding forms are addressed in the P3P Specification. <a href="#ref-p3p-1.0" shape="rect">[P3P 1.0]</a></p>

<p>Different P3P policies may be applied to the representation of a form
embedded in a containing document to that which is associated with the data
submitted via that form. If the form representation is served from a
different server than the form is submitted to, it is likely that separate
P3P policy reference files and policies will be needed. Typically the form
representation causes only <em>clickstream</em> data (as defined in <a href="#ref-p3p-1.0" shape="rect">[P3P 1.0]</a> section 5.6.4) to be transferred, while a
form submission causes much more data to be transferred.</p>
</div>
</div>

<div class="div1">
<h2><a name="recalc" id="recalc" shape="rect"/>D Recalculation Sequence Algorithm</h2>

<p>XForms Processors are free (and encouraged) to skip or optimize any steps
in this algorithm, as long as the end result is the same. The XForms
recalculation algorithm considers model items and model item properties to be
vertices in a directed graph. Edges between the vertices represent
computational dependencies between vertices.</p>

<p>Following is the default handling for a <code>recalculate</code> action.
Action <code>recalculate</code> is defined in <a href="#action-recalculate" shape="rect"><b>10.1.4 The recalculate Element</b></a>.</p>
<ol type="1">
  <li><p>A master dependency directed graph is created as detailed in <a href="#rpm-processing-recalc-mddg" shape="rect"><b>D.1 Details on Creating the Master
    Dependency Directed Graph</b></a>.</p>
  </li>
  <li><p>To provide consistent behavior, implementations must reduce the
    number of vertices to be processed by computing a pertinent dependency
    subgraph consisting only of vertices and edges that are reachable from
    nodes that require recomputation. This is detailed in <a href="#rpm-processing-recalc-pds" shape="rect"><b>D.2 Details on Creating the
    Pertinent Dependency Subgraph</b></a>. Note that on a first recomputation
    (such as on form load), the pertinent dependency subgraph will be the
    same as the master dependency directed graph.</p>
  </li>
  <li><p>A topological sort is performed on the vertices of the pertinent
    dependency subgraph, resulting in an order of evaluation in which each
    vertex is evaluated only after those vertices on which it depends and
    before all vertices which depend on it. The topological sort algorithm is
    discussed at <a href="#ref-art" shape="rect">[Algorithms]</a>.</p>
  </li>
  <li><p>The <code>recalculate</code> process completes.</p>
  </li>
</ol>

<div class="div2">
<h3><a name="rpm-processing-recalc-mddg" id="rpm-processing-recalc-mddg" shape="rect"/>D.1 Details on Creating the Master
Dependency Directed Graph</h3>

<p>The master dependency directed graph can be considered an array with one
record for each vertex, each having the following fields:</p>

<blockquote>
  <p><b>InstanceNode</b>: a reference to the associated instance data node<br clear="none"/>
  <b>type</b>: indicates the aspect of the instance node represented by the
  vertex (the text content or a model item property such as readOnly or
  required)<br clear="none"/>
  <b>depList</b>: a list of vertices that refer to this vertex<br clear="none"/>
  <b>in-degree</b>: the number of vertices on which this vertex depends<br clear="none"/>
  <b>visited</b>: a flag used to ensure vertices are not added to a subgraph
  multiple times<br clear="none"/>
  <b>index</b>: an association between vertices in the master dependency
  directed graph and a subgraph</p>
</blockquote>

<p>The <code>depList</code> for each vertex is assigned to be the referenced
XML nodes of a given instance node, which are obtained by parsing the
computed expression in the node (e.g., the calculate, relevant, readonly, or
required property). Any expression violating any Binding Expression
Constraint causes an exception (<a href="#evt-computeException" shape="rect"><b>4.5.4 The
xforms-compute-exception Event</b></a>), terminating the
<code>recalculate</code> process.</p>

<p>The <code>depList</code> for a vertex <code>v</code> is assigned to be the
vertices other than <code>v</code> whose computational expressions reference
<code>v</code> (described below). Vertex <code>v</code> is excluded from its
own <code>depList</code> to allow self-references to occur without causing a
circular reference exception.</p>

<p>A computational expression appearing in a <code>calculate</code> attribute
controls the text content (value) of one or more instance nodes. A vertex
exists for each instance node to represent the expression in the context of
the node. Likewise, computational expressions for model item properties such
as <code>readOnly</code> and <code>required</code> are applied to one or more
instance nodes, and vertices are created to represent such expressions in the
context of each applicable node. The computational expression of each vertex
must be examined to determine the XML nodes to which it refers. Any
expression violating any Binding Expression Constraint causes an exception
(<a href="#evt-computeException" shape="rect"><b>4.5.4 The xforms-compute-exception
Event</b></a>), terminating the <code>recalculate</code> process. A
computation expression refers to a vertex <code>v</code> if a subexpression
indicates the InstanceNode for <code>v</code> and <code>v</code> represents
the instance node text content (its value). In this version of XForms, model
item properties such as <code>readOnly</code> and <code>required</code>
cannot be referenced in an expression.</p>
</div>

<div class="div2">
<h3><a name="rpm-processing-recalc-pds" id="rpm-processing-recalc-pds" shape="rect"/>D.2 Details on Creating the Pertinent
Dependency Subgraph</h3>

<p>If all calculations must be performed, which is the case on form load,
then the pertinent dependency subgraph is simply a duplicate of the master
dependency directed graph. If the recalculation algorithm is invoked with a
list of changed instance data nodes since the last recalculation, then the
pertinent dependency subgraph is obtained by exploring the paths of edges and
vertices in the computational dependency directed graph that are reachable
from each vertex in the change list. The method of path exploration can be
depth first search, a suitable version of which appears in the pseudo-code
below.</p>

<div class="exampleOuter">

<div class="exampleHead">
Example: Sample Algorithm to Create the Pertinent Dependency Subgraph</div>

<p>This algorithm creates a pertinent dependency subgraph <code>S</code> from
a list of changed instance data nodes <code>L&lt;sub&gt;c&lt;/sub&gt;</code>.
Variables such as <code>v</code> and <code>w</code> represent vertices in the
master dependency directed graph. The same variables ending with
<code>S</code> indicate vertices in the pertinent dependency subgraph
<code>S</code>.</p>

<div class="exampleInner">
<pre xml:space="preserve">// Use depth-first search to explore master digraph subtrees rooted at
// each changed vertex. A 'visited' flag is used to stop exploration
// at the boundaries of previously explored subtrees (because subtrees
// can overlap in directed graphs).
for each vertex <em>r</em> in <em>Lc</em>
  if <em>r</em> is not visited
  {
    Push the pair (NIL, <em>r</em>) onto a stack
    while the stack is not empty
    {
      (<em>v</em>, <em>w</em>) = pop dependency pair from stack
      if <em>w</em> is not visited
      {
        Set the visited flag of <em>w</em> to true
        Create a vertex <em>wS</em> in S to represent <em>w</em>
        Set the index of <em>w</em> equal to the array location of <em>wS</em>
        Set the index of <em>wS</em> equal to the array location of <em>w</em>
        Set the InstanceNode of <em>wS</em> equal to the InstanceNode of <em>w</em>
        Set the type of <em>wS</em> equal to the type of <em>w</em>
        For each dependency node <em>x</em> of <em>w</em>
          Push the pair (<em>w</em>, <em>x</em>) onto the stack
      }
      else Obtain <em>wS</em> from index of <em>w</em>
      if <em>v</em> is not NIL
      {
        Obtain <em>vS</em> from index of <em>v</em>
        Add dependency node for <em>wS</em> to <em>vS</em>
        Increment inDegree of <em>wS</em>
      }
    }
  }
        
// Now clear the visited flags set in the loop above
for each vertex <em>vS</em> in S
{
  Obtain <em>v</em> from index of <em>vS</em>
  Assign false to the visited flag of <em>v</em>
}</pre>
</div>
</div>

<p>Note that the number of vertices and dependency nodes in the pertinent
dependency subgraph is not known beforehand, but a method such as array
doubling (see <a href="#ref-ddj" shape="rect">[DDJ-ArrayDoubling]</a>) can be used to
ensure that building the subgraph is performed in time linear in the size of
<code>S</code>.</p>
</div>

<div class="div2">
<h3><a name="rpm-processing-recalc-compute" id="rpm-processing-recalc-compute" shape="rect"/>D.3 Details on Computing Individual
Vertices</h3>

<p>The following steps process vertices, resulting in a recalculated form:</p>
<ol type="1">
  <li><p>A vertex with inDegree of 0 is selected for evaluation and removed
    from the pertinent dependency subgraph. In the case where more than one
    vertex has inDegree zero, no particular ordering is specified. If the
    pertinent dependency subgraph contains vertices, but none have an
    inDegree of 0, then the calculation structure of the form has a loop, and
    an exception (<a href="#evt-computeException" shape="rect"><b>4.5.4 The
    xforms-compute-exception Event</b></a>) must be thrown, terminating
    processing.</p>
  </li>
  <li><p>If the vertex corresponds to a computed item, computed expressions
    are evaluated as follows:</p>
    <ol type="a">
      <li><p><code>calculate</code>: If the value of the model item changes,
        the corresponding instance data is updated and the dirty flag is
        set.</p>
      </li>
      <li><p><code>relevant</code>, <code>readOnly</code>,
        <code>required</code>, <code>constraint</code>: If any or all of
        these computed properties change, the new settings are immediately
        placed into effect for associated form controls.</p>
      </li>
    </ol>
  </li>
  <li><p>For each vertex in the <code>depList</code> of the removed vertex,
    decrement the inDegree by 1.</p>
  </li>
  <li><p>If no vertices remain in the pertinent dependency subgraph, then the
    calculation has successfully completed. Otherwise, repeat this sequence
    from step 1.</p>
  </li>
</ol>
</div>

<div class="div2">
<h3><a name="rpm-processing-recalc-example" id="rpm-processing-recalc-example" shape="rect"/>D.4 Example of Calculation
Processing</h3>

<p>For example, consider six vertices <code>a</code>, <code>b</code>,
<code>v</code>, <code>w</code>, <code>x</code>, and <code>y</code>. Let
<code>a</code> and <code>b</code> represent the text content of instance
nodes that will be set by a binding from user input controls. Let
<code>v</code> and <code>w</code> be vertices representing the calculated
value and the validity property of a third instance node <code>c</code>.
These vertices would result from a <code>bind</code> element <code>B</code>
with <code>calculate</code> and <code>constraint</code> attributes and a
<code>nodeset</code> attribute that indicates <code>c</code>. Suppose that
the value of <code>c</code> is the product of <code>a</code> and
<code>b</code> and that the value is only valid if it does not exceed 100.
Likewise, suppose <code>x</code> and <code>y</code> are vertices representing
the calculated value and the validity property of a fourth instance node
<code>d</code>. Let the value of <code>d</code> be the sum of <code>a</code>
and <code>b</code>, and let <code>d</code> be valid if the value does not
exceed 20. The figure below depicts the dependency digraph for this
example.</p>

<p><img src="images/depdigraph.gif" alt="Dependency graph"/></p>

<p>Vertices <code>a</code> and <code>b</code> have edges leading to
<code>v</code> and <code>x</code> because these vertices represent the
calculate expressions of <code>c</code> and <code>d</code>, which reference
<code>a</code> and <code>b</code> to compute their product and sum,
respectively. Similarly, <code>v</code> and <code>x</code> have directed
edges to <code>w</code> and <code>y</code>, respectively, because
<code>w</code> and <code>y</code> represent the <code>constraint</code>
expressions of <code>c</code> and <code>d</code>, which reference the values
of <code>c</code> and <code>d</code> to compare them with boundary values.</p>

<p>If <code>a</code> and <code>b</code> are initially equal to 10, and the
user changes <code>a</code> to 11, then it is necessary to first recalculate
<code>v</code> (the value of <code>c</code>) then recalculate <code>w</code>
(the validity property of the value of <code>c</code>). Likewise,
<code>x</code> (the value of <code>d</code>) must be recalculated before
recalculating <code>y</code> (the validity property of the value of
<code>d</code>). In both cases, the validity of the value does not change to
<code>false</code> until after the new product and sum are computed based on
the change to <code>a</code>. However, there are no interdependencies between
<code>v</code> and <code>x</code>, so the product and sum could be computed
in either order.</p>

<p>The pertinent subgraph excludes <code>b</code> and only vertex
<code>a</code> has in-degree of zero. The vertex <code>a</code> is processed
first. It is not a computed vertex, so no recalculation occurs on
<code>a</code>, but its removal causes <code>v</code> and <code>x</code> to
have in-degree zero. Vertex <code>v</code> is processed second. Its value
changes to 121, and its removal drops the in-degree of vertex <code>w</code>
to zero. Vertex <code>x</code> is processed next, changing value to 21. When
<code>x</code> is removed, its neighbor <code>y</code> drops to in-degree
zero. The fourth and fifth iterations of this process recalculate the
validity of <code>w</code> and <code>y</code>, both of which change to
false.</p>
</div>
</div>

<div class="div1">
<h2><a name="mode" id="mode" shape="rect"/>E Input Modes</h2>

<p>The attribute <code>inputmode</code> provides a <em>hint</em> to the user
agent to select an appropriate input mode for the text input expected in an
associated form control. The input mode may be a keyboard configuration, an
input method editor (also called front end processor) or any other setting
affecting input on the device(s) used.</p>

<p>Using <code>inputmode</code>, the author can give hints to the agent that
make form input easier for the user. Authors should provide
<code>inputmode</code> attributes wherever possible, making sure that the
values used cover a wide range of devices.</p>

<div class="div2">
<h3><a name="mode-syntax" id="mode-syntax" shape="rect"/>E.1 <code>inputmode</code>
Attribute Value Syntax</h3>

<p>The value of the <code>inputmode</code> attribute is a white space
separated list of tokens. Tokens are either sequences of alphabetic letters
or absolute URIs. The later can be distinguished from the former by noting
that absolute URIs contain a ':'. Tokens are case-sensitive. All the tokens
consisting of alphabetic letters only are defined in this specification, in
<a href="#mode-values" shape="rect"><b>E.3 List of Tokens</b></a> (or a successor of this
specification).</p>

<p>This specification does not define any URIs for use as tokens, but allows
others to define such URIs for extensibility. This may become necessary for
devices with input modes that cannot be covered by the tokens provided here.
The URI should dereference to a human-readable description of the input mode
associated with the use of the URI as a token. This description should
describe the input mode indicated by this token, and whether and how this
token modifies other tokens or is modified by other tokens.</p>
</div>

<div class="div2">
<h3><a name="mode-ua-behavior" id="mode-ua-behavior" shape="rect"/>E.2 User Agent
Behavior</h3>

<p>Upon entering an empty form control with an <code>inputmode</code>
attribute, the user agent should select the input mode indicated by the
<code>inputmode</code> attribute value. User agents should not use the
<code>inputmode</code> attribute to set the input mode when entering a form
control with text already present. To set the appropriate input mode when
entering a form control that already contains text, user agents should rely
on platform-specific conventions.</p>

<p>User agents should make available all the input modes which are supported
by the (operating) system/device(s) they run on/have access to, and which are
installed for regular use by the user. This is typically only a small subset
of the input modes that can be described with the tokens defined here.</p>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p>Additional guidelines for user agent implementation are found at <a href="#ref-uaag-1.0" shape="rect">[UAAG 1.0]</a>.</p>
</div>

<p>The following simple algorithm is used to define how user agents match the
values of an <code>inputmode</code> attribute to the input modes they can
provide. This algorithm does not have to be implemented directly; user agents
just have to behave as if they used it. The algorithm is not designed to
produce "obvious" or "desirable" results for every possible combination of
tokens, but to produce correct behavior for frequent token combinations and
predictable behavior in all cases.</p>

<p>First, each of the input modes available is represented by one or more
lists of tokens. An input mode may correspond to more than one list of
tokens; as an example, on a system set up for a Greek user, both "greek
upperCase" and "user upperCase" would correspond to the same input mode. No
two lists will be the same.</p>

<p>Second, the <code>inputmode</code> attribute is scanned from front to
back. For each token <var>t</var> in the <code>inputmode</code> attribute, if
in the remaining list of tokens representing available input modes there is
any list of tokens that contains <var>t</var>, then all lists of tokens
representing available input modes that do not contain <var>t</var> are
removed. If there is no remaining list of tokens that contains <var>t</var>,
then <var>t</var> is ignored.</p>

<p>Third, if one or more lists of tokens are left, and they all correspond to
the same input mode, then this input mode is chosen. If no list is left
(meaning that there was none at the start) or if the remaining lists
correspond to more than one input mode, then no input mode is chosen.</p>

<div class="exampleOuter">
<p>Example: Assume the list of lists of tokens representing the available
input modes is: {"cyrillic upperCase", "cyrillic lowerCase", "cyrillic",
"latin", "user upperCase", "user lowerCase"}, then the following
<code>inputmode</code> values select the following input modes: "cyrillic
title" selects "cyrillic", "cyrillic lowerCase" selects "cyrillic lowerCase",
"lowerCase cyrillic" selects "cyrillic lowerCase", "latin upperCase" selects
"latin", but "upperCase latin" does select "cyrillic upperCase" or "user
upperCase" if they correspond to the same input mode, and does not select any
input mode if "cyrillic upperCase" and "user upperCase" do not correspond to
the same input mode.</p>
</div>
</div>

<div class="div2">
<h3><a name="mode-values" id="mode-values" shape="rect"/>E.3 List of Tokens</h3>

<p>Tokens defined in this specification are separated into two categories:
<em>Script tokens</em> and <em>modifiers</em>. In <code>inputmode</code>
attributes, script tokens should always be listed before modifiers.</p>

<div class="div3">
<h4><a name="mode-scripts" id="mode-scripts" shape="rect"/>E.3.1 Script Tokens</h4>

<p>Script tokens provide a general indication the set of characters that is
covered by an input mode. In most cases, script tokens correspond directly to
<a href="#ref-unicode-scripts" shape="rect">[Unicode Scripts]</a>. Some tokens correspond
to the block names in Java class java.lang.Character.UnicodeBlock (<a href="#ref-java-unicode-blocks" shape="rect">[Java Unicode Blocks]</a>) or Unicode Block
names. However, this neither means that an input mode has to allow input for
all the characters in the script or block, nor that an input mode is limited
to only characters from that specific script. As an example, a "latin"
keyboard doesn't cover all the characters in the Latin script, and includes
punctuation which is not assigned to the Latin script. The version of the
Unicode Standard that these script names are taken from is 3.2.</p>

<table border="2" frame="border" summary="list of allowed values for attribute inputmode">
  <thead>
    <tr>
      <th colspan="1" rowspan="1">Input Mode Token</th>
      <th colspan="1" rowspan="1">Comments</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td colspan="1" rowspan="1">arabic</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">armenian</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">bengali</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">bopomofo</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">braille</td>
      <td colspan="1" rowspan="1">used to input braille patterns (not to
        indicate a braille input device)</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">buhid</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">canadianAboriginal</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">cherokee</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">cyrillic</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">deseret</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">devanagari</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">ethiopic</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">georgian</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">greek</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">gothic</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">gujarati</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">gurmukhi</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">han</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">hangul</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">hanja</td>
      <td colspan="1" rowspan="1">Subset of 'han' used in writing Korean</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">hanunoo</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">hebrew</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">hiragana</td>
      <td colspan="1" rowspan="1">Unicode script name (may include other
        Japanese scripts produced by conversion from hiragana)</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">ipa</td>
      <td colspan="1" rowspan="1">International Phonetic Alphabet</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">kanji</td>
      <td colspan="1" rowspan="1">Subset of 'han' used in writing
      Japanese</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">kannada</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">katakana</td>
      <td colspan="1" rowspan="1">Unicode script name (full-width, not
        half-width)</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">khmer</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">lao</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">latin</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">malayalam</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">math</td>
      <td colspan="1" rowspan="1">mathematical symbols and related
      characters</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">mongolian</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">myanmar</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">ogham</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">oldItalic</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">oriya</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">runic</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">simplifiedHanzi</td>
      <td colspan="1" rowspan="1">Subset of 'han' used in writing Simplified
        Chinese</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">sinhala</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">syriac</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">tagalog</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">tagbanwa</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">tamil</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">telugu</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">thaana</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">thai</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">tibetan</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">traditionalHanzi</td>
      <td colspan="1" rowspan="1">Subset of 'han' used in writing Traditional
        Chinese</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">user</td>
      <td colspan="1" rowspan="1">Special value denoting the 'native' input
        of the user (e.g. to input her name or text in her native
      language).</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">yi</td>
      <td colspan="1" rowspan="1">Unicode script name</td>
    </tr>
  </tbody>
</table>
</div>

<div class="div3">
<h4><a name="mode-modifiers" id="mode-modifiers" shape="rect"/>E.3.2 Modifier
Tokens</h4>

<p>Modifier tokens can be added to the scripts they apply in order to more
closely specify the kind of characters expected in the form control.
Traditional PC keyboards do not need most modifier tokens (indeed, users on
such devices would be quite confused if the software decided to change case
on its own; CAPS lock for upperCase may be an exception). However, modifier
tokens can be very helpful to set input modes for small devices.</p>

<table border="2" frame="border" summary="list of modifier tokens for attribute inputmode">
  <thead>
    <tr>
      <th colspan="1" rowspan="1">Input Mode Token</th>
      <th colspan="1" rowspan="1">Comments</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td colspan="1" rowspan="1">lowerCase</td>
      <td colspan="1" rowspan="1">lowercase (for bicameral scripts)</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">upperCase</td>
      <td colspan="1" rowspan="1">uppercase (for bicameral scripts)</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">titleCase</td>
      <td colspan="1" rowspan="1">title case (for bicameral scripts): words
        start with an upper case letter</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">startUpper</td>
      <td colspan="1" rowspan="1">start input with one uppercase letter, then
        continue with lowercase letters</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">digits</td>
      <td colspan="1" rowspan="1">digits of a particular script (e.g.
        inputmode='thai digits')</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">symbols</td>
      <td colspan="1" rowspan="1">symbols, punctuation (suitable for a
        particular script)</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">predictOn</td>
      <td colspan="1" rowspan="1">text prediction switched on (e.g. for
        running text)</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">predictOff</td>
      <td colspan="1" rowspan="1">text prediction switched off (e.g. for
        passwords)</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">halfWidth</td>
      <td colspan="1" rowspan="1">half-width compatibility forms (e.g.
        Katakana; deprecated)</td>
    </tr>
  </tbody>
</table>
</div>
</div>

<div class="div2">
<h3><a name="mode-patterns" id="mode-patterns" shape="rect"/>E.4 Relationship to XML
Schema pattern facets</h3>

<p>User agents may use information available in an XML Schema pattern facet
to set the input mode. Note that a pattern facet is a hard restriction on the
lexical value of an instance data node, and can specify different
restrictions for different parts of the data item. Attribute
<code>inputmode</code> is a soft hint about the kinds of characters that the
user may most probably start to input into the form control. Attribute
<code>inputmode</code> is provided in addition to pattern facets for the
following reasons:</p>
<ol type="1">
  <li><p>The set of allowable characters specified in a pattern may be so
    wide that it is not possible to deduce a reasonable input mode setting.
    Nevertheless, there frequently is a kind of characters that will be input
    by the user with high probability. In such a case, <code>inputmode</code>
    allows to set the input mode for the user's convenience.</p>
  </li>
  <li><p>In some cases, it would be possible to derive the input mode setting
    from the pattern because the set of characters allowed in the pattern
    closely corresponds to a set of characters covered by an
    <code>inputmode</code> attribute value. However, such a derivation would
    require a lot of data and calculations on the user agent.</p>
  </li>
  <li><p>Small devices may leave the checking of patterns to the server, but
    will easily be able to switch to those input modes that they support.
    Being able to make data entry for the user easier is of particular
    importance on small devices.</p>
  </li>
</ol>
</div>

<div class="div2">
<h3><a name="mode-examples" id="mode-examples" shape="rect"/>E.5 Examples</h3>

<div class="exampleOuter">
<p>This is an example of a form for Japanese address input. It is shown in
table form; it will be replaced by actual syntax in a later version of this
specification.</p>

<table summary="two-column table, first column is field names, second column is appropriate inputmode">
  <thead>
    <tr>
      <th colspan="1" rowspan="1">Caption:</th>
      <th colspan="1" rowspan="1"><code>inputmode</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td colspan="1" rowspan="1">Family name</td>
      <td colspan="1" rowspan="1">hiragana</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">(in kana)</td>
      <td colspan="1" rowspan="1">katakana</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Given name</td>
      <td colspan="1" rowspan="1">hiragana</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">(in kana)</td>
      <td colspan="1" rowspan="1">katakana</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Zip code</td>
      <td colspan="1" rowspan="1">latin digits</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Address</td>
      <td colspan="1" rowspan="1">hiragana</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">(in kana)</td>
      <td colspan="1" rowspan="1">katakana</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Email</td>
      <td colspan="1" rowspan="1">latin lowerCase</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Telephone</td>
      <td colspan="1" rowspan="1">latin digits</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Comments</td>
      <td colspan="1" rowspan="1">user predictOn</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>

<div class="div1">
<h2><a name="style" id="style" shape="rect"/>F XForms and Styling (Non-Normative)</h2>

<p>This informative section provides a broad outline of new and existing CSS
features needed to style XForms content. A future Recommendation from the CSS
Working Group will fully develop the specification of these features.</p>

<div class="div2">
<h3><a name="id2686575" id="id2686575" shape="rect"/>F.1 Pseudo-classes</h3>

<p>A CSS pseudo-class is used to select elements for styling based on
information that lies outside of the document tree or that cannot be
expressed using the other selectors.</p>

<table border="1" summary="suggested pseudo-classes for styling forms">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Name</th>
      <th colspan="1" rowspan="1">Defined in:</th>
      <th colspan="1" rowspan="1">Relationship to XForms</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><code>:enabled</code> &amp;
        <code>:disabled</code></td>
      <td colspan="1" rowspan="1">[CSS3]</td>
      <td colspan="1" rowspan="1">Selects any form control bound to a node
        with the model item property <code>relevant</code> evaluating to true
        or false (respectively).</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><code>:required</code> &amp;
        <code>:optional</code></td>
      <td colspan="1" rowspan="1">TBD</td>
      <td colspan="1" rowspan="1">Selects any form control bound to a node
        with the model item property <code>required</code> evaluating to true
        or false (respectively).</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><code>:valid</code> &amp;
        <code>:invalid</code></td>
      <td colspan="1" rowspan="1">TBD</td>
      <td colspan="1" rowspan="1">Selects any form control bound to a node
        that is currently valid or invalid (respectively), as defined by
        XForms 1.0.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><code>:read-only</code> &amp;
        <code>:read-write</code></td>
      <td colspan="1" rowspan="1">TBD</td>
      <td colspan="1" rowspan="1">Selects any form control bound to a node
        with the model item property <code>readonly</code> evaluating to true
        or false (respectively).</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><code>:out-of-range</code> &amp;
        <code>:in-range</code></td>
      <td colspan="1" rowspan="1">TBD</td>
      <td colspan="1" rowspan="1">Selects any form control bound to a node
        that contains a value the form control is not or is capable of
        rendering, (respectively).</td>
    </tr>
  </tbody>
</table>

<p>This list is not exhaustive; other pseudo-classes may be defined.</p>
</div>

<div class="div2">
<h3><a name="id2687014" id="id2687014" shape="rect"/>F.2 Pseudo-elements</h3>

<p>Pseudo-elements are abstractions about the document tree beyond those
specified by the document language. Pseudo-elements do not appear in the DOM;
they are used only for purposes of styling.</p>

<table border="1" summary="suggested pseudo-elements for styling forms">
  <tbody>
    <tr>
      <th colspan="1" rowspan="1">Name</th>
      <th colspan="1" rowspan="1">Defined in:</th>
      <th colspan="1" rowspan="1">Relationship to XForms</th>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><code>::value</code></td>
      <td colspan="1" rowspan="1">TBD</td>
      <td colspan="1" rowspan="1">Represents the "active" area of a form
        control excluding the label; this corresponds in HTML to
        <code>input</code> and other form control elements. This
        pseudo-element is a child of the form control element, and appears
        immediately after the required <code>label</code> element.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><code>::repeat-item</code></td>
      <td colspan="1" rowspan="1">TBD</td>
      <td colspan="1" rowspan="1">Represents a single item from a repeating
        sequence. Its position is as a parent to all the elements in a single
        repeating item. Each <code>::repeat-item</code> is associated with a
        particular instance data node, and is affected by the model item
        properties (e.g. '<code>relevant</code>') found there, as the related
        style properties will cascade to the child elements.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1"><code>::repeat-index</code></td>
      <td colspan="1" rowspan="1">TBD</td>
      <td colspan="1" rowspan="1">Represents the current item of a repeating
        sequence. Its position is as a parent of all the elements in the
        index repeating item (and as a child to the
        <code>::repeat-item</code> pseudo-element), thus any style
        declarations applying to this pseudo-element override those on the
        parent <code>::repeat-item</code>.</td>
    </tr>
  </tbody>
</table>

<p>This list is not exhaustive; other pseudo-elements may be defined.</p>
</div>

<div class="div2">
<h3><a name="id2687225" id="id2687225" shape="rect"/>F.3 Examples</h3>

<p>The following examples show how basic styling can be accomplished on form
controls and repeating structures.</p>

<div class="exampleInner">
<pre xml:space="preserve">@namespace xforms url(http://www.w3.org/2002/xforms);
/* Display a red background on all invalid form controls */
*:invalid { background-color:red; }
/* Display a red asterisk after all required form controls */
*:required::after { content: "*"; color:red; }
/* Do not render non-relevant form controls */
*:disabled { visibility: hidden; }
/* The following declarations cause form controls and their labels
to align neatly, as if a two-column table were used */
xforms|group { display: table; }
xforms|input { display: table-row; }
xforms|input &gt; xforms|label { display: table-cell; }
xforms|input::value { border: thin black solid; display: table-cell; }
/* Display an alert message when appropriate */
*:valid   &gt; xforms|alert { display: none; }
*:invalid &gt; xforms|alert { display: inline; }
/* Display repeat-items with a dashed border */
*::repeat-item { border: dashed; }
/* Display a teal highlight behind the current repeat item */
*::repeat-index { background-color: teal; }
<span class="diff-del">*::repeat-item:disabled { visibility: visible; color: GrayText; }</span></pre>
</div>
</div>
</div>

<div class="div1">
<h2><a name="xforms-examples" id="xforms-examples" shape="rect"/>G Complete XForms
Examples (Non-Normative)</h2>

<p>This section presents complete XForms examples. These and additional
examples are maintained at <a href="http://www.w3.org/MarkUp/Forms/2002/Examples/" shape="rect">http://www.w3.org/MarkUp/Forms/2002/Examples</a>.</p>

<div class="div2">
<h3><a name="xforms-in-xhtml-00" id="xforms-in-xhtml-00" shape="rect"/>G.1 XForms in
XHTML</h3>

<div class="exampleInner">
<!-- converted by xmlverbatim.xsl 1.0.2, (c) O. Becker -->

<div class="xmlverb-default">
&lt;!--<span class="xmlverb-comment">$Id: index-diff.html,v 1.493 2003/10/03
14:35:40 tvraman Exp $</span>--&gt;<br clear="none"/>
&lt;<span class="xmlverb-element-name">html</span> <span class="xmlverb-ns-name">xmlns:my</span>="<span class="xmlverb-ns-uri">http://commerce.example.com/payment</span>" <span class="xmlverb-ns-name">xmlns:ev</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2001/xml-events</span>" <span class="xmlverb-ns-name">xmlns:xsd</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2001/XMLSchema</span>" <span class="xmlverb-ns-name">xmlns:xforms</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2002/xforms</span>" <span class="xmlverb-ns-name">xmlns</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2002/06/xhtml2</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-name">head</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">title</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">fr</span>"&gt;<span class="xmlverb-text">XForms en XHTML</span>&lt;/<span class="xmlverb-element-name">title</span>&gt;<span class="xmlverb-text"><br clear="none"/>
<br clear="none"/>
    </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">model</span> <span class="xmlverb-attr-name">schema</span>="<span class="xmlverb-attr-content">payschema.xsd</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">instance</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">my</span>:<span class="xmlverb-element-name">payment</span> <span class="xmlverb-attr-name">as</span>="<span class="xmlverb-attr-content">credit</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">my</span>:<span class="xmlverb-element-name">cc</span> /&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">my</span>:<span class="xmlverb-element-name">exp</span> /&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-nsprefix">my</span>:<span class="xmlverb-element-name">payment</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">instance</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">submission</span> <span class="xmlverb-attr-name">action</span>="<span class="xmlverb-attr-content">http://www.example.com/buy.rb</span>" <span class="xmlverb-attr-name">method</span>="<span class="xmlverb-attr-content">post</span>" <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">s00</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">bind</span> <span class="xmlverb-attr-name">nodeset</span>="<span class="xmlverb-attr-content">my:cc</span>" <span class="xmlverb-attr-name">relevant</span>="<span class="xmlverb-attr-content">../@as='credit'</span>" <span class="xmlverb-attr-name">required</span>="<span class="xmlverb-attr-content">true()</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">bind</span> <span class="xmlverb-attr-name">nodeset</span>="<span class="xmlverb-attr-content">my:exp</span>" <span class="xmlverb-attr-name">relevant</span>="<span class="xmlverb-attr-content">../@as='credit'</span>" <span class="xmlverb-attr-name">required</span>="<span class="xmlverb-attr-content">true()</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">model</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-name">head</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-name">body</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    ...<br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">group</span> <span class="xmlverb-ns-name">xmlns</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2002/xforms</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-name">trigger</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Français</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">toggle</span> <span class="xmlverb-attr-name">case</span>="<span class="xmlverb-attr-content">fr</span>" <span class="xmlverb-attr-name">ev:event</span>="<span class="xmlverb-attr-content">DOMActivate</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-name">trigger</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-name">trigger</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">English</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">toggle</span> <span class="xmlverb-attr-name">case</span>="<span class="xmlverb-attr-content">en</span>" <span class="xmlverb-attr-name">ev:event</span>="<span class="xmlverb-attr-content">DOMActivate</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-name">trigger</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-name">group</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    <br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">switch</span> <span class="xmlverb-ns-name">xmlns</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2002/xforms</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-name">case</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">fr</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">select1</span> <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">@as</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">fr</span>"&gt;<span class="xmlverb-text">Choisissez un mode de paiement</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">choices</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">fr</span>"&gt;<span class="xmlverb-text">Comptant</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">cash</span>&lt;/<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">message</span> <span class="xmlverb-attr-name">level</span>="<span class="xmlverb-attr-content">modeless</span>" <span class="xmlverb-attr-name">ev:event</span>="<span class="xmlverb-attr-content">xforms-select</span>" <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">fr</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
                         Ne pas envoyer d'argent comptant par la poste.</span>&lt;/<span class="xmlverb-element-name">message</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;/<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">fr</span>"&gt;<span class="xmlverb-text">Carte bancaire</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">credit</span>&lt;/<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;/<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-name">choices</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-name">select1</span>&gt;<span class="xmlverb-text"><br clear="none"/>
<br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">input</span> <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">my:cc</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">fr</span>"&gt;<span class="xmlverb-text">Numéro de carte bancaire</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">alert</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">fr</span>"&gt;<span class="xmlverb-text">Saississez un numéro de carte bancaire en cours<br clear="none"/>
           (séparez par un espace ou un trait d'union chaque groupe de chiffres)</span>&lt;/<span class="xmlverb-element-name">alert</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-name">input</span>&gt;<span class="xmlverb-text"><br clear="none"/>
<br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">input</span> <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">my:exp</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">fr</span>"&gt;<span class="xmlverb-text">Date d'échéance</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-name">input</span>&gt;<span class="xmlverb-text"><br clear="none"/>
<br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">submit</span> <span class="xmlverb-attr-name">submission</span>="<span class="xmlverb-attr-content">s00</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">fr</span>"&gt;<span class="xmlverb-text">Achetez</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-name">submit</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-name">case</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-name">case</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">en</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">select1</span> <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">@as</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">en</span>"&gt;<span class="xmlverb-text">Select Payment Method</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">choices</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">en</span>"&gt;<span class="xmlverb-text">Cash</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">cash</span>&lt;/<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">message</span> <span class="xmlverb-attr-name">level</span>="<span class="xmlverb-attr-content">modeless</span>" <span class="xmlverb-attr-name">ev:event</span>="<span class="xmlverb-attr-content">xforms-select</span>" <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">en</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
              Please do not mail cash.</span>&lt;/<span class="xmlverb-element-name">message</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;/<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">en</span>"&gt;<span class="xmlverb-text">Credit</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">credit</span>&lt;/<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;/<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-name">choices</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-name">select1</span>&gt;<span class="xmlverb-text"><br clear="none"/>
<br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">input</span> <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">my:cc</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">en</span>"&gt;<span class="xmlverb-text">Credit Card Number</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">alert</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">en</span>"&gt;<span class="xmlverb-text">Please specify a valid credit card number<br clear="none"/>
            (use spaces or hyphens between digit groups)</span>&lt;/<span class="xmlverb-element-name">alert</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-name">input</span>&gt;<span class="xmlverb-text"><br clear="none"/>
<br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">input</span> <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">my:exp</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">en</span>"&gt;<span class="xmlverb-text">Expiration Date</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-name">input</span>&gt;<span class="xmlverb-text"><br clear="none"/>
<br clear="none"/>
        </span>&lt;<span class="xmlverb-element-name">submit</span> <span class="xmlverb-attr-name">submission</span>="<span class="xmlverb-attr-content">s00</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">en</span>"&gt;<span class="xmlverb-text">Buy</span>&lt;/<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-name">submit</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-name">case</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-name">switch</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    ...<br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-name">body</span>&gt;<span class="xmlverb-text"><br clear="none"/>
</span>&lt;/<span class="xmlverb-element-name">html</span>&gt;<br clear="none"/>
</div>
</div>

<p>Schema file <code>payschema.xsd</code>:</p>

<div class="exampleInner">
<!-- converted by xmlverbatim.xsl 1.0.2, (c) O. Becker -->

<div class="xmlverb-default">
&lt;!--<span class="xmlverb-comment"> payschema.xsd </span>--&gt;<br clear="none"/>
&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">schema</span> <span class="xmlverb-ns-name">xmlns:xsd</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2001/XMLSchema</span>" <span class="xmlverb-ns-name">xmlns:my</span>="<span class="xmlverb-ns-uri">http://commerce.example.com/payment</span>" <span class="xmlverb-attr-name">targetNamespace</span>="<span class="xmlverb-attr-content">http://commerce.example.com/payment</span>"
<span class="xmlverb-attr-name">elementFormDefault</span>="<span class="xmlverb-attr-content">qualified</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
<br clear="none"/>
  </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">element</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">payment</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">complexType</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">payment</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">sequence</span> <span class="xmlverb-attr-name">minOccurs</span>="<span class="xmlverb-attr-content">0</span>" <span class="xmlverb-attr-name">maxOccurs</span>="<span class="xmlverb-attr-content">unbounded</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">choice</span>&gt;<span class="xmlverb-text">    <br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">element</span> <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">my:cc</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">element</span> <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">my:exp</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">choice</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">sequence</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">attribute</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">as</span>" <span class="xmlverb-attr-name">type</span>="<span class="xmlverb-attr-content">my:paymentAs</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">complexType</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">element</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">element</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">cc</span>" <span class="xmlverb-attr-name">type</span>="<span class="xmlverb-attr-content">my:cc</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">element</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">exp</span>" <span class="xmlverb-attr-name">type</span>="<span class="xmlverb-attr-content">xsd:gYearMonth</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
<br clear="none"/>
  </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">simpleType</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">cc</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">restriction</span> <span class="xmlverb-attr-name">base</span>="<span class="xmlverb-attr-content">xsd:string</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">pattern</span> <span class="xmlverb-attr-name">value</span>="<span class="xmlverb-attr-content">\s*((\d+)[-\s])+([\d]+)\s*</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">restriction</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">simpleType</span>&gt;<span class="xmlverb-text"><br clear="none"/>
<br clear="none"/>
  </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">simpleType</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">paymentAs</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">restriction</span> <span class="xmlverb-attr-name">base</span>="<span class="xmlverb-attr-content">xsd:string</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">enumeration</span> <span class="xmlverb-attr-name">value</span>="<span class="xmlverb-attr-content">cash</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">enumeration</span> <span class="xmlverb-attr-name">value</span>="<span class="xmlverb-attr-content">credit</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">restriction</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">simpleType</span>&gt;<span class="xmlverb-text"><br clear="none"/>
</span>&lt;/<span class="xmlverb-element-nsprefix">xsd</span>:<span class="xmlverb-element-name">schema</span>&gt;<br clear="none"/>
</div>
</div>
</div>

<div class="div2">
<h3><a name="bookmarks-in-x-smiles" id="bookmarks-in-x-smiles" shape="rect"/>G.2
Editing Hierarchical Bookmarks Using XForms</h3>

<div class="exampleInner">
<!-- converted by xmlverbatim.xsl 1.0.2, (c) O. Becker -->

<div class="xmlverb-default">
&lt;<span class="xmlverb-element-name">html</span> <span class="xmlverb-ns-name">xmlns:ev</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2001/xml-events</span>" <span class="xmlverb-ns-name">xmlns:my</span>="<span class="xmlverb-ns-uri">http://commerce.example.com/payment</span>" <span class="xmlverb-ns-name">xmlns:xsd</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2001/XMLSchema</span>" <span class="xmlverb-ns-name">xmlns:xforms</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2002/xforms</span>" <span class="xmlverb-ns-name">xmlns</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2002/06/xhtml2</span>" <span class="xmlverb-attr-name">xml:lang</span>="<span class="xmlverb-attr-content">en</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-name">head</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">style</span> <span class="xmlverb-attr-name">type</span>="<span class="xmlverb-attr-content">text/css</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      xforms|input.editField {<br clear="none"/>
       font-weight:bold; font-size:20px; width:500px<br clear="none"/>
      }<br clear="none"/>
      xforms|label.sectionLabel {<br clear="none"/>
        font-weight:bold; color:white; background-color:blue<br clear="none"/>
      }<br clear="none"/>
      xforms|submit {<br clear="none"/>
        font-family: Arial; font-size: 20px; font-style: bold; color: red<br clear="none"/>
      }<br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-name">style</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">title</span>&gt;<span class="xmlverb-text">Editing Hierarchical Bookmarks In X-Smiles </span>&lt;/<span class="xmlverb-element-name">title</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">model</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">bookmarks</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">instance</span> <span class="xmlverb-attr-name">src</span>="<span class="xmlverb-attr-content">bookmarks.xml</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">submission</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">s01</span>" <span class="xmlverb-attr-name">method</span>="<span class="xmlverb-attr-content">post</span>" <span class="xmlverb-attr-name">action</span>="<span class="xmlverb-attr-content">http://examples.com/</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">model</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-name">head</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-name">body</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">repeat</span> <span class="xmlverb-attr-name">nodeset</span>="<span class="xmlverb-attr-content">section</span>" <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">repeatSections</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">input</span> <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">@name</span>" <span class="xmlverb-attr-name">class</span>="<span class="xmlverb-attr-content">editField</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span> <span class="xmlverb-attr-name">class</span>="<span class="xmlverb-attr-content">sectionLabel</span>"&gt;<span class="xmlverb-text">Section</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">input</span>&gt;<span class="xmlverb-text"><br clear="none"/>
</span>&lt;!--<span class="xmlverb-comment"> BOOKMARK REPEAT START </span>--&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">repeat</span> <span class="xmlverb-attr-name">nodeset</span>="<span class="xmlverb-attr-content">bookmark</span>" <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">repeatBookmarks</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">input</span> <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">@name</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Bookmark name</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">input</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">input</span> <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">@href</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">URL</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">input</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">repeat</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">repeat</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">p</span>&gt;<span class="xmlverb-text"><br clear="none"/>
</span>&lt;!--<span class="xmlverb-comment"> INSERT BOOKMARK BUTTON </span>--&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">trigger</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">insertbutton</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Insert bookmark</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">insert</span> <span class="xmlverb-attr-name">nodeset</span>="<span class="xmlverb-attr-content">section[index('repeatSections')]/bookmark</span>"
<span class="xmlverb-attr-name">at</span>="<span class="xmlverb-attr-content">index('repeatBookmarks')</span>" <span class="xmlverb-attr-name">position</span>="<span class="xmlverb-attr-content">after</span>" <span class="xmlverb-attr-name">ev:event</span>="<span class="xmlverb-attr-content">DOMActivate</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">trigger</span>&gt;<span class="xmlverb-text"><br clear="none"/>
</span>&lt;!--<span class="xmlverb-comment"> DELETE BOOKMARK BUTTON </span>--&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">trigger</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">delete</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Delete bookmark</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">delete</span> <span class="xmlverb-attr-name">nodeset</span>="<span class="xmlverb-attr-content">section[index('repeatSections')]/bookmark</span>"
<span class="xmlverb-attr-name">at</span>="<span class="xmlverb-attr-content">index('repeatBookmarks')</span>" <span class="xmlverb-attr-name">ev:event</span>="<span class="xmlverb-attr-content">DOMActivate</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">trigger</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-name">p</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">p</span>&gt;<span class="xmlverb-text"><br clear="none"/>
</span>&lt;!--<span class="xmlverb-comment"> INSERT SECTION BUTTON </span>--&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">trigger</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">insertsectionbutton</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Insert section</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">insert</span> <span class="xmlverb-attr-name">nodeset</span>="<span class="xmlverb-attr-content">section</span>" <span class="xmlverb-attr-name">at</span>="<span class="xmlverb-attr-content">index('repeatSections')</span>" <span class="xmlverb-attr-name">position</span>="<span class="xmlverb-attr-content">after</span>" <span class="xmlverb-attr-name">ev:event</span>="<span class="xmlverb-attr-content">DOMActivate</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">trigger</span>&gt;<span class="xmlverb-text"><br clear="none"/>
</span>&lt;!--<span class="xmlverb-comment"> DELETE SECTION BUTTON </span>--&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">trigger</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">deletesectionbutton</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Delete section</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">delete</span> <span class="xmlverb-attr-name">nodeset</span>="<span class="xmlverb-attr-content">section</span>" <span class="xmlverb-attr-name">at</span>="<span class="xmlverb-attr-content">index('repeatSections')</span>" <span class="xmlverb-attr-name">ev:event</span>="<span class="xmlverb-attr-content">DOMActivate</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">trigger</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-name">p</span>&gt;<span class="xmlverb-text"><br clear="none"/>
</span>&lt;!--<span class="xmlverb-comment"> SUBMIT BUTTON </span>--&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">submit</span> <span class="xmlverb-attr-name">submission</span>="<span class="xmlverb-attr-content">s01</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Save</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">hint</span>&gt;<span class="xmlverb-text">Click to submit</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">hint</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">submit</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-name">body</span>&gt;<span class="xmlverb-text"><br clear="none"/>
</span>&lt;/<span class="xmlverb-element-name">html</span>&gt;<br clear="none"/>
</div>
</div>

<p>Initial instance file <code>bookmarks.xml</code>:</p>

<div class="exampleInner">
<!-- converted by xmlverbatim.xsl 1.0.2, (c) O. Becker -->

<div class="xmlverb-default">
&lt;!--<span class="xmlverb-comment">This is the bookmarks.xml file </span>--&gt;<br clear="none"/>
&lt;<span class="xmlverb-element-name">bookmarks</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-name">section</span>
<span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">main</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">bookmark</span> <span class="xmlverb-attr-name">href</span>="<span class="xmlverb-attr-content">http://www.example.com/xforms.xml</span>" <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">Main page</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-name">section</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-name">section</span>
<span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">demos</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">bookmark</span> <span class="xmlverb-attr-name">href</span>="<span class="xmlverb-attr-content">http://www.example.com/demo/images.fo</span>"
<span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">images</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">bookmark</span> <span class="xmlverb-attr-name">href</span>="<span class="xmlverb-attr-content">http://www.example.com/demo/xf-ecma.xml</span>"
<span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">ecma</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">bookmark</span> <span class="xmlverb-attr-name">href</span>="<span class="xmlverb-attr-content">http://www.example.com/demo/sip.fo</span>" <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">sip</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-name">section</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-name">section</span>
<span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">XForms</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">bookmark</span> <span class="xmlverb-attr-name">href</span>="<span class="xmlverb-attr-content">file:///C/source/xmlevents.xml</span>" <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">XML
events</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">bookmark</span> <span class="xmlverb-attr-name">href</span>="<span class="xmlverb-attr-content">file:///C/source/model3.xml</span>" <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">model3</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">bookmark</span> <span class="xmlverb-attr-name">href</span>="<span class="xmlverb-attr-content">file:///C/source/repeat.fo</span>" <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">repeat</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-name">section</span>&gt;<span class="xmlverb-text"><br clear="none"/>
</span>&lt;/<span class="xmlverb-element-name">bookmarks</span>&gt;<br clear="none"/>
</div>
</div>
</div>

<div class="div2">
<h3><a name="id2687947" id="id2687947" shape="rect"/>G.3 Survey Using XForms and
SVG</h3>

<div class="diff-add">
<p>The following example shows one possible way of integrating XForms with <a href="#ref-svg11" shape="rect">[SVG 1.1]</a>. Note that the complete set of rules for
integrating XForms and SVG are not fully specified at the time this
specification was published. Future versions of the XForms, SVG, or other W3C
specifications might define more complete rules for integrating XForms and
SVG which might not be compatible with the example below.</p>
</div>

<div class="diff-add">
<p>Note that the example below does not use SVG's <code>switch</code> and
<code>requiredExtensions</code> features, which are commonly used in
conjunction with <code>foreignObject</code>.</p>
</div>

<div class="exampleInner">
<!-- converted by xmlverbatim.xsl 1.0.2, (c) O. Becker -->

<div class="xmlverb-default">
&lt;!--<span class="xmlverb-comment"> &lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" <br clear="none"/>
     "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt; </span>--&gt;<br clear="none"/>
&lt;<span class="xmlverb-element-name">svg</span> <span class="xmlverb-ns-name">xmlns:s</span>="<span class="xmlverb-ns-uri">http://example.com/survey</span>" <span class="xmlverb-ns-name">xmlns:ev</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2001/xml-events</span>" <span class="xmlverb-ns-name">xmlns:xforms</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2002/xforms</span>" <span class="xmlverb-ns-name">xmlns:xlink</span>="<span class="xmlverb-ns-uri">http://www.w3.org/1999/xlink</span>" <span class="xmlverb-ns-name">xmlns</span>="<span class="xmlverb-ns-uri">http://www.w3.org/2000/svg</span>" <span class="xmlverb-attr-name">width</span>="<span class="xmlverb-attr-content">700px</span>" <span class="xmlverb-attr-name">height</span>="<span class="xmlverb-attr-content">600px</span>" <span class="xmlverb-attr-name">viewBox</span>="<span class="xmlverb-attr-content">0 0 700 600</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-name">defs</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">polygon</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">bullet</span>" <span class="xmlverb-attr-name">points</span>="<span class="xmlverb-attr-content">-30,-30, -10,-10, -20,10</span>" <span class="xmlverb-attr-name">fill</span>="<span class="xmlverb-attr-content">#007138</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">model</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">form1</span>" <span class="xmlverb-attr-name">schema</span>="<span class="xmlverb-attr-content">surveyschema.xsd</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">instance</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">instance1</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">survey</span> <span class="xmlverb-ns-name">xmlns</span>="<span class="xmlverb-ns-uri">http://example.com/survey</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">drink</span>&gt;<span class="xmlverb-text">none</span>&lt;/<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">drink</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">espressoPrefs</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">numberPerWeek</span>&gt;<span class="xmlverb-text">0</span>&lt;/<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">numberPerWeek</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">sugar</span>&gt;<span class="xmlverb-text">0</span>&lt;/<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">sugar</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">lemon</span>&gt;<span class="xmlverb-text">Always</span>&lt;/<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">lemon</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">espressoPrefs</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-nsprefix">s</span>:<span class="xmlverb-element-name">survey</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">instance</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">submission</span> <span class="xmlverb-attr-name">id</span>="<span class="xmlverb-attr-content">submit1</span>" <span class="xmlverb-attr-name">method</span>="<span class="xmlverb-attr-content">post</span>" <span class="xmlverb-attr-name">action</span>="<span class="xmlverb-attr-content">http://www.example.org/surveyhandler</span>"
/&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">model</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-name">defs</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-name">title</span>&gt;<span class="xmlverb-text">Espresso survey</span>&lt;/<span class="xmlverb-element-name">title</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-name">desc</span>&gt;<span class="xmlverb-text">Sample SVG and XForms - espresso customer survey</span>&lt;/<span class="xmlverb-element-name">desc</span>&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;<span class="xmlverb-element-name">g</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">text</span> <span class="xmlverb-attr-name">x</span>="<span class="xmlverb-attr-content">50</span>" <span class="xmlverb-attr-name">y</span>="<span class="xmlverb-attr-content">70</span>" <span class="xmlverb-attr-name">font-size</span>="<span class="xmlverb-attr-content">40</span>" <span class="xmlverb-attr-name">font-family</span>="<span class="xmlverb-attr-content">Arial Black, sans-serif</span>" <span class="xmlverb-attr-name">font-weight</span>="<span class="xmlverb-attr-content">900</span>"&gt;<span class="xmlverb-text">Customer Survey: Espresso</span>&lt;/<span class="xmlverb-element-name">text</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">g</span> <span class="xmlverb-attr-name">font-family</span>="<span class="xmlverb-attr-content">Arial, Helvetica, sans-serif</span>" <span class="xmlverb-attr-name">font-size</span>="<span class="xmlverb-attr-content">18</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-name">foreignObject</span> <span class="xmlverb-attr-name">x</span>="<span class="xmlverb-attr-content">80</span>" <span class="xmlverb-attr-name">y</span>="<span class="xmlverb-attr-content">150</span>" <span class="xmlverb-attr-name">width</span>="<span class="xmlverb-attr-content">250</span>" <span class="xmlverb-attr-name">height</span>="<span class="xmlverb-attr-content">40</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">select1</span> <span class="xmlverb-attr-name">appearance</span>="<span class="xmlverb-attr-content">minimal</span>" <span class="xmlverb-attr-name">model</span>="<span class="xmlverb-attr-content">form1</span>" <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">s:drink</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-name">g</span> <span class="xmlverb-attr-name">transform</span>="<span class="xmlverb-attr-content">translate(80, 140)</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">use</span> <span class="xmlverb-attr-name">xlink:href</span>="<span class="xmlverb-attr-content">#bullet</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">text</span>&gt;<span class="xmlverb-text">Your usual coffee drink is:</span>&lt;/<span class="xmlverb-element-name">text</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;/<span class="xmlverb-element-name">g</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Rich, dark espresso</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">espresso</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Creamy cappuccino</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">cappuccino</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Long, milky lattï¿½</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">lattï¿½</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Don't like coffee!</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">none</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">select1</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-name">foreignObject</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-name">foreignObject</span> <span class="xmlverb-attr-name">x</span>="<span class="xmlverb-attr-content">80</span>" <span class="xmlverb-attr-name">y</span>="<span class="xmlverb-attr-content">240</span>" <span class="xmlverb-attr-name">width</span>="<span class="xmlverb-attr-content">250</span>" <span class="xmlverb-attr-name">height</span>="<span class="xmlverb-attr-content">40</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">range</span> <span class="xmlverb-attr-name">model</span>="<span class="xmlverb-attr-content">form1</span>" <span class="xmlverb-attr-name">start</span>="<span class="xmlverb-attr-content">0</span>" <span class="xmlverb-attr-name">end</span>="<span class="xmlverb-attr-content">30</span>" <span class="xmlverb-attr-name">step</span>="<span class="xmlverb-attr-content">5</span>" <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">s:espressoPrefs/s:numberPerWeek</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-name">g</span> <span class="xmlverb-attr-name">transform</span>="<span class="xmlverb-attr-content">translate(80, 230)</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">use</span> <span class="xmlverb-attr-name">xlink:href</span>="<span class="xmlverb-attr-content">#bullet</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">text</span>&gt;<span class="xmlverb-text">Shots of espresso per week:</span>&lt;/<span class="xmlverb-element-name">text</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;/<span class="xmlverb-element-name">g</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">range</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-name">foreignObject</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-name">foreignObject</span> <span class="xmlverb-attr-name">x</span>="<span class="xmlverb-attr-content">80</span>" <span class="xmlverb-attr-name">y</span>="<span class="xmlverb-attr-content">350</span>" <span class="xmlverb-attr-name">width</span>="<span class="xmlverb-attr-content">250</span>" <span class="xmlverb-attr-name">height</span>="<span class="xmlverb-attr-content">40</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">select</span> <span class="xmlverb-attr-name">model</span>="<span class="xmlverb-attr-content">form1</span>" <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">s:espressoPrefs/s:sugar</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-name">g</span> <span class="xmlverb-attr-name">transform</span>="<span class="xmlverb-attr-content">translate(80, 340)</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">use</span> <span class="xmlverb-attr-name">xlink:href</span>="<span class="xmlverb-attr-content">#bullet</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">text</span>&gt;<span class="xmlverb-text">Sugar?</span>&lt;/<span class="xmlverb-element-name">text</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;/<span class="xmlverb-element-name">g</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Yes</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">X</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">select</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-name">foreignObject</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-name">foreignObject</span> <span class="xmlverb-attr-name">x</span>="<span class="xmlverb-attr-content">80</span>" <span class="xmlverb-attr-name">y</span>="<span class="xmlverb-attr-content">420</span>" <span class="xmlverb-attr-name">width</span>="<span class="xmlverb-attr-content">250</span>" <span class="xmlverb-attr-name">height</span>="<span class="xmlverb-attr-content">90</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">select1</span> <span class="xmlverb-attr-name">appearance</span>="<span class="xmlverb-attr-content">full</span>" <span class="xmlverb-attr-name">model</span>="<span class="xmlverb-attr-content">form1</span>" <span class="xmlverb-attr-name">ref</span>="<span class="xmlverb-attr-content">s:espressoPrefs/s:lemon</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-name">g</span> <span class="xmlverb-attr-name">transform</span>="<span class="xmlverb-attr-content">translate(80, 410)</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">use</span> <span class="xmlverb-attr-name">xlink:href</span>="<span class="xmlverb-attr-content">#bullet</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
              </span>&lt;<span class="xmlverb-element-name">text</span>&gt;<span class="xmlverb-text">Lemon?</span>&lt;/<span class="xmlverb-element-name">text</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;/<span class="xmlverb-element-name">g</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Required for the full experience</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">Always</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Whatever</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">Indifferent</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Keep that citrus to yourself</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
            </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text">Never</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">value</span>&gt;<span class="xmlverb-text"><br clear="none"/>
          </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">item</span>&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">select1</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-name">foreignObject</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-name">g</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">use</span> <span class="xmlverb-attr-name">xlink:href</span>="<span class="xmlverb-attr-content">#bullet</span>" <span class="xmlverb-attr-name">x</span>="<span class="xmlverb-attr-content">101</span>" <span class="xmlverb-attr-name">y</span>="<span class="xmlverb-attr-content">64</span>" <span class="xmlverb-attr-name">transform</span>="<span class="xmlverb-attr-content">scale(7,3)</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">foreignObject</span> <span class="xmlverb-attr-name">y</span>="<span class="xmlverb-attr-content">150</span>" <span class="xmlverb-attr-name">x</span>="<span class="xmlverb-attr-content">500</span>" <span class="xmlverb-attr-name">height</span>="<span class="xmlverb-attr-content">60</span>" <span class="xmlverb-attr-name">width</span>="<span class="xmlverb-attr-content">100</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">submit</span> <span class="xmlverb-attr-name">model</span>="<span class="xmlverb-attr-content">form1</span>"&gt;<span class="xmlverb-text"><br clear="none"/>
        </span>&lt;<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text">Send survey</span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">label</span>&gt;<span class="xmlverb-text"><br clear="none"/>
      </span>&lt;/<span class="xmlverb-element-nsprefix">xforms</span>:<span class="xmlverb-element-name">submit</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;/<span class="xmlverb-element-name">foreignObject</span>&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;!--<span class="xmlverb-comment">- keep the graphics data out of this example listing </span>--&gt;<span class="xmlverb-text"><br clear="none"/>
    </span>&lt;<span class="xmlverb-element-name">image</span> <span class="xmlverb-attr-name">xlink:href</span>="<span class="xmlverb-attr-content">espresso.svg</span>" <span class="xmlverb-attr-name">x</span>="<span class="xmlverb-attr-content">400</span>" <span class="xmlverb-attr-name">y</span>="<span class="xmlverb-attr-content">230</span>" <span class="xmlverb-attr-name">width</span>="<span class="xmlverb-attr-content">280</span>" <span class="xmlverb-attr-name">height</span>="<span class="xmlverb-attr-content">270</span>" /&gt;<span class="xmlverb-text"><br clear="none"/>
  </span>&lt;/<span class="xmlverb-element-name">g</span>&gt;<span class="xmlverb-text"><br clear="none"/>
</span>&lt;/<span class="xmlverb-element-name">svg</span>&gt;<br clear="none"/>
</div>
</div>
</div>
</div>

<div class="div1">
<h2><a name="id2687671" id="id2687671" shape="rect"/>H Changelog (Non-Normative)</h2>

<p>This section summarizes changes since the <span class="diff-chg">1 August
XForms 1.0 Proposed</span> Recommendation.</p>
<ul>
  <li><p>Minor editorial adjustments.</p>
  </li>
</ul>
<ul>
  <li><p>Added disclaimer text to SVG example.</p>
  </li>
</ul>
</div>

<div class="div1">
<h2><a name="acks" id="acks" shape="rect"/>I Acknowledgments (Non-Normative)</h2>

<p>This document was produced with the participation of current XForms
Working Group participants:</p>
<ul>
  <li>Steven Pemberton, W3C/CWI (<i>Co-chair</i>)</li>
  <li>Sebastian Schnitzenbaumer, SAP/Mozquito (<i>Co-chair</i>)</li>
  <li>Rob McDougall, Adobe</li>
  <li>Micah Dubinko, Cardiff (<i>Editor</i>)</li>
  <li>Mikko Honkala, Helsinki University Of Technology</li>
  <li>Roland Merrick, IBM (<i>Editor</i>)</li>
  <li>T. V. Raman, IBM (<i>Editor</i>)</li>
  <li>David Landwehr, Novell</li>
  <li>Kenneth Sklander, Novell</li>
  <li>John Boyer, PureEdge Solutions Inc.</li>
  <li>Thierry Michel, W3C (<i>W3C Team Contact</i>)</li>
  <li>Leigh Klotz, Xerox (<i>Editor</i>)</li>
  <li>Mark Birbeck, x-port.net Ltd. (<i>Invited Expert</i>)</li>
  <li>Subramanian Peruvemba, Oracle Corp.</li>
  <li>Mark Seaborne, Origo Services Limited</li>
  <li>Daniel Vogelheim, Sun Microsystems</li>
</ul>

<p>Former Working Group participants:</p>
<ul>
  <li>Peter Stark, Ericsson</li>
  <li>Vincent Godefroy, EDF R&amp;D</li>
  <li>Davanum Srinivas, Computer Associates</li>
  <li>Doug Dominiak, Openwave</li>
  <li>Frank Boumphrey, HTML Writer's Guild</li>
  <li>Linda Bucsay Welsh, Intel</li>
  <li>Gavin McKenzie, JetForm Corporation</li>
  <li>John McCarthy, Lawrence Berkeley National Laboratory</li>
  <li>Frank Olken, Lawrence Berkeley National Laboratory</li>
  <li>Ray Waldin, Lexica, LLC</li>
  <li>Tantek Çelik, Microsoft</li>
  <li>Josef Dietl, Mozquito Technologies</li>
  <li>Dave Hyatt, Netscape/AOL</li>
  <li>Eric Pollmann, Netscape/AOL</li>
  <li>Kazunari Kubota, NTT DoCoMo, Inc.</li>
  <li>Kaori Nakai, NTT DoCoMo, Inc.</li>
  <li>Tom Butcher, OpenDesign</li>
  <li>Ted Wugofski, Openwave</li>
  <li>Jeremy Chone, Oracle</li>
  <li>K. P. Lee, Philips</li>
  <li>Panagiotis Reveliotis, Philips</li>
  <li>Roli Wendorf, Philips</li>
  <li>David Cleary, Progress Software</li>
  <li>Mike Mansell, PureEdge Solutions Inc</li>
  <li>Michael Fergusson, SoftQuad</li>
  <li>Zoe Lacroix, SurroMed, Inc.</li>
  <li>Dave Navarro, WebGeek Inc.</li>
  <li>Masayasu Ishikawa, W3C (<i>Team Contact until September 2001</i>)</li>
  <li>Dave Raggett, W3C/Openwave (<i>Team Contact until December
  2000</i>)</li>
  <li>Larry Masinter, Xerox</li>
</ul>

<p>The XForms Working Group has benefited in its work from the participation
of Invited Experts:</p>
<ul>
  <li>Tom Schnetlage, University of Berkeley</li>
  <li>Dan Gillman, Federal Bureau of Labor Statistics</li>
  <li>Eliot Christian, U.S. Geological Survey</li>
</ul>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p><em>Editor Acknowledgments</em>: Previous versions of this document were
edited with assistance from Dave Raggett (until December 2000), Linda Bucsay
Welsh (until April 2001), and Josef Dietl (until October 2001). Martin Dürst
edited the section on input modes.</p>
</div>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p><em>Additional Acknowledgments</em>: The editors would like to thank Kai
Scheppe, Malte Wedel, and Götz Bock for constructive criticism on early
versions of the binding discussion and their contributions to its present
content. We thank John Boyer for authoring parts of the XForms events and
action handler processing models as well as sections on the recalculation
sequence algorithm. Finally, we would like to thank members of the public
www-forms@w3.org mailing list for their careful reading of draft versions of
this specification and providing constructive suggestions and criticisms.</p>
</div>

<div class="note">
<p class="prefix"><b>Note:</b></p>

<p><em>Additional Acknowledgments</em>: The Working Group would like to thank
the following members of the XML Schema-XForms joint task force: Daniel
Austin (chair), David Cleary, Micah Dubinko, Martin Dürst, David Ezell, Leigh
Klotz, Noah Mendelsohn, Roland Merrick, and Peter Stark for their assistance
in identifying a subset of XML Schema for use in XForms.</p>
</div>
</div>

<div class="div1">
<h2><a name="prod-notes" id="prod-notes" shape="rect"/>J Production Notes
(Non-Normative)</h2>

<p>This document was encoded in the <a href="http://www.w3.org/XML/1998/06/xmlspec-v21.dtd" shape="rect">XMLspec DTD</a> (which
has <a href="http://www.w3.org/XML/1998/06/xmlspec-report-v21.htm" shape="rect">documentation</a>
available). The XML sources were transformed using <a href="http://www.w3.org/XML/1998/06/xmlspec.xsl" shape="rect">xmlspec.xsl</a> style sheet.
The XML Schema portion of the Appendix was rendered into HTML with the <a href="http://www.informatik.hu-berlin.de/~obecker/XSLT/" shape="rect">xmlverbatim XSLT</a>
stylesheet (used with permission). The primary tools used for editing were
SoftQuad XMetaL and EMACS with psgml and XAE. The XML was validated using
XMLLint (part of the GNOME libxml package) and transformed using
XSLTProc—part of the GNOME libxsl package). The multi-file HTML version
was produced using the Xalan processor. The HTML versions were also produced
at times with the Saxon engine. The editors used the W3C CVS repository and
the W3C IRC server for collaborative authoring.</p>
</div>
</div>
</body>
</html>